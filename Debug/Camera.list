
Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f74  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08009138  08009138  00019138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a0  080099a0  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a8  080099a8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080099b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007334  20000028  080099d8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000735c  080099d8  0002735c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1df  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe8  00000000  00000000  0003b237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003f748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d1c  00000000  00000000  00040b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c58  00000000  00000000  0006489c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7e1b  00000000  00000000  0007e4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015630f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae4  00000000  00000000  00156364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009120 	.word	0x08009120

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	08009120 	.word	0x08009120

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <error_led>:
 * Funções ***********************************************************
 * *******************************************************************
 */

void error_led(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  while (1)
  {
	//wait for reset
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000500:	2120      	movs	r1, #32
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <error_led+0x14>)
 8000504:	f005 fcf9 	bl	8005efa <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f005 fa3f 	bl	800598c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800050e:	e7f7      	b.n	8000500 <error_led+0x4>
 8000510:	40020000 	.word	0x40020000

08000514 <wrReg>:
  }
}

void wrReg(uint8_t reg, uint8_t dat)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	71bb      	strb	r3, [r7, #6]
	uint8_t pacote[2];
	pacote[0] = reg;
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	733b      	strb	r3, [r7, #12]
	pacote[1] = dat;
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	737b      	strb	r3, [r7, #13]
	 //HAL_I2C_Master_Transmit(hi2c, DevAddress, pData,  Size, Timeout)
	if(HAL_I2C_Master_Transmit(HI2C, camAddr_WR, pacote, 2,    5) == HAL_ERROR)
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <wrReg+0x44>)
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	f107 020c 	add.w	r2, r7, #12
 8000534:	2305      	movs	r3, #5
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	2302      	movs	r3, #2
 800053a:	2142      	movs	r1, #66	; 0x42
 800053c:	f005 fe3c 	bl	80061b8 <HAL_I2C_Master_Transmit>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d101      	bne.n	800054a <wrReg+0x36>
	{
		error_led();
 8000546:	f7ff ffd9 	bl	80004fc <error_led>
	}
	HAL_Delay(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f005 fa1e 	bl	800598c <HAL_Delay>
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000005c 	.word	0x2000005c

0800055c <wrSensorRegs8_8>:
		error_led();
	return dat;
}

void wrSensorRegs8_8(const struct regval_list reglist[])
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint8_t reg_addr, reg_val;
  const struct regval_list *next = reglist;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	60bb      	str	r3, [r7, #8]

  //Define um valor inicial para as variáveis, o padrão testava antes de atribuir valor
  reg_addr = pgm_read_byte(&next->reg_num);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	73fb      	strb	r3, [r7, #15]
  reg_val = pgm_read_byte(&next->value);
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	3302      	adds	r3, #2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	73bb      	strb	r3, [r7, #14]

  while ((reg_addr != 0xff) | (reg_val != 0xff))
 8000576:	e00f      	b.n	8000598 <wrSensorRegs8_8+0x3c>
  {
    reg_addr = pgm_read_byte(&next->reg_num);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	73fb      	strb	r3, [r7, #15]
    reg_val = pgm_read_byte(&next->value);
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	3302      	adds	r3, #2
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	73bb      	strb	r3, [r7, #14]
    wrReg(reg_addr, reg_val);
 8000586:	7bba      	ldrb	r2, [r7, #14]
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ffc1 	bl	8000514 <wrReg>
    next++;
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	3304      	adds	r3, #4
 8000596:	60bb      	str	r3, [r7, #8]
  while ((reg_addr != 0xff) | (reg_val != 0xff))
 8000598:	7bfa      	ldrb	r2, [r7, #15]
 800059a:	7bbb      	ldrb	r3, [r7, #14]
 800059c:	4013      	ands	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2bff      	cmp	r3, #255	; 0xff
 80005a2:	d1e9      	bne.n	8000578 <wrSensorRegs8_8+0x1c>
  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <setColor>:

void setColor(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#ifdef RGB  //Poloni 08-06-20
  wrSensorRegs8_8(rgb565_ov7670);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <setColor+0x10>)
 80005b6:	f7ff ffd1 	bl	800055c <wrSensorRegs8_8>
#else
  wrSensorRegs8_8(yuv422_ov7670);
#endif
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	080091d8 	.word	0x080091d8

080005c4 <setRes>:

void setRes(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  wrReg(REG_COM3, 4); // REG_COM3 enable scaling
 80005c8:	2104      	movs	r1, #4
 80005ca:	200c      	movs	r0, #12
 80005cc:	f7ff ffa2 	bl	8000514 <wrReg>
  wrSensorRegs8_8(qvga_ov7670);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <setRes+0x18>)
 80005d2:	f7ff ffc3 	bl	800055c <wrSensorRegs8_8>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	080091b0 	.word	0x080091b0

080005e0 <camInit>:

void camInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  wrReg(0x12, 0x80);              //(reseta todos os registradores para o valor default)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	2012      	movs	r0, #18
 80005e8:	f7ff ff94 	bl	8000514 <wrReg>
  HAL_Delay(100);
 80005ec:	2064      	movs	r0, #100	; 0x64
 80005ee:	f005 f9cd 	bl	800598c <HAL_Delay>
  wrSensorRegs8_8(ov7670_default_regs);
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <camInit+0x24>)
 80005f4:	f7ff ffb2 	bl	800055c <wrSensorRegs8_8>
  wrReg(REG_COM10, 32);			  //PCLK does not toggle on HBLANK.
 80005f8:	2120      	movs	r1, #32
 80005fa:	2015      	movs	r0, #21
 80005fc:	f7ff ff8a 	bl	8000514 <wrReg>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	0800920c 	.word	0x0800920c

08000608 <captureImg>:

void captureImg(uint16_t wg, uint16_t hg)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
 8000618:	466b      	mov	r3, sp
 800061a:	461d      	mov	r5, r3
	//Observação: evitei o uso da biblioteca HAL para diminuir a latência dos comandos

	uint16_t y, x, pixel;
	uint16_t R = 0, G = 0, B = 0, pixelx[wg];
 800061c:	2300      	movs	r3, #0
 800061e:	837b      	strh	r3, [r7, #26]
 8000620:	2300      	movs	r3, #0
 8000622:	833b      	strh	r3, [r7, #24]
 8000624:	2300      	movs	r3, #0
 8000626:	82fb      	strh	r3, [r7, #22]
 8000628:	88fc      	ldrh	r4, [r7, #6]
 800062a:	4623      	mov	r3, r4
 800062c:	3b01      	subs	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	b2a0      	uxth	r0, r4
 8000632:	f04f 0100 	mov.w	r1, #0
 8000636:	f04f 0200 	mov.w	r2, #0
 800063a:	f04f 0300 	mov.w	r3, #0
 800063e:	010b      	lsls	r3, r1, #4
 8000640:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000644:	0102      	lsls	r2, r0, #4
 8000646:	b2a0      	uxth	r0, r4
 8000648:	f04f 0100 	mov.w	r1, #0
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	f04f 0300 	mov.w	r3, #0
 8000654:	010b      	lsls	r3, r1, #4
 8000656:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800065a:	0102      	lsls	r2, r0, #4
 800065c:	4623      	mov	r3, r4
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	3307      	adds	r3, #7
 8000662:	08db      	lsrs	r3, r3, #3
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	ebad 0d03 	sub.w	sp, sp, r3
 800066a:	466b      	mov	r3, sp
 800066c:	3301      	adds	r3, #1
 800066e:	085b      	lsrs	r3, r3, #1
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]


	HAL_UART_Transmit(HUART, "*RDY*", 5, 5);	//Envia o aviso de novo frame para o programa OV7670
 8000674:	4b45      	ldr	r3, [pc, #276]	; (800078c <captureImg+0x184>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	2305      	movs	r3, #5
 800067a:	2205      	movs	r2, #5
 800067c:	4944      	ldr	r1, [pc, #272]	; (8000790 <captureImg+0x188>)
 800067e:	f008 f98a 	bl	8008996 <HAL_UART_Transmit>

	while (!VSYNC);	//Espera uma borda de subida	(__/''')
 8000682:	bf00      	nop
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <captureImg+0x18c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f9      	beq.n	8000684 <captureImg+0x7c>
	while ( VSYNC);	//Espera uma borda de descida	('''\__)
 8000690:	bf00      	nop
 8000692:	4b40      	ldr	r3, [pc, #256]	; (8000794 <captureImg+0x18c>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1f9      	bne.n	8000692 <captureImg+0x8a>

	for(y = 0; y < hg; y++)
 800069e:	2300      	movs	r3, #0
 80006a0:	83bb      	strh	r3, [r7, #28]
 80006a2:	e067      	b.n	8000774 <captureImg+0x16c>
	{

		//Não é obrigatório, funciona sem o teste, 24/7 tive que comentar por falha
		//while (!HREF);	//Espera uma borda de subida	(__/''')

		for(x = 0; x < wg; x++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	83fb      	strh	r3, [r7, #30]
 80006a8:	e045      	b.n	8000736 <captureImg+0x12e>
		{
			while ( PCLK);	//Espera uma borda de descida	('''\__)
 80006aa:	bf00      	nop
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <captureImg+0x18c>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f9      	bne.n	80006ac <captureImg+0xa4>
			while (!PCLK);	//Espera uma borda de subida	(__/''')
 80006b8:	bf00      	nop
 80006ba:	4b36      	ldr	r3, [pc, #216]	; (8000794 <captureImg+0x18c>)
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <captureImg+0xb2>

			pixel = PIXEL;	//Lê o pixel paralelo
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <captureImg+0x18c>)
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <captureImg+0x18c>)
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	08db      	lsrs	r3, r3, #3
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f003 0307 	and.w	r3, r3, #7
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	817b      	strh	r3, [r7, #10]
			G = (pixel & 0b11111100)<<3;
			B = (pixel & 0b11111000)>>3;
			pixelx[x] = R | G | B;
#else
			//Habilitar para enviar 320x240 RGB para o LCD TFT
			pixel = pixel << 8; //RGB MSB
 80006e6:	897b      	ldrh	r3, [r7, #10]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	817b      	strh	r3, [r7, #10]
#endif

			while ( PCLK);	//Espera uma borda de descida	('''\__)
 80006ec:	bf00      	nop
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <captureImg+0x18c>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f9      	bne.n	80006ee <captureImg+0xe6>
			while (!PCLK);	//Espera uma borda de subida	(__/''')
 80006fa:	bf00      	nop
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <captureImg+0x18c>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0f9      	beq.n	80006fc <captureImg+0xf4>

#ifdef RGB
			pixel |= PIXEL;	//Lê o pixel paralelo (byte menos significativo)
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <captureImg+0x18c>)
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	095b      	lsrs	r3, r3, #5
 800070e:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <captureImg+0x18c>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	f003 0307 	and.w	r3, r3, #7
 800071c:	4313      	orrs	r3, r2
 800071e:	b29a      	uxth	r2, r3
 8000720:	897b      	ldrh	r3, [r7, #10]
 8000722:	4313      	orrs	r3, r2
 8000724:	817b      	strh	r3, [r7, #10]
			//Habilitar para enviar pela serial - 320x240 RGB LSB
			//HUART->Instance->DR = pixel;	//Transmite o pixel pela serial, DATA byte menos significativo do RGB: 3G e 5B)
			//Habilitar para enviar 320x240 RGB para o LCD TFT
			pixelx[x] = pixel;
 8000726:	8bfa      	ldrh	r2, [r7, #30]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	8979      	ldrh	r1, [r7, #10]
 800072c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(x = 0; x < wg; x++)
 8000730:	8bfb      	ldrh	r3, [r7, #30]
 8000732:	3301      	adds	r3, #1
 8000734:	83fb      	strh	r3, [r7, #30]
 8000736:	8bfa      	ldrh	r2, [r7, #30]
 8000738:	88fb      	ldrh	r3, [r7, #6]
 800073a:	429a      	cmp	r2, r3
 800073c:	d3b5      	bcc.n	80006aa <captureImg+0xa2>
#endif
		}

		//Tratamento e plotagem de pixels no display TFT
		for(x = 0; x < wg; x++)
 800073e:	2300      	movs	r3, #0
 8000740:	83fb      	strh	r3, [r7, #30]
 8000742:	e009      	b.n	8000758 <captureImg+0x150>
		{
			//Plota pixels
			desenhaPixel(pixelx[x]);
 8000744:	8bfa      	ldrh	r2, [r7, #30]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800074c:	4618      	mov	r0, r3
 800074e:	f004 fea9 	bl	80054a4 <desenhaPixel>
		for(x = 0; x < wg; x++)
 8000752:	8bfb      	ldrh	r3, [r7, #30]
 8000754:	3301      	adds	r3, #1
 8000756:	83fb      	strh	r3, [r7, #30]
 8000758:	8bfa      	ldrh	r2, [r7, #30]
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	429a      	cmp	r2, r3
 800075e:	d3f1      	bcc.n	8000744 <captureImg+0x13c>
		}

		while (HREF);	//Espera uma borda de descida	('''\__)
 8000760:	bf00      	nop
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <captureImg+0x18c>)
 8000764:	691b      	ldr	r3, [r3, #16]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f9      	bne.n	8000762 <captureImg+0x15a>
	for(y = 0; y < hg; y++)
 800076e:	8bbb      	ldrh	r3, [r7, #28]
 8000770:	3301      	adds	r3, #1
 8000772:	83bb      	strh	r3, [r7, #28]
 8000774:	8bba      	ldrh	r2, [r7, #28]
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	d393      	bcc.n	80006a4 <captureImg+0x9c>
	}
	HAL_Delay(10);
 800077c:	200a      	movs	r0, #10
 800077e:	f005 f905 	bl	800598c <HAL_Delay>
 8000782:	46ad      	mov	sp, r5
}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bdb0      	pop	{r4, r5, r7, pc}
 800078c:	20000060 	.word	0x20000060
 8000790:	08009138 	.word	0x08009138
 8000794:	40020800 	.word	0x40020800

08000798 <setup>:

void setup(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	//Atribuo um ponteiro ao handler da porta I2C e da UART
	HI2C = hi2c;
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <setup+0x34>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6013      	str	r3, [r2, #0]
	HUART = huart;
 80007a8:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <setup+0x38>)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	6013      	str	r3, [r2, #0]

	camInit();
 80007ae:	f7ff ff17 	bl	80005e0 <camInit>
	setRes();           //Aqui é ajustado o tamanho da imagem
 80007b2:	f7ff ff07 	bl	80005c4 <setRes>
	setColor();
 80007b6:	f7ff fefb 	bl	80005b0 <setColor>
	//wrReg(0x2A, 0x80); // INSERE DUMMY PIXELS
#ifdef software
	wrReg(0x11, 24);  //Prescaler freq. de saída de dados: 24+1 //Vide: https://circuitdigest.com/microcontroller-projects/how-to-use-ov7670-camera-module-with-arduino
#else
	#ifdef W320H240
		wrReg(REG_CLKRC, 10);     //Valor mínimo empírico do prescaler para escrita direta no LCD. Divide o clock de enrtada
 80007ba:	210a      	movs	r1, #10
 80007bc:	2011      	movs	r0, #17
 80007be:	f7ff fea9 	bl	8000514 <wrReg>
		#else
			wrReg(REG_CLKRC, 24);     //Valor mínimo empírico do prescaler para escrita direta no LCD
		#endif
	#endif
#endif
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000005c 	.word	0x2000005c
 80007d0:	20000060 	.word	0x20000060

080007d4 <loop>:

void loop()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
#ifdef W320H240
	captureImg(320, 240); //320x240
 80007d8:	21f0      	movs	r1, #240	; 0xf0
 80007da:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80007de:	f7ff ff13 	bl	8000608 <captureImg>
#else
	captureImg(160, 120); //160x120
#endif
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_6

/* SPI Chip Select */
static void SELECT(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <SELECT+0x14>)
 80007f2:	f005 fb69 	bl	8005ec8 <HAL_GPIO_WritePin>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40020400 	.word	0x40020400

08000800 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <DESELECT+0x14>)
 800080a:	f005 fb5d 	bl	8005ec8 <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40020400 	.word	0x40020400

08000818 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000822:	bf00      	nop
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <SPI_TxByte+0x30>)
 8000826:	f007 f8a0 	bl	800796a <HAL_SPI_GetState>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	d1f9      	bne.n	8000824 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000830:	1df9      	adds	r1, r7, #7
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	2201      	movs	r2, #1
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <SPI_TxByte+0x30>)
 800083a:	f006 fdb8 	bl	80073ae <HAL_SPI_Transmit>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20005224 	.word	0x20005224

0800084c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000852:	23ff      	movs	r3, #255	; 0xff
 8000854:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800085a:	bf00      	nop
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <SPI_RxByte+0x38>)
 800085e:	f007 f884 	bl	800796a <HAL_SPI_GetState>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d1f9      	bne.n	800085c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000868:	1dba      	adds	r2, r7, #6
 800086a:	1df9      	adds	r1, r7, #7
 800086c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <SPI_RxByte+0x38>)
 8000876:	f006 fed6 	bl	8007626 <HAL_SPI_TransmitReceive>

  return data;
 800087a:	79bb      	ldrb	r3, [r7, #6]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20005224 	.word	0x20005224

08000888 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000890:	f7ff ffdc 	bl	800084c <SPI_RxByte>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <SD_ReadyWait+0x34>)
 80008ac:	2232      	movs	r2, #50	; 0x32
 80008ae:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80008b0:	f7ff ffcc 	bl	800084c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80008b4:	f7ff ffca 	bl	800084c <SPI_RxByte>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2bff      	cmp	r3, #255	; 0xff
 80008c0:	d004      	beq.n	80008cc <SD_ReadyWait+0x28>
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SD_ReadyWait+0x34>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f3      	bne.n	80008b4 <SD_ReadyWait+0x10>

  return res;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200052ca 	.word	0x200052ca

080008dc <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80008e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80008e6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80008e8:	f7ff ff8a 	bl	8000800 <DESELECT>

  for(int i = 0; i < 10; i++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	e005      	b.n	80008fe <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80008f2:	20ff      	movs	r0, #255	; 0xff
 80008f4:	f7ff ff90 	bl	8000818 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	3301      	adds	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	2b09      	cmp	r3, #9
 8000902:	ddf6      	ble.n	80008f2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000904:	f7ff ff70 	bl	80007e8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800091c:	2395      	movs	r3, #149	; 0x95
 800091e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e009      	b.n	800093a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000926:	1d3a      	adds	r2, r7, #4
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff72 	bl	8000818 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b05      	cmp	r3, #5
 800093e:	ddf2      	ble.n	8000926 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000940:	e002      	b.n	8000948 <SD_PowerOn+0x6c>
  {
    Count--;
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3b01      	subs	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000948:	f7ff ff80 	bl	800084c <SPI_RxByte>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d002      	beq.n	8000958 <SD_PowerOn+0x7c>
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f4      	bne.n	8000942 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000958:	f7ff ff52 	bl	8000800 <DESELECT>
  SPI_TxByte(0XFF);
 800095c:	20ff      	movs	r0, #255	; 0xff
 800095e:	f7ff ff5b 	bl	8000818 <SPI_TxByte>

  PowerFlag = 1;
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <SD_PowerOn+0x94>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000045 	.word	0x20000045

08000974 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <SD_PowerOff+0x14>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20000045 	.word	0x20000045

0800098c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <SD_CheckPower+0x14>)
 8000992:	781b      	ldrb	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000045 	.word	0x20000045

080009a4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <SD_RxDataBlock+0x68>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80009b4:	f7ff ff4a 	bl	800084c <SPI_RxByte>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	2bff      	cmp	r3, #255	; 0xff
 80009c0:	d104      	bne.n	80009cc <SD_RxDataBlock+0x28>
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <SD_RxDataBlock+0x68>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f3      	bne.n	80009b4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2bfe      	cmp	r3, #254	; 0xfe
 80009d0:	d001      	beq.n	80009d6 <SD_RxDataBlock+0x32>
    return FALSE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e016      	b.n	8000a04 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff53 	bl	8000888 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff4d 	bl	8000888 <SPI_RxBytePtr>
  } while(btr -= 2);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3b02      	subs	r3, #2
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1ed      	bne.n	80009d6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80009fa:	f7ff ff27 	bl	800084c <SPI_RxByte>
  SPI_RxByte();
 80009fe:	f7ff ff25 	bl	800084c <SPI_RxByte>

  return TRUE;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200052cb 	.word	0x200052cb

08000a10 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000a20:	f7ff ff40 	bl	80008a4 <SD_ReadyWait>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2bff      	cmp	r3, #255	; 0xff
 8000a28:	d001      	beq.n	8000a2e <SD_TxDataBlock+0x1e>
    return FALSE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e040      	b.n	8000ab0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000a2e:	78fb      	ldrb	r3, [r7, #3]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fef1 	bl	8000818 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	2bfd      	cmp	r3, #253	; 0xfd
 8000a3a:	d031      	beq.n	8000aa0 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fee5 	bl	8000818 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	607a      	str	r2, [r7, #4]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fede 	bl	8000818 <SPI_TxByte>
    } while (--wc);
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	73bb      	strb	r3, [r7, #14]
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1eb      	bne.n	8000a40 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000a68:	f7ff fef0 	bl	800084c <SPI_RxByte>
    SPI_RxByte();
 8000a6c:	f7ff feee 	bl	800084c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000a70:	e00b      	b.n	8000a8a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000a72:	f7ff feeb 	bl	800084c <SPI_RxByte>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	f003 031f 	and.w	r3, r3, #31
 8000a80:	2b05      	cmp	r3, #5
 8000a82:	d006      	beq.n	8000a92 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000a84:	7b7b      	ldrb	r3, [r7, #13]
 8000a86:	3301      	adds	r3, #1
 8000a88:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000a8a:	7b7b      	ldrb	r3, [r7, #13]
 8000a8c:	2b40      	cmp	r3, #64	; 0x40
 8000a8e:	d9f0      	bls.n	8000a72 <SD_TxDataBlock+0x62>
 8000a90:	e000      	b.n	8000a94 <SD_TxDataBlock+0x84>
        break;
 8000a92:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000a94:	bf00      	nop
 8000a96:	f7ff fed9 	bl	800084c <SPI_RxByte>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0fa      	beq.n	8000a96 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	2b05      	cmp	r3, #5
 8000aa8:	d101      	bne.n	8000aae <SD_TxDataBlock+0x9e>
    return TRUE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000ac4:	f7ff feee 	bl	80008a4 <SD_ReadyWait>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2bff      	cmp	r3, #255	; 0xff
 8000acc:	d001      	beq.n	8000ad2 <SD_SendCmd+0x1a>
    return 0xFF;
 8000ace:	23ff      	movs	r3, #255	; 0xff
 8000ad0:	e040      	b.n	8000b54 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe9f 	bl	8000818 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	0e1b      	lsrs	r3, r3, #24
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe99 	bl	8000818 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	0c1b      	lsrs	r3, r3, #16
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe93 	bl	8000818 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fe8d 	bl	8000818 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe88 	bl	8000818 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b40      	cmp	r3, #64	; 0x40
 8000b10:	d101      	bne.n	8000b16 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000b12:	2395      	movs	r3, #149	; 0x95
 8000b14:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b48      	cmp	r3, #72	; 0x48
 8000b1a:	d101      	bne.n	8000b20 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000b1c:	2387      	movs	r3, #135	; 0x87
 8000b1e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe78 	bl	8000818 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b4c      	cmp	r3, #76	; 0x4c
 8000b2c:	d101      	bne.n	8000b32 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000b2e:	f7ff fe8d 	bl	800084c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000b32:	230a      	movs	r3, #10
 8000b34:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000b36:	f7ff fe89 	bl	800084c <SPI_RxByte>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000b3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da05      	bge.n	8000b52 <SD_SendCmd+0x9a>
 8000b46:	7bbb      	ldrb	r3, [r7, #14]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	73bb      	strb	r3, [r7, #14]
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f1      	bne.n	8000b36 <SD_SendCmd+0x7e>

  return res;
 8000b52:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e0d5      	b.n	8000d1c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000b70:	4b6c      	ldr	r3, [pc, #432]	; (8000d24 <SD_disk_initialize+0x1c8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <SD_disk_initialize+0x2a>
    return Stat;
 8000b7e:	4b69      	ldr	r3, [pc, #420]	; (8000d24 <SD_disk_initialize+0x1c8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	e0ca      	b.n	8000d1c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000b86:	f7ff fea9 	bl	80008dc <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000b8a:	f7ff fe2d 	bl	80007e8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000b92:	2100      	movs	r1, #0
 8000b94:	2040      	movs	r0, #64	; 0x40
 8000b96:	f7ff ff8f 	bl	8000ab8 <SD_SendCmd>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	f040 80a5 	bne.w	8000cec <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000ba2:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <SD_disk_initialize+0x1cc>)
 8000ba4:	2264      	movs	r2, #100	; 0x64
 8000ba6:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000ba8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000bac:	2048      	movs	r0, #72	; 0x48
 8000bae:	f7ff ff83 	bl	8000ab8 <SD_SendCmd>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d158      	bne.n	8000c6a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e00c      	b.n	8000bd8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000bbe:	7bfc      	ldrb	r4, [r7, #15]
 8000bc0:	f7ff fe44 	bl	800084c <SPI_RxByte>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4423      	add	r3, r4
 8000bce:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d9ef      	bls.n	8000bbe <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000bde:	7abb      	ldrb	r3, [r7, #10]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 8083 	bne.w	8000cec <SD_disk_initialize+0x190>
 8000be6:	7afb      	ldrb	r3, [r7, #11]
 8000be8:	2baa      	cmp	r3, #170	; 0xaa
 8000bea:	d17f      	bne.n	8000cec <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000bec:	2100      	movs	r1, #0
 8000bee:	2077      	movs	r0, #119	; 0x77
 8000bf0:	f7ff ff62 	bl	8000ab8 <SD_SendCmd>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d807      	bhi.n	8000c0a <SD_disk_initialize+0xae>
 8000bfa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bfe:	2069      	movs	r0, #105	; 0x69
 8000c00:	f7ff ff5a 	bl	8000ab8 <SD_SendCmd>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000c0a:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <SD_disk_initialize+0x1cc>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1eb      	bne.n	8000bec <SD_disk_initialize+0x90>
 8000c14:	e000      	b.n	8000c18 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000c16:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000c18:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <SD_disk_initialize+0x1cc>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d064      	beq.n	8000cec <SD_disk_initialize+0x190>
 8000c22:	2100      	movs	r1, #0
 8000c24:	207a      	movs	r0, #122	; 0x7a
 8000c26:	f7ff ff47 	bl	8000ab8 <SD_SendCmd>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d15d      	bne.n	8000cec <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e00c      	b.n	8000c50 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000c36:	7bfc      	ldrb	r4, [r7, #15]
 8000c38:	f7ff fe08 	bl	800084c <SPI_RxByte>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4423      	add	r3, r4
 8000c46:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d9ef      	bls.n	8000c36 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000c56:	7a3b      	ldrb	r3, [r7, #8]
 8000c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_initialize+0x108>
 8000c60:	2306      	movs	r3, #6
 8000c62:	e000      	b.n	8000c66 <SD_disk_initialize+0x10a>
 8000c64:	2302      	movs	r3, #2
 8000c66:	73bb      	strb	r3, [r7, #14]
 8000c68:	e040      	b.n	8000cec <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2077      	movs	r0, #119	; 0x77
 8000c6e:	f7ff ff23 	bl	8000ab8 <SD_SendCmd>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d808      	bhi.n	8000c8a <SD_disk_initialize+0x12e>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2069      	movs	r0, #105	; 0x69
 8000c7c:	f7ff ff1c 	bl	8000ab8 <SD_SendCmd>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d801      	bhi.n	8000c8a <SD_disk_initialize+0x12e>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e000      	b.n	8000c8c <SD_disk_initialize+0x130>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d10e      	bne.n	8000cb2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000c94:	2100      	movs	r1, #0
 8000c96:	2077      	movs	r0, #119	; 0x77
 8000c98:	f7ff ff0e 	bl	8000ab8 <SD_SendCmd>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d80e      	bhi.n	8000cc0 <SD_disk_initialize+0x164>
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2069      	movs	r0, #105	; 0x69
 8000ca6:	f7ff ff07 	bl	8000ab8 <SD_SendCmd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d107      	bne.n	8000cc0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000cb0:	e00d      	b.n	8000cce <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2041      	movs	r0, #65	; 0x41
 8000cb6:	f7ff feff 	bl	8000ab8 <SD_SendCmd>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <SD_disk_initialize+0x1cc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1e1      	bne.n	8000c8e <SD_disk_initialize+0x132>
 8000cca:	e000      	b.n	8000cce <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000ccc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <SD_disk_initialize+0x1cc>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d007      	beq.n	8000ce8 <SD_disk_initialize+0x18c>
 8000cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cdc:	2050      	movs	r0, #80	; 0x50
 8000cde:	f7ff feeb 	bl	8000ab8 <SD_SendCmd>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <SD_disk_initialize+0x1d0>)
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000cf2:	f7ff fd85 	bl	8000800 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000cf6:	f7ff fda9 	bl	800084c <SPI_RxByte>

  if (type)
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <SD_disk_initialize+0x1c8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f023 0301 	bic.w	r3, r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SD_disk_initialize+0x1c8>)
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e001      	b.n	8000d16 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000d12:	f7ff fe2f 	bl	8000974 <SD_PowerOff>
  }

  return Stat;
 8000d16:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <SD_disk_initialize+0x1c8>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	200052cb 	.word	0x200052cb
 8000d2c:	20000044 	.word	0x20000044

08000d30 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e002      	b.n	8000d4a <SD_disk_status+0x1a>

  return Stat;
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SD_disk_status+0x28>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000000 	.word	0x20000000

08000d5c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <SD_disk_read+0x1c>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <SD_disk_read+0x20>
    return RES_PARERR;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e051      	b.n	8000e20 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <SD_disk_read+0xcc>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e048      	b.n	8000e20 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <SD_disk_read+0xd0>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	025b      	lsls	r3, r3, #9
 8000d9e:	607b      	str	r3, [r7, #4]

  SELECT();
 8000da0:	f7ff fd22 	bl	80007e8 <SELECT>

  if (count == 1)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d111      	bne.n	8000dce <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	2051      	movs	r0, #81	; 0x51
 8000dae:	f7ff fe83 	bl	8000ab8 <SD_SendCmd>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d129      	bne.n	8000e0c <SD_disk_read+0xb0>
 8000db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbc:	68b8      	ldr	r0, [r7, #8]
 8000dbe:	f7ff fdf1 	bl	80009a4 <SD_RxDataBlock>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d021      	beq.n	8000e0c <SD_disk_read+0xb0>
      count = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	e01e      	b.n	8000e0c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	2052      	movs	r0, #82	; 0x52
 8000dd2:	f7ff fe71 	bl	8000ab8 <SD_SendCmd>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d117      	bne.n	8000e0c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de0:	68b8      	ldr	r0, [r7, #8]
 8000de2:	f7ff fddf 	bl	80009a4 <SD_RxDataBlock>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00a      	beq.n	8000e02 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000df2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1ed      	bne.n	8000ddc <SD_disk_read+0x80>
 8000e00:	e000      	b.n	8000e04 <SD_disk_read+0xa8>
          break;
 8000e02:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	204c      	movs	r0, #76	; 0x4c
 8000e08:	f7ff fe56 	bl	8000ab8 <SD_SendCmd>
    }
  }

  DESELECT();
 8000e0c:	f7ff fcf8 	bl	8000800 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000e10:	f7ff fd1c 	bl	800084c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000044 	.word	0x20000044

08000e30 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <SD_disk_write+0x1c>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <SD_disk_write+0x20>
    return RES_PARERR;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e06b      	b.n	8000f28 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <SD_disk_write+0x100>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e062      	b.n	8000f28 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000e62:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <SD_disk_write+0x100>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000e70:	2302      	movs	r3, #2
 8000e72:	e059      	b.n	8000f28 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <SD_disk_write+0x104>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	025b      	lsls	r3, r3, #9
 8000e84:	607b      	str	r3, [r7, #4]

  SELECT();
 8000e86:	f7ff fcaf 	bl	80007e8 <SELECT>

  if (count == 1)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d110      	bne.n	8000eb2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	2058      	movs	r0, #88	; 0x58
 8000e94:	f7ff fe10 	bl	8000ab8 <SD_SendCmd>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d13a      	bne.n	8000f14 <SD_disk_write+0xe4>
 8000e9e:	21fe      	movs	r1, #254	; 0xfe
 8000ea0:	68b8      	ldr	r0, [r7, #8]
 8000ea2:	f7ff fdb5 	bl	8000a10 <SD_TxDataBlock>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d033      	beq.n	8000f14 <SD_disk_write+0xe4>
      count = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	e030      	b.n	8000f14 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <SD_disk_write+0x104>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2077      	movs	r0, #119	; 0x77
 8000ec2:	f7ff fdf9 	bl	8000ab8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ec6:	6839      	ldr	r1, [r7, #0]
 8000ec8:	2057      	movs	r0, #87	; 0x57
 8000eca:	f7ff fdf5 	bl	8000ab8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2059      	movs	r0, #89	; 0x59
 8000ed2:	f7ff fdf1 	bl	8000ab8 <SD_SendCmd>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11b      	bne.n	8000f14 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000edc:	21fc      	movs	r1, #252	; 0xfc
 8000ede:	68b8      	ldr	r0, [r7, #8]
 8000ee0:	f7ff fd96 	bl	8000a10 <SD_TxDataBlock>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00a      	beq.n	8000f00 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ef0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1ee      	bne.n	8000edc <SD_disk_write+0xac>
 8000efe:	e000      	b.n	8000f02 <SD_disk_write+0xd2>
          break;
 8000f00:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000f02:	21fd      	movs	r1, #253	; 0xfd
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fd83 	bl	8000a10 <SD_TxDataBlock>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <SD_disk_write+0xe4>
      {
        count = 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000f14:	f7ff fc74 	bl	8000800 <DESELECT>
  SPI_RxByte();
 8000f18:	f7ff fc98 	bl	800084c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf14      	ite	ne
 8000f22:	2301      	movne	r3, #1
 8000f24:	2300      	moveq	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000044 	.word	0x20000044

08000f38 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b08b      	sub	sp, #44	; 0x2c
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	603a      	str	r2, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	460b      	mov	r3, r1
 8000f46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000f52:	2304      	movs	r3, #4
 8000f54:	e11b      	b.n	800118e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	d129      	bne.n	8000fb6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d017      	beq.n	8000f9a <SD_disk_ioctl+0x62>
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	dc1f      	bgt.n	8000fae <SD_disk_ioctl+0x76>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <SD_disk_ioctl+0x40>
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d00b      	beq.n	8000f8e <SD_disk_ioctl+0x56>
 8000f76:	e01a      	b.n	8000fae <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000f78:	f7ff fd08 	bl	800098c <SD_CheckPower>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000f82:	f7ff fcf7 	bl	8000974 <SD_PowerOff>
      res = RES_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f8c:	e0fd      	b.n	800118a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000f8e:	f7ff fca5 	bl	80008dc <SD_PowerOn>
      res = RES_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f98:	e0f7      	b.n	800118a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	1c5c      	adds	r4, r3, #1
 8000f9e:	f7ff fcf5 	bl	800098c <SD_CheckPower>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000fac:	e0ed      	b.n	800118a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fb4:	e0e9      	b.n	800118a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000fb6:	4b78      	ldr	r3, [pc, #480]	; (8001198 <SD_disk_ioctl+0x260>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e0e2      	b.n	800118e <SD_disk_ioctl+0x256>

    SELECT();
 8000fc8:	f7ff fc0e 	bl	80007e8 <SELECT>

    switch (ctrl)
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	f200 80cc 	bhi.w	800116c <SD_disk_ioctl+0x234>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <SD_disk_ioctl+0xa4>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	080010d7 	.word	0x080010d7
 8000fe0:	08001015 	.word	0x08001015
 8000fe4:	080010c7 	.word	0x080010c7
 8000fe8:	0800116d 	.word	0x0800116d
 8000fec:	0800116d 	.word	0x0800116d
 8000ff0:	0800116d 	.word	0x0800116d
 8000ff4:	0800116d 	.word	0x0800116d
 8000ff8:	0800116d 	.word	0x0800116d
 8000ffc:	0800116d 	.word	0x0800116d
 8001000:	0800116d 	.word	0x0800116d
 8001004:	0800116d 	.word	0x0800116d
 8001008:	080010e9 	.word	0x080010e9
 800100c:	0800110d 	.word	0x0800110d
 8001010:	08001131 	.word	0x08001131
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001014:	2100      	movs	r1, #0
 8001016:	2049      	movs	r0, #73	; 0x49
 8001018:	f7ff fd4e 	bl	8000ab8 <SD_SendCmd>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80a8 	bne.w	8001174 <SD_disk_ioctl+0x23c>
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2110      	movs	r1, #16
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fcba 	bl	80009a4 <SD_RxDataBlock>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 809e 	beq.w	8001174 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	099b      	lsrs	r3, r3, #6
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d10e      	bne.n	8001060 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001042:	7d7b      	ldrb	r3, [r7, #21]
 8001044:	b29a      	uxth	r2, r3
 8001046:	7d3b      	ldrb	r3, [r7, #20]
 8001048:	b29b      	uxth	r3, r3
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	3301      	adds	r3, #1
 8001054:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001056:	8bfb      	ldrh	r3, [r7, #30]
 8001058:	029a      	lsls	r2, r3, #10
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e02e      	b.n	80010be <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001060:	7c7b      	ldrb	r3, [r7, #17]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	b2da      	uxtb	r2, r3
 8001068:	7dbb      	ldrb	r3, [r7, #22]
 800106a:	09db      	lsrs	r3, r3, #7
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4413      	add	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	7d7b      	ldrb	r3, [r7, #21]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0306 	and.w	r3, r3, #6
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3302      	adds	r3, #2
 8001084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001088:	7d3b      	ldrb	r3, [r7, #20]
 800108a:	099b      	lsrs	r3, r3, #6
 800108c:	b2db      	uxtb	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	7cfb      	ldrb	r3, [r7, #19]
 8001092:	b29b      	uxth	r3, r3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29a      	uxth	r2, r3
 800109c:	7cbb      	ldrb	r3, [r7, #18]
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	3301      	adds	r3, #1
 80010ae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80010b0:	8bfa      	ldrh	r2, [r7, #30]
 80010b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010b6:	3b09      	subs	r3, #9
 80010b8:	409a      	lsls	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80010c4:	e056      	b.n	8001174 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010cc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010d4:	e055      	b.n	8001182 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80010d6:	f7ff fbe5 	bl	80008a4 <SD_ReadyWait>
 80010da:	4603      	mov	r3, r0
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d14b      	bne.n	8001178 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80010e6:	e047      	b.n	8001178 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80010e8:	2100      	movs	r1, #0
 80010ea:	2049      	movs	r0, #73	; 0x49
 80010ec:	f7ff fce4 	bl	8000ab8 <SD_SendCmd>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d142      	bne.n	800117c <SD_disk_ioctl+0x244>
 80010f6:	2110      	movs	r1, #16
 80010f8:	6a38      	ldr	r0, [r7, #32]
 80010fa:	f7ff fc53 	bl	80009a4 <SD_RxDataBlock>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03b      	beq.n	800117c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800110a:	e037      	b.n	800117c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800110c:	2100      	movs	r1, #0
 800110e:	204a      	movs	r0, #74	; 0x4a
 8001110:	f7ff fcd2 	bl	8000ab8 <SD_SendCmd>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d132      	bne.n	8001180 <SD_disk_ioctl+0x248>
 800111a:	2110      	movs	r1, #16
 800111c:	6a38      	ldr	r0, [r7, #32]
 800111e:	f7ff fc41 	bl	80009a4 <SD_RxDataBlock>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d02b      	beq.n	8001180 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800112e:	e027      	b.n	8001180 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001130:	2100      	movs	r1, #0
 8001132:	207a      	movs	r0, #122	; 0x7a
 8001134:	f7ff fcc0 	bl	8000ab8 <SD_SendCmd>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 800113e:	2300      	movs	r3, #0
 8001140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001144:	e00b      	b.n	800115e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001146:	6a3c      	ldr	r4, [r7, #32]
 8001148:	1c63      	adds	r3, r4, #1
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	f7ff fb7e 	bl	800084c <SPI_RxByte>
 8001150:	4603      	mov	r3, r0
 8001152:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001158:	3301      	adds	r3, #1
 800115a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800115e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001162:	2b03      	cmp	r3, #3
 8001164:	d9ef      	bls.n	8001146 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800116c:	2304      	movs	r3, #4
 800116e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001172:	e006      	b.n	8001182 <SD_disk_ioctl+0x24a>
      break;
 8001174:	bf00      	nop
 8001176:	e004      	b.n	8001182 <SD_disk_ioctl+0x24a>
      break;
 8001178:	bf00      	nop
 800117a:	e002      	b.n	8001182 <SD_disk_ioctl+0x24a>
      break;
 800117c:	bf00      	nop
 800117e:	e000      	b.n	8001182 <SD_disk_ioctl+0x24a>
      break;
 8001180:	bf00      	nop
    }

    DESELECT();
 8001182:	f7ff fb3d 	bl	8000800 <DESELECT>
    SPI_RxByte();
 8001186:	f7ff fb61 	bl	800084c <SPI_RxByte>
  }

  return res;
 800118a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800118e:	4618      	mov	r0, r3
 8001190:	372c      	adds	r7, #44	; 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	20000000 	.word	0x20000000

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b09b      	sub	sp, #108	; 0x6c
 80011a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// Display TFT
	char rx;
	uint32_t x=160, y=120;
 80011a2:	23a0      	movs	r3, #160	; 0xa0
 80011a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80011a6:	2378      	movs	r3, #120	; 0x78
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011aa:	f004 fb7d 	bl	80058a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ae:	f000 f893 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b2:	f000 fa53 	bl	800165c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011b6:	f000 fa27 	bl	8001608 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011ba:	f000 f95f 	bl	800147c <MX_TIM1_Init>
  MX_SPI1_Init();
 80011be:	f000 f927 	bl	8001410 <MX_SPI1_Init>
  MX_FATFS_Init();
 80011c2:	f007 feb1 	bl	8008f28 <MX_FATFS_Init>
  MX_I2C1_Init();
 80011c6:	f000 f8f5 	bl	80013b4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011ca:	f000 f9a7 	bl	800151c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Sequência de inicialização do LCD

  	    tft_gpio_init();                  //Inicializa os GPIOs do LCD (evita uso do CubeMX)
 80011ce:	f004 facf 	bl	8005770 <tft_gpio_init>

  	    HAL_TIM_Base_Start(&htim1);      //Inicializa o Timer1 (base de tempo de uso do LCD)
 80011d2:	483a      	ldr	r0, [pc, #232]	; (80012bc <main+0x120>)
 80011d4:	f006 fcf2 	bl	8007bbc <HAL_TIM_Base_Start>

  	    ID = tft_readID();               //Lê o ID do LCD (poderia ser chamada pela inicialização do LCD)
 80011d8:	f002 f8e4 	bl	80033a4 <readID>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <main+0x124>)
 80011e2:	801a      	strh	r2, [r3, #0]

  	    HAL_Delay(100);
 80011e4:	2064      	movs	r0, #100	; 0x64
 80011e6:	f004 fbd1 	bl	800598c <HAL_Delay>

  	    tft_init (ID);                   //Inicializa o LCD de acordo com seu ID
 80011ea:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <main+0x124>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fd52 	bl	8002c98 <tft_init>
  	   //Inverte as cores do display (efeito negativo)
  	    //\invertDisplay(1);


  	   //HAL_Delay(5000);
  	   setRotation(3);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f003 f805 	bl	8004204 <setRotation>
  	  fillScreen(BLACK);               //Preenche a tela em uma só cor
 80011fa:	2000      	movs	r0, #0
 80011fc:	f003 fdd8 	bl	8004db0 <fillScreen>

  	  //Mensagem inicial
  	HAL_UART_Transmit(&huart2, (uint8_t *)"Este programa recebe os pixels de uma camera OV7670 conectada\r\n", 66, 100);
 8001200:	2364      	movs	r3, #100	; 0x64
 8001202:	2242      	movs	r2, #66	; 0x42
 8001204:	492f      	ldr	r1, [pc, #188]	; (80012c4 <main+0x128>)
 8001206:	4830      	ldr	r0, [pc, #192]	; (80012c8 <main+0x12c>)
 8001208:	f007 fbc5 	bl	8008996 <HAL_UART_Transmit>
  	HAL_UART_Transmit(&huart2, (uint8_t *)"nos GPIOs e envia para display LCD TFT \r\n", 66, 100);
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	2242      	movs	r2, #66	; 0x42
 8001210:	492e      	ldr	r1, [pc, #184]	; (80012cc <main+0x130>)
 8001212:	482d      	ldr	r0, [pc, #180]	; (80012c8 <main+0x12c>)
 8001214:	f007 fbbf 	bl	8008996 <HAL_UART_Transmit>
  	//Plota molduras no LCD
  	for(i=0; i<8; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800121c:	e030      	b.n	8001280 <main+0xe4>
  	{ //x y w h color
  		drawRect(i*20, i*15, 320-(2*(i*20)), 240-(2*(i*15)), WHITE);
 800121e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001220:	b29b      	uxth	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	b29b      	uxth	r3, r3
 800122c:	b218      	sxth	r0, r3
 800122e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001230:	b29b      	uxth	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	b219      	sxth	r1, r3
 800123c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	02d2      	lsls	r2, r2, #11
 8001244:	1ad2      	subs	r2, r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	b29b      	uxth	r3, r3
 800124e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001252:	b29b      	uxth	r3, r3
 8001254:	b21a      	sxth	r2, r3
 8001256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001258:	b29b      	uxth	r3, r3
 800125a:	461c      	mov	r4, r3
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	1ae3      	subs	r3, r4, r3
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	33f0      	adds	r3, #240	; 0xf0
 8001266:	b29b      	uxth	r3, r3
 8001268:	b21b      	sxth	r3, r3
 800126a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800126e:	9400      	str	r4, [sp, #0]
 8001270:	f003 fe9b 	bl	8004faa <drawRect>
  		HAL_Delay(100);
 8001274:	2064      	movs	r0, #100	; 0x64
 8001276:	f004 fb89 	bl	800598c <HAL_Delay>
  	for(i=0; i<8; i++)
 800127a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127c:	3301      	adds	r3, #1
 800127e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001282:	2b07      	cmp	r3, #7
 8001284:	ddcb      	ble.n	800121e <main+0x82>
  	}

  	//Liga o PWM
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	4811      	ldr	r0, [pc, #68]	; (80012d0 <main+0x134>)
 800128a:	f006 fd59 	bl	8007d40 <HAL_TIM_PWM_Start>
  	htim3.Instance->CCR1 = 4; //Define o duty_cycle em aprox. 50%
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <main+0x134>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2204      	movs	r2, #4
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
  	//Configura a câmera OV7670
  	setup(&hi2c1, &huart2);
 8001296:	490c      	ldr	r1, [pc, #48]	; (80012c8 <main+0x12c>)
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <main+0x138>)
 800129a:	f7ff fa7d 	bl	8000798 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(W==320)
		  setAddrWindow(0, 0, W, H);
 800129e:	23f0      	movs	r3, #240	; 0xf0
 80012a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012a4:	2100      	movs	r1, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	f003 fb38 	bl	800491c <setAddrWindow>
	  else
		  setAddrWindow(80, 60, W+80-1, H+60-1);
	  inicioDados();
 80012ac:	f004 f9a4 	bl	80055f8 <inicioDados>
	  loop();
 80012b0:	f7ff fa90 	bl	80007d4 <loop>
	  fimDados();
 80012b4:	f004 fa52 	bl	800575c <fimDados>
	  if(W==320)
 80012b8:	e7f1      	b.n	800129e <main+0x102>
 80012ba:	bf00      	nop
 80012bc:	2000419c 	.word	0x2000419c
 80012c0:	20000046 	.word	0x20000046
 80012c4:	08009140 	.word	0x08009140
 80012c8:	2000527c 	.word	0x2000527c
 80012cc:	08009180 	.word	0x08009180
 80012d0:	200010ec 	.word	0x200010ec
 80012d4:	20000064 	.word	0x20000064

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	; 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2234      	movs	r2, #52	; 0x34
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f007 ff12 	bl	8009110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <SystemClock_Config+0xd4>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a29      	ldr	r2, [pc, #164]	; (80013ac <SystemClock_Config+0xd4>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <SystemClock_Config+0xd4>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <SystemClock_Config+0xd8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <SystemClock_Config+0xd8>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <SystemClock_Config+0xd8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001338:	2302      	movs	r3, #2
 800133a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001340:	2310      	movs	r3, #16
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800134c:	2310      	movs	r3, #16
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001350:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001354:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001356:	2304      	movs	r3, #4
 8001358:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800135a:	2302      	movs	r3, #2
 800135c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800135e:	2302      	movs	r3, #2
 8001360:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fcfa 	bl	8006d60 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001372:	f000 f9e1 	bl	8001738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fa18 	bl	80067c8 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800139e:	f000 f9cb 	bl	8001738 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	; 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <MX_I2C1_Init+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_I2C1_Init+0x58>)
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_I2C1_Init+0x50>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_I2C1_Init+0x50>)
 80013f2:	f004 fd9d 	bl	8005f30 <HAL_I2C_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 f99c 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000064 	.word	0x20000064
 8001408:	40005400 	.word	0x40005400
 800140c:	00061a80 	.word	0x00061a80

08001410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_SPI1_Init+0x64>)
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <MX_SPI1_Init+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_SPI1_Init+0x64>)
 800141c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001422:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_SPI1_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_SPI1_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_SPI1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_SPI1_Init+0x64>)
 800143c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_SPI1_Init+0x64>)
 8001444:	2210      	movs	r2, #16
 8001446:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_SPI1_Init+0x64>)
 800145c:	220a      	movs	r2, #10
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_SPI1_Init+0x64>)
 8001462:	f005 ff1b 	bl	800729c <HAL_SPI_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800146c:	f000 f964 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20005224 	.word	0x20005224
 8001478:	40013000 	.word	0x40013000

0800147c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <MX_TIM1_Init+0x98>)
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <MX_TIM1_Init+0x9c>)
 800149c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_TIM1_Init+0x98>)
 80014a0:	2253      	movs	r2, #83	; 0x53
 80014a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_TIM1_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_TIM1_Init+0x98>)
 80014ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_TIM1_Init+0x98>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_TIM1_Init+0x98>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_TIM1_Init+0x98>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <MX_TIM1_Init+0x98>)
 80014c6:	f006 fb29 	bl	8007b1c <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014d0:	f000 f932 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_TIM1_Init+0x98>)
 80014e2:	f006 fdb7 	bl	8008054 <HAL_TIM_ConfigClockSource>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014ec:	f000 f924 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_TIM1_Init+0x98>)
 80014fe:	f007 f981 	bl	8008804 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001508:	f000 f916 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000419c 	.word	0x2000419c
 8001518:	40010000 	.word	0x40010000

0800151c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_TIM3_Init+0xe4>)
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <MX_TIM3_Init+0xe8>)
 8001550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <MX_TIM3_Init+0xe4>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_TIM3_Init+0xe4>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8-1;
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <MX_TIM3_Init+0xe4>)
 8001560:	2207      	movs	r2, #7
 8001562:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MX_TIM3_Init+0xe4>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <MX_TIM3_Init+0xe4>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001570:	4823      	ldr	r0, [pc, #140]	; (8001600 <MX_TIM3_Init+0xe4>)
 8001572:	f006 fad3 	bl	8007b1c <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800157c:	f000 f8dc 	bl	8001738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158a:	4619      	mov	r1, r3
 800158c:	481c      	ldr	r0, [pc, #112]	; (8001600 <MX_TIM3_Init+0xe4>)
 800158e:	f006 fd61 	bl	8008054 <HAL_TIM_ConfigClockSource>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001598:	f000 f8ce 	bl	8001738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_TIM3_Init+0xe4>)
 800159e:	f006 fb75 	bl	8007c8c <HAL_TIM_PWM_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80015a8:	f000 f8c6 	bl	8001738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4619      	mov	r1, r3
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <MX_TIM3_Init+0xe4>)
 80015bc:	f007 f922 	bl	8008804 <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80015c6:	f000 f8b7 	bl	8001738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ca:	2360      	movs	r3, #96	; 0x60
 80015cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM3_Init+0xe4>)
 80015e2:	f006 fc75 	bl	8007ed0 <HAL_TIM_PWM_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80015ec:	f000 f8a4 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM3_Init+0xe4>)
 80015f2:	f000 f997 	bl	8001924 <HAL_TIM_MspPostInit>

}
 80015f6:	bf00      	nop
 80015f8:	3738      	adds	r7, #56	; 0x38
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200010ec 	.word	0x200010ec
 8001604:	40000400 	.word	0x40000400

08001608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART2_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART2_UART_Init+0x4c>)
 8001640:	f007 f95c 	bl	80088fc <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f875 	bl	8001738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000527c 	.word	0x2000527c
 8001658:	40004400 	.word	0x40004400

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <MX_GPIO_Init+0xd0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a2c      	ldr	r2, [pc, #176]	; (800172c <MX_GPIO_Init+0xd0>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <MX_GPIO_Init+0xd0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <MX_GPIO_Init+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <MX_GPIO_Init+0xd0>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <MX_GPIO_Init+0xd0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <MX_GPIO_Init+0xd0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <MX_GPIO_Init+0xd0>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_GPIO_Init+0xd0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_GPIO_Init+0xd0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <MX_GPIO_Init+0xd0>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <MX_GPIO_Init+0xd0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4812      	ldr	r0, [pc, #72]	; (8001730 <MX_GPIO_Init+0xd4>)
 80016e8:	f004 fbee 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OV7670_HREF_Pin OV7670_PCLK_Pin OV7670_VSYNC_Pin OV7670_D0_Pin
                           OV7670_D1_Pin OV7670_D2_Pin OV7670_D3_Pin OV7670_D4_Pin
                           OV7670_D5_Pin OV7670_D6_Pin OV7670_D7_Pin */
  GPIO_InitStruct.Pin = OV7670_HREF_Pin|OV7670_PCLK_Pin|OV7670_VSYNC_Pin|OV7670_D0_Pin
 80016ec:	f643 733d 	movw	r3, #16189	; 0x3f3d
 80016f0:	617b      	str	r3, [r7, #20]
                          |OV7670_D1_Pin|OV7670_D2_Pin|OV7670_D3_Pin|OV7670_D4_Pin
                          |OV7670_D5_Pin|OV7670_D6_Pin|OV7670_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_GPIO_Init+0xd8>)
 8001702:	f004 fa4d 	bl	8005ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001706:	2340      	movs	r3, #64	; 0x40
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001712:	2301      	movs	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_GPIO_Init+0xd4>)
 800171e:	f004 fa3f 	bl	8005ba0 <HAL_GPIO_Init>

}
 8001722:	bf00      	nop
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800

08001738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001782:	2007      	movs	r0, #7
 8001784:	f004 f9d8 	bl	8005b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_I2C_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12c      	bne.n	8001810 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MCU_6050_SCL__OV7670_SIOC_Pin|MCU_6050_SDA__OV7670_SIOD_Pin;
 80017d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e4:	2304      	movs	r3, #4
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <HAL_I2C_MspInit+0x8c>)
 80017f0:	f004 f9d6 	bl	8005ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_I2C_MspInit+0x88>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40005400 	.word	0x40005400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_SPI_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12b      	bne.n	800189e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_SPI_MspInit+0x88>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0x88>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800187e:	23e0      	movs	r3, #224	; 0xe0
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 800189a:	f004 f981 	bl	8005ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_TIM_Base_MspInit+0x64>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10e      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_TIM_Base_MspInit+0x68>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <HAL_TIM_Base_MspInit+0x68>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_TIM_Base_MspInit+0x68>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018e2:	e012      	b.n	800190a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <HAL_TIM_Base_MspInit+0x6c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10d      	bne.n	800190a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_TIM_Base_MspInit+0x68>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_TIM_Base_MspInit+0x68>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_TIM_Base_MspInit+0x68>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40010000 	.word	0x40010000
 800191c:	40023800 	.word	0x40023800
 8001920:	40000400 	.word	0x40000400

08001924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <HAL_TIM_MspPostInit+0x68>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d11d      	bne.n	8001982 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_TIM_MspPostInit+0x6c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_TIM_MspPostInit+0x6c>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_TIM_MspPostInit+0x6c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = OV7670_XCLK_Pin;
 8001962:	2340      	movs	r3, #64	; 0x40
 8001964:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OV7670_XCLK_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <HAL_TIM_MspPostInit+0x70>)
 800197e:	f004 f90f 	bl	8005ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40000400 	.word	0x40000400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020800 	.word	0x40020800

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_UART_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_UART_MspInit+0x88>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a02:	2307      	movs	r3, #7
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <HAL_UART_MspInit+0x8c>)
 8001a0e:	f004 f8c7 	bl	8005ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40004400 	.word	0x40004400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
void SDTimer_Handler(void)
{ if(Timer1 > 0)
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <SDTimer_Handler+0x40>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <SDTimer_Handler+0x1c>
	Timer1--;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <SDTimer_Handler+0x40>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <SDTimer_Handler+0x40>)
 8001a42:	701a      	strb	r2, [r3, #0]
  if(Timer2 > 0)
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <SDTimer_Handler+0x44>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <SDTimer_Handler+0x34>
	  Timer2--; }
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <SDTimer_Handler+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SDTimer_Handler+0x44>)
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200052cb 	.word	0x200052cb
 8001a6c:	200052ca 	.word	0x200052ca

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x4>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <SysTick_Handler+0x30>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <SysTick_Handler+0x30>)
 8001ac8:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <SysTick_Handler+0x30>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b09      	cmp	r3, #9
 8001ad2:	d904      	bls.n	8001ade <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Handler+0x30>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001ada:	f7ff ffa5 	bl	8001a28 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f003 ff35 	bl	800594c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000048 	.word	0x20000048

08001aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <SystemInit+0x20>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <SystemInit+0x20>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f004 f9d0 	bl	8005ec8 <HAL_GPIO_WritePin>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f004 f9c0 	bl	8005ec8 <HAL_GPIO_WritePin>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f004 f816 	bl	8005ba0 <HAL_GPIO_Init>
}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f003 fffe 	bl	8005ba0 <HAL_GPIO_Init>
}
 8001ba4:	bf00      	nop
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <width+0x14>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <height>:

uint16_t height(void)
{ return _height; }
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <height+0x14>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000000a 	.word	0x2000000a

08001bdc <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8001be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	b29b      	uxth	r3, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	115b      	asrs	r3, r3, #5
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	f003 0320 	and.w	r3, r3, #32
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	105b      	asrs	r3, r3, #1
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	b29b      	uxth	r3, r3
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	121b      	asrs	r3, r3, #8
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f023 0307 	bic.w	r3, r3, #7
 8001c72:	b2db      	uxtb	r3, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	10db      	asrs	r3, r3, #3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f023 0303 	bic.w	r3, r3, #3
 8001c94:	b2db      	uxtb	r3, r3
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	b2db      	uxtb	r3, r3
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	71bb      	strb	r3, [r7, #6]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	717b      	strb	r3, [r7, #5]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cda:	f023 0307 	bic.w	r3, r3, #7
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	797b      	ldrb	r3, [r7, #5]
 8001cf2:	08db      	lsrs	r3, r3, #3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af02      	add	r7, sp, #8
 8001d10:	4603      	mov	r3, r0
 8001d12:	460a      	mov	r2, r1
 8001d14:	80fb      	strh	r3, [r7, #6]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80bb      	strh	r3, [r7, #4]
 8001d1a:	f107 020e 	add.w	r2, r7, #14
 8001d1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d26:	2301      	movs	r3, #1
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f001 fc7a 	bl	8003624 <readGRAM>
 8001d30:	89fb      	ldrh	r3, [r7, #14]
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	460a      	mov	r2, r1
 8001d44:	80fb      	strh	r3, [r7, #6]
 8001d46:	4613      	mov	r3, r2
 8001d48:	80bb      	strh	r3, [r7, #4]
 8001d4a:	88ba      	ldrh	r2, [r7, #4]
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f973 	bl	800203c <writecmddata>
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	6039      	str	r1, [r7, #0]
 8001d68:	80fb      	strh	r3, [r7, #6]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	717b      	strb	r3, [r7, #5]
 8001d6e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fab6 	bl	80022e8 <WriteCmdParamN>
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8001d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8c:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <setReadDir+0x50>)
 8001d8e:	f7ff fedf 	bl	8001b50 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <setReadDir+0x54>)
 8001d96:	f7ff fedb 	bl	8001b50 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <setReadDir+0x50>)
 8001da0:	f7ff fed6 	bl	8001b50 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8001da4:	2108      	movs	r1, #8
 8001da6:	480d      	ldr	r0, [pc, #52]	; (8001ddc <setReadDir+0x58>)
 8001da8:	f7ff fed2 	bl	8001b50 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8001dac:	2120      	movs	r1, #32
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <setReadDir+0x58>)
 8001db0:	f7ff fece 	bl	8001b50 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8001db4:	2110      	movs	r1, #16
 8001db6:	4809      	ldr	r0, [pc, #36]	; (8001ddc <setReadDir+0x58>)
 8001db8:	f7ff feca 	bl	8001b50 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8001dbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <setReadDir+0x58>)
 8001dc2:	f7ff fec5 	bl	8001b50 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8001dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dca:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <setReadDir+0x50>)
 8001dcc:	f7ff fec0 	bl	8001b50 <PIN_INPUT>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <setWriteDir>:

void setWriteDir (void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8001de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de8:	4811      	ldr	r0, [pc, #68]	; (8001e30 <setWriteDir+0x50>)
 8001dea:	f7ff fec7 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	4810      	ldr	r0, [pc, #64]	; (8001e34 <setWriteDir+0x54>)
 8001df2:	f7ff fec3 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8001df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <setWriteDir+0x50>)
 8001dfc:	f7ff febe 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8001e00:	2108      	movs	r1, #8
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <setWriteDir+0x58>)
 8001e04:	f7ff feba 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8001e08:	2120      	movs	r1, #32
 8001e0a:	480b      	ldr	r0, [pc, #44]	; (8001e38 <setWriteDir+0x58>)
 8001e0c:	f7ff feb6 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8001e10:	2110      	movs	r1, #16
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <setWriteDir+0x58>)
 8001e14:	f7ff feb2 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8001e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e1c:	4806      	ldr	r0, [pc, #24]	; (8001e38 <setWriteDir+0x58>)
 8001e1e:	f7ff fead 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8001e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e26:	4802      	ldr	r0, [pc, #8]	; (8001e30 <setWriteDir+0x50>)
 8001e28:	f7ff fea8 	bl	8001b7c <PIN_OUTPUT>
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020400 	.word	0x40020400

08001e3c <write24>:
    CS_IDLE;
}


static void write24(uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff08 	bl	8001c5e <color565_to_r>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff13 	bl	8001c80 <color565_to_g>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff1e 	bl	8001ca2 <color565_to_b>
 8001e66:	4603      	mov	r3, r0
 8001e68:	737b      	strb	r3, [r7, #13]
    write8(r);
 8001e6a:	4b71      	ldr	r3, [pc, #452]	; (8002030 <write24+0x1f4>)
 8001e6c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001e70:	619a      	str	r2, [r3, #24]
 8001e72:	4b70      	ldr	r3, [pc, #448]	; (8002034 <write24+0x1f8>)
 8001e74:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <write24+0x1fc>)
 8001e7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e80:	619a      	str	r2, [r3, #24]
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	431a      	orrs	r2, r3
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	025b      	lsls	r3, r3, #9
 8001e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	4b64      	ldr	r3, [pc, #400]	; (8002030 <write24+0x1f4>)
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	105b      	asrs	r3, r3, #1
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <write24+0x1f8>)
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	4a5a      	ldr	r2, [pc, #360]	; (8002038 <write24+0x1fc>)
 8001ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed4:	6193      	str	r3, [r2, #24]
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4855      	ldr	r0, [pc, #340]	; (8002030 <write24+0x1f4>)
 8001eda:	f7ff fe19 	bl	8001b10 <PIN_LOW>
 8001ede:	2102      	movs	r1, #2
 8001ee0:	4853      	ldr	r0, [pc, #332]	; (8002030 <write24+0x1f4>)
 8001ee2:	f7ff fe15 	bl	8001b10 <PIN_LOW>
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4851      	ldr	r0, [pc, #324]	; (8002030 <write24+0x1f4>)
 8001eea:	f7ff fe11 	bl	8001b10 <PIN_LOW>
 8001eee:	2102      	movs	r1, #2
 8001ef0:	484f      	ldr	r0, [pc, #316]	; (8002030 <write24+0x1f4>)
 8001ef2:	f7ff fe1d 	bl	8001b30 <PIN_HIGH>
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	484d      	ldr	r0, [pc, #308]	; (8002030 <write24+0x1f4>)
 8001efa:	f7ff fe19 	bl	8001b30 <PIN_HIGH>
    write8(g);
 8001efe:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <write24+0x1f4>)
 8001f00:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001f04:	619a      	str	r2, [r3, #24]
 8001f06:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <write24+0x1f8>)
 8001f08:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001f0c:	619a      	str	r2, [r3, #24]
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <write24+0x1fc>)
 8001f10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f14:	619a      	str	r2, [r3, #24]
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	431a      	orrs	r2, r3
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f30:	431a      	orrs	r2, r3
 8001f32:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <write24+0x1f4>)
 8001f34:	619a      	str	r2, [r3, #24]
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	105b      	asrs	r3, r3, #1
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	431a      	orrs	r2, r3
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	431a      	orrs	r2, r3
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <write24+0x1f8>)
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	4a35      	ldr	r2, [pc, #212]	; (8002038 <write24+0x1fc>)
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	6193      	str	r3, [r2, #24]
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	4830      	ldr	r0, [pc, #192]	; (8002030 <write24+0x1f4>)
 8001f6e:	f7ff fdcf 	bl	8001b10 <PIN_LOW>
 8001f72:	2102      	movs	r1, #2
 8001f74:	482e      	ldr	r0, [pc, #184]	; (8002030 <write24+0x1f4>)
 8001f76:	f7ff fdcb 	bl	8001b10 <PIN_LOW>
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	482c      	ldr	r0, [pc, #176]	; (8002030 <write24+0x1f4>)
 8001f7e:	f7ff fdc7 	bl	8001b10 <PIN_LOW>
 8001f82:	2102      	movs	r1, #2
 8001f84:	482a      	ldr	r0, [pc, #168]	; (8002030 <write24+0x1f4>)
 8001f86:	f7ff fdd3 	bl	8001b30 <PIN_HIGH>
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4828      	ldr	r0, [pc, #160]	; (8002030 <write24+0x1f4>)
 8001f8e:	f7ff fdcf 	bl	8001b30 <PIN_HIGH>
    write8(b);
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <write24+0x1f4>)
 8001f94:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001f98:	619a      	str	r2, [r3, #24]
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <write24+0x1f8>)
 8001f9c:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001fa0:	619a      	str	r2, [r3, #24]
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <write24+0x1fc>)
 8001fa4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	7b7b      	ldrb	r3, [r7, #13]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001fb2:	7b7b      	ldrb	r3, [r7, #13]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	7b7b      	ldrb	r3, [r7, #13]
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <write24+0x1f4>)
 8001fc8:	619a      	str	r2, [r3, #24]
 8001fca:	7b7b      	ldrb	r3, [r7, #13]
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001fd2:	7b7b      	ldrb	r3, [r7, #13]
 8001fd4:	105b      	asrs	r3, r3, #1
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	7b7b      	ldrb	r3, [r7, #13]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	7b7b      	ldrb	r3, [r7, #13]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	431a      	orrs	r2, r3
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <write24+0x1f8>)
 8001ff0:	619a      	str	r2, [r3, #24]
 8001ff2:	7b7b      	ldrb	r3, [r7, #13]
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	4a10      	ldr	r2, [pc, #64]	; (8002038 <write24+0x1fc>)
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	2102      	movs	r1, #2
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <write24+0x1f4>)
 8002002:	f7ff fd85 	bl	8001b10 <PIN_LOW>
 8002006:	2102      	movs	r1, #2
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <write24+0x1f4>)
 800200a:	f7ff fd81 	bl	8001b10 <PIN_LOW>
 800200e:	2102      	movs	r1, #2
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <write24+0x1f4>)
 8002012:	f7ff fd7d 	bl	8001b10 <PIN_LOW>
 8002016:	2102      	movs	r1, #2
 8002018:	4805      	ldr	r0, [pc, #20]	; (8002030 <write24+0x1f4>)
 800201a:	f7ff fd89 	bl	8001b30 <PIN_HIGH>
 800201e:	2102      	movs	r1, #2
 8002020:	4803      	ldr	r0, [pc, #12]	; (8002030 <write24+0x1f4>)
 8002022:	f7ff fd85 	bl	8001b30 <PIN_HIGH>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800

0800203c <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	80fb      	strh	r3, [r7, #6]
 8002048:	4613      	mov	r3, r2
 800204a:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 800204c:	2101      	movs	r1, #1
 800204e:	48a3      	ldr	r0, [pc, #652]	; (80022dc <writecmddata+0x2a0>)
 8002050:	f7ff fd5e 	bl	8001b10 <PIN_LOW>
    WriteCmd(cmd);
 8002054:	2110      	movs	r1, #16
 8002056:	48a2      	ldr	r0, [pc, #648]	; (80022e0 <writecmddata+0x2a4>)
 8002058:	f7ff fd5a 	bl	8001b10 <PIN_LOW>
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	b29b      	uxth	r3, r3
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	73bb      	strb	r3, [r7, #14]
 8002068:	4b9d      	ldr	r3, [pc, #628]	; (80022e0 <writecmddata+0x2a4>)
 800206a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800206e:	619a      	str	r2, [r3, #24]
 8002070:	4b9a      	ldr	r3, [pc, #616]	; (80022dc <writecmddata+0x2a0>)
 8002072:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002076:	619a      	str	r2, [r3, #24]
 8002078:	4b9a      	ldr	r3, [pc, #616]	; (80022e4 <writecmddata+0x2a8>)
 800207a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800207e:	619a      	str	r2, [r3, #24]
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	431a      	orrs	r2, r3
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	025b      	lsls	r3, r3, #9
 8002096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800209a:	431a      	orrs	r2, r3
 800209c:	4b90      	ldr	r3, [pc, #576]	; (80022e0 <writecmddata+0x2a4>)
 800209e:	619a      	str	r2, [r3, #24]
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	105b      	asrs	r3, r3, #1
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	431a      	orrs	r2, r3
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	431a      	orrs	r2, r3
 80020c4:	4b85      	ldr	r3, [pc, #532]	; (80022dc <writecmddata+0x2a0>)
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	4a85      	ldr	r2, [pc, #532]	; (80022e4 <writecmddata+0x2a8>)
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	2102      	movs	r1, #2
 80020d6:	4882      	ldr	r0, [pc, #520]	; (80022e0 <writecmddata+0x2a4>)
 80020d8:	f7ff fd1a 	bl	8001b10 <PIN_LOW>
 80020dc:	2102      	movs	r1, #2
 80020de:	4880      	ldr	r0, [pc, #512]	; (80022e0 <writecmddata+0x2a4>)
 80020e0:	f7ff fd16 	bl	8001b10 <PIN_LOW>
 80020e4:	2102      	movs	r1, #2
 80020e6:	487e      	ldr	r0, [pc, #504]	; (80022e0 <writecmddata+0x2a4>)
 80020e8:	f7ff fd12 	bl	8001b10 <PIN_LOW>
 80020ec:	2102      	movs	r1, #2
 80020ee:	487c      	ldr	r0, [pc, #496]	; (80022e0 <writecmddata+0x2a4>)
 80020f0:	f7ff fd1e 	bl	8001b30 <PIN_HIGH>
 80020f4:	2102      	movs	r1, #2
 80020f6:	487a      	ldr	r0, [pc, #488]	; (80022e0 <writecmddata+0x2a4>)
 80020f8:	f7ff fd1a 	bl	8001b30 <PIN_HIGH>
 80020fc:	4b78      	ldr	r3, [pc, #480]	; (80022e0 <writecmddata+0x2a4>)
 80020fe:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002102:	619a      	str	r2, [r3, #24]
 8002104:	4b75      	ldr	r3, [pc, #468]	; (80022dc <writecmddata+0x2a0>)
 8002106:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	4b75      	ldr	r3, [pc, #468]	; (80022e4 <writecmddata+0x2a8>)
 800210e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002112:	619a      	str	r2, [r3, #24]
 8002114:	7bbb      	ldrb	r3, [r7, #14]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800211c:	7bbb      	ldrb	r3, [r7, #14]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	431a      	orrs	r2, r3
 8002126:	7bbb      	ldrb	r3, [r7, #14]
 8002128:	025b      	lsls	r3, r3, #9
 800212a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212e:	431a      	orrs	r2, r3
 8002130:	4b6b      	ldr	r3, [pc, #428]	; (80022e0 <writecmddata+0x2a4>)
 8002132:	619a      	str	r2, [r3, #24]
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	105b      	asrs	r3, r3, #1
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	431a      	orrs	r2, r3
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	431a      	orrs	r2, r3
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	431a      	orrs	r2, r3
 8002158:	4b60      	ldr	r3, [pc, #384]	; (80022dc <writecmddata+0x2a0>)
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	019b      	lsls	r3, r3, #6
 8002160:	4a60      	ldr	r2, [pc, #384]	; (80022e4 <writecmddata+0x2a8>)
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	2102      	movs	r1, #2
 800216a:	485d      	ldr	r0, [pc, #372]	; (80022e0 <writecmddata+0x2a4>)
 800216c:	f7ff fcd0 	bl	8001b10 <PIN_LOW>
 8002170:	2102      	movs	r1, #2
 8002172:	485b      	ldr	r0, [pc, #364]	; (80022e0 <writecmddata+0x2a4>)
 8002174:	f7ff fccc 	bl	8001b10 <PIN_LOW>
 8002178:	2102      	movs	r1, #2
 800217a:	4859      	ldr	r0, [pc, #356]	; (80022e0 <writecmddata+0x2a4>)
 800217c:	f7ff fcc8 	bl	8001b10 <PIN_LOW>
 8002180:	2102      	movs	r1, #2
 8002182:	4857      	ldr	r0, [pc, #348]	; (80022e0 <writecmddata+0x2a4>)
 8002184:	f7ff fcd4 	bl	8001b30 <PIN_HIGH>
 8002188:	2102      	movs	r1, #2
 800218a:	4855      	ldr	r0, [pc, #340]	; (80022e0 <writecmddata+0x2a4>)
 800218c:	f7ff fcd0 	bl	8001b30 <PIN_HIGH>
 8002190:	2110      	movs	r1, #16
 8002192:	4853      	ldr	r0, [pc, #332]	; (80022e0 <writecmddata+0x2a4>)
 8002194:	f7ff fccc 	bl	8001b30 <PIN_HIGH>
    WriteData(dat);
 8002198:	88bb      	ldrh	r3, [r7, #4]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	737b      	strb	r3, [r7, #13]
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	733b      	strb	r3, [r7, #12]
 80021a4:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <writecmddata+0x2a4>)
 80021a6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80021aa:	619a      	str	r2, [r3, #24]
 80021ac:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <writecmddata+0x2a0>)
 80021ae:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80021b2:	619a      	str	r2, [r3, #24]
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <writecmddata+0x2a8>)
 80021b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80021c4:	7b7b      	ldrb	r3, [r7, #13]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	431a      	orrs	r2, r3
 80021ce:	7b7b      	ldrb	r3, [r7, #13]
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d6:	431a      	orrs	r2, r3
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <writecmddata+0x2a4>)
 80021da:	619a      	str	r2, [r3, #24]
 80021dc:	7b7b      	ldrb	r3, [r7, #13]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	105b      	asrs	r3, r3, #1
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	431a      	orrs	r2, r3
 80021ee:	7b7b      	ldrb	r3, [r7, #13]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	431a      	orrs	r2, r3
 80021f8:	7b7b      	ldrb	r3, [r7, #13]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	431a      	orrs	r2, r3
 8002200:	4b36      	ldr	r3, [pc, #216]	; (80022dc <writecmddata+0x2a0>)
 8002202:	619a      	str	r2, [r3, #24]
 8002204:	7b7b      	ldrb	r3, [r7, #13]
 8002206:	019b      	lsls	r3, r3, #6
 8002208:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <writecmddata+0x2a8>)
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	2102      	movs	r1, #2
 8002212:	4833      	ldr	r0, [pc, #204]	; (80022e0 <writecmddata+0x2a4>)
 8002214:	f7ff fc7c 	bl	8001b10 <PIN_LOW>
 8002218:	2102      	movs	r1, #2
 800221a:	4831      	ldr	r0, [pc, #196]	; (80022e0 <writecmddata+0x2a4>)
 800221c:	f7ff fc78 	bl	8001b10 <PIN_LOW>
 8002220:	2102      	movs	r1, #2
 8002222:	482f      	ldr	r0, [pc, #188]	; (80022e0 <writecmddata+0x2a4>)
 8002224:	f7ff fc74 	bl	8001b10 <PIN_LOW>
 8002228:	2102      	movs	r1, #2
 800222a:	482d      	ldr	r0, [pc, #180]	; (80022e0 <writecmddata+0x2a4>)
 800222c:	f7ff fc80 	bl	8001b30 <PIN_HIGH>
 8002230:	2102      	movs	r1, #2
 8002232:	482b      	ldr	r0, [pc, #172]	; (80022e0 <writecmddata+0x2a4>)
 8002234:	f7ff fc7c 	bl	8001b30 <PIN_HIGH>
 8002238:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <writecmddata+0x2a4>)
 800223a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800223e:	619a      	str	r2, [r3, #24]
 8002240:	4b26      	ldr	r3, [pc, #152]	; (80022dc <writecmddata+0x2a0>)
 8002242:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002246:	619a      	str	r2, [r3, #24]
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <writecmddata+0x2a8>)
 800224a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800224e:	619a      	str	r2, [r3, #24]
 8002250:	7b3b      	ldrb	r3, [r7, #12]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002258:	7b3b      	ldrb	r3, [r7, #12]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	431a      	orrs	r2, r3
 8002262:	7b3b      	ldrb	r3, [r7, #12]
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226a:	431a      	orrs	r2, r3
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <writecmddata+0x2a4>)
 800226e:	619a      	str	r2, [r3, #24]
 8002270:	7b3b      	ldrb	r3, [r7, #12]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002278:	7b3b      	ldrb	r3, [r7, #12]
 800227a:	105b      	asrs	r3, r3, #1
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	7b3b      	ldrb	r3, [r7, #12]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	431a      	orrs	r2, r3
 800228c:	7b3b      	ldrb	r3, [r7, #12]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	431a      	orrs	r2, r3
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <writecmddata+0x2a0>)
 8002296:	619a      	str	r2, [r3, #24]
 8002298:	7b3b      	ldrb	r3, [r7, #12]
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <writecmddata+0x2a8>)
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	2102      	movs	r1, #2
 80022a6:	480e      	ldr	r0, [pc, #56]	; (80022e0 <writecmddata+0x2a4>)
 80022a8:	f7ff fc32 	bl	8001b10 <PIN_LOW>
 80022ac:	2102      	movs	r1, #2
 80022ae:	480c      	ldr	r0, [pc, #48]	; (80022e0 <writecmddata+0x2a4>)
 80022b0:	f7ff fc2e 	bl	8001b10 <PIN_LOW>
 80022b4:	2102      	movs	r1, #2
 80022b6:	480a      	ldr	r0, [pc, #40]	; (80022e0 <writecmddata+0x2a4>)
 80022b8:	f7ff fc2a 	bl	8001b10 <PIN_LOW>
 80022bc:	2102      	movs	r1, #2
 80022be:	4808      	ldr	r0, [pc, #32]	; (80022e0 <writecmddata+0x2a4>)
 80022c0:	f7ff fc36 	bl	8001b30 <PIN_HIGH>
 80022c4:	2102      	movs	r1, #2
 80022c6:	4806      	ldr	r0, [pc, #24]	; (80022e0 <writecmddata+0x2a4>)
 80022c8:	f7ff fc32 	bl	8001b30 <PIN_HIGH>
    CS_IDLE;
 80022cc:	2101      	movs	r1, #1
 80022ce:	4803      	ldr	r0, [pc, #12]	; (80022dc <writecmddata+0x2a0>)
 80022d0:	f7ff fc2e 	bl	8001b30 <PIN_HIGH>
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40020800 	.word	0x40020800

080022e8 <WriteCmdParamN>:


static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	603a      	str	r2, [r7, #0]
 80022f2:	80fb      	strh	r3, [r7, #6]
 80022f4:	460b      	mov	r3, r1
 80022f6:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 80022f8:	2101      	movs	r1, #1
 80022fa:	4853      	ldr	r0, [pc, #332]	; (8002448 <WriteCmdParamN+0x160>)
 80022fc:	f7ff fc08 	bl	8001b10 <PIN_LOW>
    WriteCmd(cmd);
 8002300:	2110      	movs	r1, #16
 8002302:	4852      	ldr	r0, [pc, #328]	; (800244c <WriteCmdParamN+0x164>)
 8002304:	f7ff fc04 	bl	8001b10 <PIN_LOW>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b29b      	uxth	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	73bb      	strb	r3, [r7, #14]
 8002314:	4b4d      	ldr	r3, [pc, #308]	; (800244c <WriteCmdParamN+0x164>)
 8002316:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800231a:	619a      	str	r2, [r3, #24]
 800231c:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <WriteCmdParamN+0x160>)
 800231e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002322:	619a      	str	r2, [r3, #24]
 8002324:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <WriteCmdParamN+0x168>)
 8002326:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800232a:	619a      	str	r2, [r3, #24]
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233c:	431a      	orrs	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	025b      	lsls	r3, r3, #9
 8002342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002346:	431a      	orrs	r2, r3
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <WriteCmdParamN+0x164>)
 800234a:	619a      	str	r2, [r3, #24]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	105b      	asrs	r3, r3, #1
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	431a      	orrs	r2, r3
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	431a      	orrs	r2, r3
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	431a      	orrs	r2, r3
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <WriteCmdParamN+0x160>)
 8002372:	619a      	str	r2, [r3, #24]
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	019b      	lsls	r3, r3, #6
 8002378:	4a35      	ldr	r2, [pc, #212]	; (8002450 <WriteCmdParamN+0x168>)
 800237a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	2102      	movs	r1, #2
 8002382:	4832      	ldr	r0, [pc, #200]	; (800244c <WriteCmdParamN+0x164>)
 8002384:	f7ff fbc4 	bl	8001b10 <PIN_LOW>
 8002388:	2102      	movs	r1, #2
 800238a:	4830      	ldr	r0, [pc, #192]	; (800244c <WriteCmdParamN+0x164>)
 800238c:	f7ff fbc0 	bl	8001b10 <PIN_LOW>
 8002390:	2102      	movs	r1, #2
 8002392:	482e      	ldr	r0, [pc, #184]	; (800244c <WriteCmdParamN+0x164>)
 8002394:	f7ff fbbc 	bl	8001b10 <PIN_LOW>
 8002398:	2102      	movs	r1, #2
 800239a:	482c      	ldr	r0, [pc, #176]	; (800244c <WriteCmdParamN+0x164>)
 800239c:	f7ff fbc8 	bl	8001b30 <PIN_HIGH>
 80023a0:	2102      	movs	r1, #2
 80023a2:	482a      	ldr	r0, [pc, #168]	; (800244c <WriteCmdParamN+0x164>)
 80023a4:	f7ff fbc4 	bl	8001b30 <PIN_HIGH>
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <WriteCmdParamN+0x164>)
 80023aa:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <WriteCmdParamN+0x160>)
 80023b2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80023b6:	619a      	str	r2, [r3, #24]
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <WriteCmdParamN+0x168>)
 80023ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	431a      	orrs	r2, r3
 80023d2:	7bbb      	ldrb	r3, [r7, #14]
 80023d4:	025b      	lsls	r3, r3, #9
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	431a      	orrs	r2, r3
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <WriteCmdParamN+0x164>)
 80023de:	619a      	str	r2, [r3, #24]
 80023e0:	7bbb      	ldrb	r3, [r7, #14]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80023e8:	7bbb      	ldrb	r3, [r7, #14]
 80023ea:	105b      	asrs	r3, r3, #1
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	431a      	orrs	r2, r3
 80023f2:	7bbb      	ldrb	r3, [r7, #14]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	431a      	orrs	r2, r3
 80023fc:	7bbb      	ldrb	r3, [r7, #14]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	431a      	orrs	r2, r3
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <WriteCmdParamN+0x160>)
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	019b      	lsls	r3, r3, #6
 800240c:	4a10      	ldr	r2, [pc, #64]	; (8002450 <WriteCmdParamN+0x168>)
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	2102      	movs	r1, #2
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <WriteCmdParamN+0x164>)
 8002418:	f7ff fb7a 	bl	8001b10 <PIN_LOW>
 800241c:	2102      	movs	r1, #2
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <WriteCmdParamN+0x164>)
 8002420:	f7ff fb76 	bl	8001b10 <PIN_LOW>
 8002424:	2102      	movs	r1, #2
 8002426:	4809      	ldr	r0, [pc, #36]	; (800244c <WriteCmdParamN+0x164>)
 8002428:	f7ff fb72 	bl	8001b10 <PIN_LOW>
 800242c:	2102      	movs	r1, #2
 800242e:	4807      	ldr	r0, [pc, #28]	; (800244c <WriteCmdParamN+0x164>)
 8002430:	f7ff fb7e 	bl	8001b30 <PIN_HIGH>
 8002434:	2102      	movs	r1, #2
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <WriteCmdParamN+0x164>)
 8002438:	f7ff fb7a 	bl	8001b30 <PIN_HIGH>
 800243c:	2110      	movs	r1, #16
 800243e:	4803      	ldr	r0, [pc, #12]	; (800244c <WriteCmdParamN+0x164>)
 8002440:	f7ff fb76 	bl	8001b30 <PIN_HIGH>
    while (N-- > 0) {
 8002444:	e104      	b.n	8002650 <WriteCmdParamN+0x368>
 8002446:	bf00      	nop
 8002448:	40020400 	.word	0x40020400
 800244c:	40020000 	.word	0x40020000
 8002450:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	603a      	str	r2, [r7, #0]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	737b      	strb	r3, [r7, #13]
        write8(u8);
 800245e:	4b85      	ldr	r3, [pc, #532]	; (8002674 <WriteCmdParamN+0x38c>)
 8002460:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002464:	619a      	str	r2, [r3, #24]
 8002466:	4b84      	ldr	r3, [pc, #528]	; (8002678 <WriteCmdParamN+0x390>)
 8002468:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800246c:	619a      	str	r2, [r3, #24]
 800246e:	4b83      	ldr	r3, [pc, #524]	; (800267c <WriteCmdParamN+0x394>)
 8002470:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002474:	619a      	str	r2, [r3, #24]
 8002476:	7b7b      	ldrb	r3, [r7, #13]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800247e:	7b7b      	ldrb	r3, [r7, #13]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	431a      	orrs	r2, r3
 8002488:	7b7b      	ldrb	r3, [r7, #13]
 800248a:	025b      	lsls	r3, r3, #9
 800248c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002490:	431a      	orrs	r2, r3
 8002492:	4b78      	ldr	r3, [pc, #480]	; (8002674 <WriteCmdParamN+0x38c>)
 8002494:	619a      	str	r2, [r3, #24]
 8002496:	7b7b      	ldrb	r3, [r7, #13]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800249e:	7b7b      	ldrb	r3, [r7, #13]
 80024a0:	105b      	asrs	r3, r3, #1
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	7b7b      	ldrb	r3, [r7, #13]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	431a      	orrs	r2, r3
 80024b2:	7b7b      	ldrb	r3, [r7, #13]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	431a      	orrs	r2, r3
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <WriteCmdParamN+0x390>)
 80024bc:	619a      	str	r2, [r3, #24]
 80024be:	7b7b      	ldrb	r3, [r7, #13]
 80024c0:	019b      	lsls	r3, r3, #6
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <WriteCmdParamN+0x394>)
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	6193      	str	r3, [r2, #24]
 80024ca:	2102      	movs	r1, #2
 80024cc:	4869      	ldr	r0, [pc, #420]	; (8002674 <WriteCmdParamN+0x38c>)
 80024ce:	f7ff fb1f 	bl	8001b10 <PIN_LOW>
 80024d2:	2102      	movs	r1, #2
 80024d4:	4867      	ldr	r0, [pc, #412]	; (8002674 <WriteCmdParamN+0x38c>)
 80024d6:	f7ff fb1b 	bl	8001b10 <PIN_LOW>
 80024da:	2102      	movs	r1, #2
 80024dc:	4865      	ldr	r0, [pc, #404]	; (8002674 <WriteCmdParamN+0x38c>)
 80024de:	f7ff fb17 	bl	8001b10 <PIN_LOW>
 80024e2:	2102      	movs	r1, #2
 80024e4:	4863      	ldr	r0, [pc, #396]	; (8002674 <WriteCmdParamN+0x38c>)
 80024e6:	f7ff fb23 	bl	8001b30 <PIN_HIGH>
 80024ea:	2102      	movs	r1, #2
 80024ec:	4861      	ldr	r0, [pc, #388]	; (8002674 <WriteCmdParamN+0x38c>)
 80024ee:	f7ff fb1f 	bl	8001b30 <PIN_HIGH>
        if (N && is8347) {
 80024f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80aa 	beq.w	8002650 <WriteCmdParamN+0x368>
 80024fc:	4b60      	ldr	r3, [pc, #384]	; (8002680 <WriteCmdParamN+0x398>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a5 	beq.w	8002650 <WriteCmdParamN+0x368>
            cmd++;
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	3301      	adds	r3, #1
 800250a:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 800250c:	2110      	movs	r1, #16
 800250e:	4859      	ldr	r0, [pc, #356]	; (8002674 <WriteCmdParamN+0x38c>)
 8002510:	f7ff fafe 	bl	8001b10 <PIN_LOW>
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b29b      	uxth	r3, r3
 800251a:	733b      	strb	r3, [r7, #12]
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	72fb      	strb	r3, [r7, #11]
 8002520:	4b54      	ldr	r3, [pc, #336]	; (8002674 <WriteCmdParamN+0x38c>)
 8002522:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002526:	619a      	str	r2, [r3, #24]
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <WriteCmdParamN+0x390>)
 800252a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800252e:	619a      	str	r2, [r3, #24]
 8002530:	4b52      	ldr	r3, [pc, #328]	; (800267c <WriteCmdParamN+0x394>)
 8002532:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002536:	619a      	str	r2, [r3, #24]
 8002538:	7b3b      	ldrb	r3, [r7, #12]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002540:	7b3b      	ldrb	r3, [r7, #12]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	431a      	orrs	r2, r3
 800254a:	7b3b      	ldrb	r3, [r7, #12]
 800254c:	025b      	lsls	r3, r3, #9
 800254e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002552:	431a      	orrs	r2, r3
 8002554:	4b47      	ldr	r3, [pc, #284]	; (8002674 <WriteCmdParamN+0x38c>)
 8002556:	619a      	str	r2, [r3, #24]
 8002558:	7b3b      	ldrb	r3, [r7, #12]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002560:	7b3b      	ldrb	r3, [r7, #12]
 8002562:	105b      	asrs	r3, r3, #1
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	431a      	orrs	r2, r3
 800256a:	7b3b      	ldrb	r3, [r7, #12]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	431a      	orrs	r2, r3
 8002574:	7b3b      	ldrb	r3, [r7, #12]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	431a      	orrs	r2, r3
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <WriteCmdParamN+0x390>)
 800257e:	619a      	str	r2, [r3, #24]
 8002580:	7b3b      	ldrb	r3, [r7, #12]
 8002582:	019b      	lsls	r3, r3, #6
 8002584:	4a3d      	ldr	r2, [pc, #244]	; (800267c <WriteCmdParamN+0x394>)
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	2102      	movs	r1, #2
 800258e:	4839      	ldr	r0, [pc, #228]	; (8002674 <WriteCmdParamN+0x38c>)
 8002590:	f7ff fabe 	bl	8001b10 <PIN_LOW>
 8002594:	2102      	movs	r1, #2
 8002596:	4837      	ldr	r0, [pc, #220]	; (8002674 <WriteCmdParamN+0x38c>)
 8002598:	f7ff faba 	bl	8001b10 <PIN_LOW>
 800259c:	2102      	movs	r1, #2
 800259e:	4835      	ldr	r0, [pc, #212]	; (8002674 <WriteCmdParamN+0x38c>)
 80025a0:	f7ff fab6 	bl	8001b10 <PIN_LOW>
 80025a4:	2102      	movs	r1, #2
 80025a6:	4833      	ldr	r0, [pc, #204]	; (8002674 <WriteCmdParamN+0x38c>)
 80025a8:	f7ff fac2 	bl	8001b30 <PIN_HIGH>
 80025ac:	2102      	movs	r1, #2
 80025ae:	4831      	ldr	r0, [pc, #196]	; (8002674 <WriteCmdParamN+0x38c>)
 80025b0:	f7ff fabe 	bl	8001b30 <PIN_HIGH>
 80025b4:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <WriteCmdParamN+0x38c>)
 80025b6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80025ba:	619a      	str	r2, [r3, #24]
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <WriteCmdParamN+0x390>)
 80025be:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <WriteCmdParamN+0x394>)
 80025c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025ca:	619a      	str	r2, [r3, #24]
 80025cc:	7afb      	ldrb	r3, [r7, #11]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	431a      	orrs	r2, r3
 80025de:	7afb      	ldrb	r3, [r7, #11]
 80025e0:	025b      	lsls	r3, r3, #9
 80025e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e6:	431a      	orrs	r2, r3
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <WriteCmdParamN+0x38c>)
 80025ea:	619a      	str	r2, [r3, #24]
 80025ec:	7afb      	ldrb	r3, [r7, #11]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80025f4:	7afb      	ldrb	r3, [r7, #11]
 80025f6:	105b      	asrs	r3, r3, #1
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	431a      	orrs	r2, r3
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	431a      	orrs	r2, r3
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <WriteCmdParamN+0x390>)
 8002612:	619a      	str	r2, [r3, #24]
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	019b      	lsls	r3, r3, #6
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <WriteCmdParamN+0x394>)
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	2102      	movs	r1, #2
 8002622:	4814      	ldr	r0, [pc, #80]	; (8002674 <WriteCmdParamN+0x38c>)
 8002624:	f7ff fa74 	bl	8001b10 <PIN_LOW>
 8002628:	2102      	movs	r1, #2
 800262a:	4812      	ldr	r0, [pc, #72]	; (8002674 <WriteCmdParamN+0x38c>)
 800262c:	f7ff fa70 	bl	8001b10 <PIN_LOW>
 8002630:	2102      	movs	r1, #2
 8002632:	4810      	ldr	r0, [pc, #64]	; (8002674 <WriteCmdParamN+0x38c>)
 8002634:	f7ff fa6c 	bl	8001b10 <PIN_LOW>
 8002638:	2102      	movs	r1, #2
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <WriteCmdParamN+0x38c>)
 800263c:	f7ff fa78 	bl	8001b30 <PIN_HIGH>
 8002640:	2102      	movs	r1, #2
 8002642:	480c      	ldr	r0, [pc, #48]	; (8002674 <WriteCmdParamN+0x38c>)
 8002644:	f7ff fa74 	bl	8001b30 <PIN_HIGH>
 8002648:	2110      	movs	r1, #16
 800264a:	480a      	ldr	r0, [pc, #40]	; (8002674 <WriteCmdParamN+0x38c>)
 800264c:	f7ff fa70 	bl	8001b30 <PIN_HIGH>
    while (N-- > 0) {
 8002650:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	3a01      	subs	r2, #1
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	717a      	strb	r2, [r7, #5]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f73f aef9 	bgt.w	8002454 <WriteCmdParamN+0x16c>
        }
    }
    CS_IDLE;
 8002662:	2101      	movs	r1, #1
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <WriteCmdParamN+0x390>)
 8002666:	f7ff fa63 	bl	8001b30 <PIN_HIGH>
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40020000 	.word	0x40020000
 8002678:	40020400 	.word	0x40020400
 800267c:	40020800 	.word	0x40020800
 8002680:	2000004a 	.word	0x2000004a

08002684 <WriteCmdParam4>:


static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	4604      	mov	r4, r0
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4623      	mov	r3, r4
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	4603      	mov	r3, r0
 8002698:	71bb      	strb	r3, [r7, #6]
 800269a:	460b      	mov	r3, r1
 800269c:	717b      	strb	r3, [r7, #5]
 800269e:	4613      	mov	r3, r2
 80026a0:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	733b      	strb	r3, [r7, #12]
 80026a6:	797b      	ldrb	r3, [r7, #5]
 80026a8:	737b      	strb	r3, [r7, #13]
 80026aa:	793b      	ldrb	r3, [r7, #4]
 80026ac:	73bb      	strb	r3, [r7, #14]
 80026ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026b2:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f107 020c 	add.w	r2, r7, #12
 80026bc:	2104      	movs	r1, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe12 	bl	80022e8 <WriteCmdParamN>
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}

080026cc <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 80026dc:	e046      	b.n	800276c <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	627a      	str	r2, [r7, #36]	; 0x24
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	627a      	str	r2, [r7, #36]	; 0x24
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 80026f6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80026fa:	2b7f      	cmp	r3, #127	; 0x7f
 80026fc:	d108      	bne.n	8002710 <init_table+0x44>
        {
            delay(len);
 80026fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002702:	4618      	mov	r0, r3
 8002704:	f002 feb6 	bl	8005474 <delay>
            len = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800270e:	e024      	b.n	800275a <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002716:	e010      	b.n	800273a <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	627a      	str	r2, [r7, #36]	; 0x24
 800271e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002722:	7819      	ldrb	r1, [r3, #0]
 8002724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002728:	4413      	add	r3, r2
 800272a:	460a      	mov	r2, r1
 800272c:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8002730:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002734:	3301      	adds	r3, #1
 8002736:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800273a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800273e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002742:	429a      	cmp	r2, r3
 8002744:	d3e8      	bcc.n	8002718 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8002746:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800274a:	b29b      	uxth	r3, r3
 800274c:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 8002750:	f107 0208 	add.w	r2, r7, #8
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fdc7 	bl	80022e8 <WriteCmdParamN>
        }
        size -= len + 2;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002760:	b29b      	uxth	r3, r3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b02      	subs	r3, #2
 8002768:	b29b      	uxth	r3, r3
 800276a:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 800276c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002770:	2b00      	cmp	r3, #0
 8002772:	dcb4      	bgt.n	80026de <init_table+0x12>
    }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 800278e:	e01d      	b.n	80027cc <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1c9a      	adds	r2, r3, #2
 8002794:	60fa      	str	r2, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1c9a      	adds	r2, r3, #2
 800279e:	60fa      	str	r2, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 80027a4:	897b      	ldrh	r3, [r7, #10]
 80027a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d104      	bne.n	80027b8 <init_table16+0x3a>
            delay(d);
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fe5f 	bl	8005474 <delay>
 80027b6:	e005      	b.n	80027c4 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 80027b8:	893a      	ldrh	r2, [r7, #8]
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fc3c 	bl	800203c <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	3b04      	subs	r3, #4
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 80027cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	dcdd      	bgt.n	8002790 <init_table16+0x12>
    }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <reset>:


void reset(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
    done_reset = 1;
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <reset+0x88>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 80027ea:	f7ff faf9 	bl	8001de0 <setWriteDir>
    CTL_INIT();
 80027ee:	2101      	movs	r1, #1
 80027f0:	481e      	ldr	r0, [pc, #120]	; (800286c <reset+0x8c>)
 80027f2:	f7ff f9c3 	bl	8001b7c <PIN_OUTPUT>
 80027f6:	2102      	movs	r1, #2
 80027f8:	481c      	ldr	r0, [pc, #112]	; (800286c <reset+0x8c>)
 80027fa:	f7ff f9bf 	bl	8001b7c <PIN_OUTPUT>
 80027fe:	2110      	movs	r1, #16
 8002800:	481a      	ldr	r0, [pc, #104]	; (800286c <reset+0x8c>)
 8002802:	f7ff f9bb 	bl	8001b7c <PIN_OUTPUT>
 8002806:	2101      	movs	r1, #1
 8002808:	4819      	ldr	r0, [pc, #100]	; (8002870 <reset+0x90>)
 800280a:	f7ff f9b7 	bl	8001b7c <PIN_OUTPUT>
 800280e:	2102      	movs	r1, #2
 8002810:	4818      	ldr	r0, [pc, #96]	; (8002874 <reset+0x94>)
 8002812:	f7ff f9b3 	bl	8001b7c <PIN_OUTPUT>
    CS_IDLE;
 8002816:	2101      	movs	r1, #1
 8002818:	4815      	ldr	r0, [pc, #84]	; (8002870 <reset+0x90>)
 800281a:	f7ff f989 	bl	8001b30 <PIN_HIGH>
    RD_IDLE;
 800281e:	2101      	movs	r1, #1
 8002820:	4812      	ldr	r0, [pc, #72]	; (800286c <reset+0x8c>)
 8002822:	f7ff f985 	bl	8001b30 <PIN_HIGH>
    WR_IDLE;
 8002826:	2102      	movs	r1, #2
 8002828:	4810      	ldr	r0, [pc, #64]	; (800286c <reset+0x8c>)
 800282a:	f7ff f981 	bl	8001b30 <PIN_HIGH>
    RESET_IDLE;
 800282e:	2102      	movs	r1, #2
 8002830:	4810      	ldr	r0, [pc, #64]	; (8002874 <reset+0x94>)
 8002832:	f7ff f97d 	bl	8001b30 <PIN_HIGH>
    delay(50);
 8002836:	2032      	movs	r0, #50	; 0x32
 8002838:	f002 fe1c 	bl	8005474 <delay>
    RESET_ACTIVE;
 800283c:	2102      	movs	r1, #2
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <reset+0x94>)
 8002840:	f7ff f966 	bl	8001b10 <PIN_LOW>
    delay(100);
 8002844:	2064      	movs	r0, #100	; 0x64
 8002846:	f002 fe15 	bl	8005474 <delay>
    RESET_IDLE;
 800284a:	2102      	movs	r1, #2
 800284c:	4809      	ldr	r0, [pc, #36]	; (8002874 <reset+0x94>)
 800284e:	f7ff f96f 	bl	8001b30 <PIN_HIGH>
    delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 8002852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002856:	f002 fe0d 	bl	8005474 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 800285a:	2100      	movs	r1, #0
 800285c:	20b0      	movs	r0, #176	; 0xb0
 800285e:	f7ff fa6c 	bl	8001d3a <WriteCmdData>
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000049 	.word	0x20000049
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800

08002878 <read16bits>:


static uint16_t read16bits(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 800287e:	2101      	movs	r1, #1
 8002880:	4873      	ldr	r0, [pc, #460]	; (8002a50 <read16bits+0x1d8>)
 8002882:	f7ff f955 	bl	8001b30 <PIN_HIGH>
 8002886:	2101      	movs	r1, #1
 8002888:	4871      	ldr	r0, [pc, #452]	; (8002a50 <read16bits+0x1d8>)
 800288a:	f7ff f941 	bl	8001b10 <PIN_LOW>
 800288e:	2101      	movs	r1, #1
 8002890:	486f      	ldr	r0, [pc, #444]	; (8002a50 <read16bits+0x1d8>)
 8002892:	f7ff f93d 	bl	8001b10 <PIN_LOW>
 8002896:	2101      	movs	r1, #1
 8002898:	486d      	ldr	r0, [pc, #436]	; (8002a50 <read16bits+0x1d8>)
 800289a:	f7ff f939 	bl	8001b10 <PIN_LOW>
 800289e:	2101      	movs	r1, #1
 80028a0:	486b      	ldr	r0, [pc, #428]	; (8002a50 <read16bits+0x1d8>)
 80028a2:	f7ff f935 	bl	8001b10 <PIN_LOW>
 80028a6:	2101      	movs	r1, #1
 80028a8:	4869      	ldr	r0, [pc, #420]	; (8002a50 <read16bits+0x1d8>)
 80028aa:	f7ff f931 	bl	8001b10 <PIN_LOW>
 80028ae:	2101      	movs	r1, #1
 80028b0:	4867      	ldr	r0, [pc, #412]	; (8002a50 <read16bits+0x1d8>)
 80028b2:	f7ff f92d 	bl	8001b10 <PIN_LOW>
 80028b6:	2101      	movs	r1, #1
 80028b8:	4865      	ldr	r0, [pc, #404]	; (8002a50 <read16bits+0x1d8>)
 80028ba:	f7ff f929 	bl	8001b10 <PIN_LOW>
 80028be:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <read16bits+0x1d8>)
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <read16bits+0x1dc>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	b29b      	uxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <read16bits+0x1dc>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <read16bits+0x1dc>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	b29a      	uxth	r2, r3
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <read16bits+0x1dc>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	b29b      	uxth	r3, r3
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	b29b      	uxth	r3, r3
 8002910:	4313      	orrs	r3, r2
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <read16bits+0x1d8>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	b29b      	uxth	r3, r3
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	b29b      	uxth	r3, r3
 8002922:	4313      	orrs	r3, r2
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <read16bits+0x1e0>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	b29b      	uxth	r3, r3
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	b29b      	uxth	r3, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <read16bits+0x1d8>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	0a5b      	lsrs	r3, r3, #9
 800293e:	b29b      	uxth	r3, r3
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	b29b      	uxth	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
 800294a:	2101      	movs	r1, #1
 800294c:	4840      	ldr	r0, [pc, #256]	; (8002a50 <read16bits+0x1d8>)
 800294e:	f7ff f8ef 	bl	8001b30 <PIN_HIGH>
 8002952:	2101      	movs	r1, #1
 8002954:	483e      	ldr	r0, [pc, #248]	; (8002a50 <read16bits+0x1d8>)
 8002956:	f7ff f8eb 	bl	8001b30 <PIN_HIGH>
    READ_8(lo);
 800295a:	2101      	movs	r1, #1
 800295c:	483c      	ldr	r0, [pc, #240]	; (8002a50 <read16bits+0x1d8>)
 800295e:	f7ff f8e7 	bl	8001b30 <PIN_HIGH>
 8002962:	2101      	movs	r1, #1
 8002964:	483a      	ldr	r0, [pc, #232]	; (8002a50 <read16bits+0x1d8>)
 8002966:	f7ff f8d3 	bl	8001b10 <PIN_LOW>
 800296a:	2101      	movs	r1, #1
 800296c:	4838      	ldr	r0, [pc, #224]	; (8002a50 <read16bits+0x1d8>)
 800296e:	f7ff f8cf 	bl	8001b10 <PIN_LOW>
 8002972:	2101      	movs	r1, #1
 8002974:	4836      	ldr	r0, [pc, #216]	; (8002a50 <read16bits+0x1d8>)
 8002976:	f7ff f8cb 	bl	8001b10 <PIN_LOW>
 800297a:	2101      	movs	r1, #1
 800297c:	4834      	ldr	r0, [pc, #208]	; (8002a50 <read16bits+0x1d8>)
 800297e:	f7ff f8c7 	bl	8001b10 <PIN_LOW>
 8002982:	2101      	movs	r1, #1
 8002984:	4832      	ldr	r0, [pc, #200]	; (8002a50 <read16bits+0x1d8>)
 8002986:	f7ff f8c3 	bl	8001b10 <PIN_LOW>
 800298a:	2101      	movs	r1, #1
 800298c:	4830      	ldr	r0, [pc, #192]	; (8002a50 <read16bits+0x1d8>)
 800298e:	f7ff f8bf 	bl	8001b10 <PIN_LOW>
 8002992:	2101      	movs	r1, #1
 8002994:	482e      	ldr	r0, [pc, #184]	; (8002a50 <read16bits+0x1d8>)
 8002996:	f7ff f8bb 	bl	8001b10 <PIN_LOW>
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <read16bits+0x1d8>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b2a      	ldr	r3, [pc, #168]	; (8002a54 <read16bits+0x1dc>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <read16bits+0x1dc>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <read16bits+0x1dc>)
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <read16bits+0x1dc>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <read16bits+0x1d8>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <read16bits+0x1e0>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	4313      	orrs	r3, r2
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <read16bits+0x1d8>)
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	0a5b      	lsrs	r3, r3, #9
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	717b      	strb	r3, [r7, #5]
 8002a26:	2101      	movs	r1, #1
 8002a28:	4809      	ldr	r0, [pc, #36]	; (8002a50 <read16bits+0x1d8>)
 8002a2a:	f7ff f881 	bl	8001b30 <PIN_HIGH>
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4807      	ldr	r0, [pc, #28]	; (8002a50 <read16bits+0x1d8>)
 8002a32:	f7ff f87d 	bl	8001b30 <PIN_HIGH>
    return (ret << 8) | lo;
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	797b      	ldrb	r3, [r7, #5]
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	4313      	orrs	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	b29b      	uxth	r3, r3
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800

08002a5c <readReg>:


uint16_t readReg(uint16_t reg, int8_t index)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	460a      	mov	r2, r1
 8002a66:	80fb      	strh	r3, [r7, #6]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8002a6c:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <readReg+0x1a8>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <readReg+0x1c>
        reset();
 8002a74:	f7ff feb4 	bl	80027e0 <reset>
    CS_ACTIVE;
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4863      	ldr	r0, [pc, #396]	; (8002c08 <readReg+0x1ac>)
 8002a7c:	f7ff f848 	bl	8001b10 <PIN_LOW>
    WriteCmd(reg);
 8002a80:	2110      	movs	r1, #16
 8002a82:	4862      	ldr	r0, [pc, #392]	; (8002c0c <readReg+0x1b0>)
 8002a84:	f7ff f844 	bl	8001b10 <PIN_LOW>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	73bb      	strb	r3, [r7, #14]
 8002a94:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <readReg+0x1b0>)
 8002a96:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002a9a:	619a      	str	r2, [r3, #24]
 8002a9c:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <readReg+0x1ac>)
 8002a9e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002aa2:	619a      	str	r2, [r3, #24]
 8002aa4:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <readReg+0x1b4>)
 8002aa6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002aaa:	619a      	str	r2, [r3, #24]
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	431a      	orrs	r2, r3
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	025b      	lsls	r3, r3, #9
 8002ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <readReg+0x1b0>)
 8002aca:	619a      	str	r2, [r3, #24]
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	105b      	asrs	r3, r3, #1
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	431a      	orrs	r2, r3
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	431a      	orrs	r2, r3
 8002af0:	4b45      	ldr	r3, [pc, #276]	; (8002c08 <readReg+0x1ac>)
 8002af2:	619a      	str	r2, [r3, #24]
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	019b      	lsls	r3, r3, #6
 8002af8:	4a45      	ldr	r2, [pc, #276]	; (8002c10 <readReg+0x1b4>)
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	6193      	str	r3, [r2, #24]
 8002b00:	2102      	movs	r1, #2
 8002b02:	4842      	ldr	r0, [pc, #264]	; (8002c0c <readReg+0x1b0>)
 8002b04:	f7ff f804 	bl	8001b10 <PIN_LOW>
 8002b08:	2102      	movs	r1, #2
 8002b0a:	4840      	ldr	r0, [pc, #256]	; (8002c0c <readReg+0x1b0>)
 8002b0c:	f7ff f800 	bl	8001b10 <PIN_LOW>
 8002b10:	2102      	movs	r1, #2
 8002b12:	483e      	ldr	r0, [pc, #248]	; (8002c0c <readReg+0x1b0>)
 8002b14:	f7fe fffc 	bl	8001b10 <PIN_LOW>
 8002b18:	2102      	movs	r1, #2
 8002b1a:	483c      	ldr	r0, [pc, #240]	; (8002c0c <readReg+0x1b0>)
 8002b1c:	f7ff f808 	bl	8001b30 <PIN_HIGH>
 8002b20:	2102      	movs	r1, #2
 8002b22:	483a      	ldr	r0, [pc, #232]	; (8002c0c <readReg+0x1b0>)
 8002b24:	f7ff f804 	bl	8001b30 <PIN_HIGH>
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <readReg+0x1b0>)
 8002b2a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002b2e:	619a      	str	r2, [r3, #24]
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <readReg+0x1ac>)
 8002b32:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8002b36:	619a      	str	r2, [r3, #24]
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <readReg+0x1b4>)
 8002b3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b3e:	619a      	str	r2, [r3, #24]
 8002b40:	7bbb      	ldrb	r3, [r7, #14]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002b48:	7bbb      	ldrb	r3, [r7, #14]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	431a      	orrs	r2, r3
 8002b52:	7bbb      	ldrb	r3, [r7, #14]
 8002b54:	025b      	lsls	r3, r3, #9
 8002b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <readReg+0x1b0>)
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002b68:	7bbb      	ldrb	r3, [r7, #14]
 8002b6a:	105b      	asrs	r3, r3, #1
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	431a      	orrs	r2, r3
 8002b72:	7bbb      	ldrb	r3, [r7, #14]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	431a      	orrs	r2, r3
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <readReg+0x1ac>)
 8002b86:	619a      	str	r2, [r3, #24]
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	019b      	lsls	r3, r3, #6
 8002b8c:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <readReg+0x1b4>)
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	2102      	movs	r1, #2
 8002b96:	481d      	ldr	r0, [pc, #116]	; (8002c0c <readReg+0x1b0>)
 8002b98:	f7fe ffba 	bl	8001b10 <PIN_LOW>
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	481b      	ldr	r0, [pc, #108]	; (8002c0c <readReg+0x1b0>)
 8002ba0:	f7fe ffb6 	bl	8001b10 <PIN_LOW>
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4819      	ldr	r0, [pc, #100]	; (8002c0c <readReg+0x1b0>)
 8002ba8:	f7fe ffb2 	bl	8001b10 <PIN_LOW>
 8002bac:	2102      	movs	r1, #2
 8002bae:	4817      	ldr	r0, [pc, #92]	; (8002c0c <readReg+0x1b0>)
 8002bb0:	f7fe ffbe 	bl	8001b30 <PIN_HIGH>
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	4815      	ldr	r0, [pc, #84]	; (8002c0c <readReg+0x1b0>)
 8002bb8:	f7fe ffba 	bl	8001b30 <PIN_HIGH>
 8002bbc:	2110      	movs	r1, #16
 8002bbe:	4813      	ldr	r0, [pc, #76]	; (8002c0c <readReg+0x1b0>)
 8002bc0:	f7fe ffb6 	bl	8001b30 <PIN_HIGH>
    setReadDir();
 8002bc4:	f7ff f8de 	bl	8001d84 <setReadDir>
    delay(1);    //1us should be adequate
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f002 fc53 	bl	8005474 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8002bce:	f7ff fe53 	bl	8002878 <read16bits>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	81bb      	strh	r3, [r7, #12]
 8002bd6:	797b      	ldrb	r3, [r7, #5]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	717b      	strb	r3, [r7, #5]
 8002bde:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	daf3      	bge.n	8002bce <readReg+0x172>
    RD_IDLE;
 8002be6:	2101      	movs	r1, #1
 8002be8:	4808      	ldr	r0, [pc, #32]	; (8002c0c <readReg+0x1b0>)
 8002bea:	f7fe ffa1 	bl	8001b30 <PIN_HIGH>
    CS_IDLE;
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <readReg+0x1ac>)
 8002bf2:	f7fe ff9d 	bl	8001b30 <PIN_HIGH>
    setWriteDir();
 8002bf6:	f7ff f8f3 	bl	8001de0 <setWriteDir>
    return ret;
 8002bfa:	89bb      	ldrh	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000049 	.word	0x20000049
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	40020800 	.word	0x40020800

08002c14 <readReg32>:


uint32_t readReg32(uint16_t reg)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff1a 	bl	8002a5c <readReg>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff13 	bl	8002a5c <readReg>
 8002c36:	4603      	mov	r3, r0
 8002c38:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8002c3a:	89fb      	ldrh	r3, [r7, #14]
 8002c3c:	041a      	lsls	r2, r3, #16
 8002c3e:	89bb      	ldrh	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <readReg40>:


uint32_t readReg40(uint16_t reg)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff feff 	bl	8002a5c <readReg>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fef8 	bl	8002a5c <readReg>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2102      	movs	r1, #2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fef1 	bl	8002a5c <readReg>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	89ba      	ldrh	r2, [r7, #12]
 8002c84:	0212      	lsls	r2, r2, #8
 8002c86:	4313      	orrs	r3, r2
 8002c88:	897a      	ldrh	r2, [r7, #10]
 8002c8a:	0a12      	lsrs	r2, r2, #8
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	4313      	orrs	r3, r2
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <tft_init>:


void tft_init(uint16_t ID)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8002caa:	4be1      	ldr	r3, [pc, #900]	; (8003030 <tft_init+0x398>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8002cb0:	4ae0      	ldr	r2, [pc, #896]	; (8003034 <tft_init+0x39c>)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	8013      	strh	r3, [r2, #0]
 8002cb6:	4bdf      	ldr	r3, [pc, #892]	; (8003034 <tft_init+0x39c>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	f24c 5205 	movw	r2, #50437	; 0xc505
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	f000 82cc 	beq.w	800325c <tft_init+0x5c4>
 8002cc4:	f24c 5205 	movw	r2, #50437	; 0xc505
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	f300 8303 	bgt.w	80032d4 <tft_init+0x63c>
 8002cce:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f000 82cb 	beq.w	800326e <tft_init+0x5d6>
 8002cd8:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f300 82f9 	bgt.w	80032d4 <tft_init+0x63c>
 8002ce2:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f000 82b8 	beq.w	800325c <tft_init+0x5c4>
 8002cec:	f24b 5205 	movw	r2, #46341	; 0xb505
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f300 82ef 	bgt.w	80032d4 <tft_init+0x63c>
 8002cf6:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f000 8239 	beq.w	8003172 <tft_init+0x4da>
 8002d00:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002d04:	4293      	cmp	r3, r2
 8002d06:	f300 82e5 	bgt.w	80032d4 <tft_init+0x63c>
 8002d0a:	f249 4288 	movw	r2, #38024	; 0x9488
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f300 82e0 	bgt.w	80032d4 <tft_init+0x63c>
 8002d14:	f249 4287 	movw	r2, #38023	; 0x9487
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f280 8288 	bge.w	800322e <tft_init+0x596>
 8002d1e:	f249 4286 	movw	r2, #38022	; 0x9486
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f000 8269 	beq.w	80031fa <tft_init+0x562>
 8002d28:	f249 4286 	movw	r2, #38022	; 0x9486
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	f300 82d1 	bgt.w	80032d4 <tft_init+0x63c>
 8002d32:	f249 4281 	movw	r2, #38017	; 0x9481
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 8248 	beq.w	80031cc <tft_init+0x534>
 8002d3c:	f249 4281 	movw	r2, #38017	; 0x9481
 8002d40:	4293      	cmp	r3, r2
 8002d42:	f300 82c7 	bgt.w	80032d4 <tft_init+0x63c>
 8002d46:	f249 3241 	movw	r2, #37697	; 0x9341
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f300 82c2 	bgt.w	80032d4 <tft_init+0x63c>
 8002d50:	f249 3202 	movw	r2, #37634	; 0x9302
 8002d54:	4293      	cmp	r3, r2
 8002d56:	f280 80a5 	bge.w	8002ea4 <tft_init+0x20c>
 8002d5a:	f249 0290 	movw	r2, #37008	; 0x9090
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	f000 818f 	beq.w	8003082 <tft_init+0x3ea>
 8002d64:	f249 0290 	movw	r2, #37008	; 0x9090
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	f300 82b3 	bgt.w	80032d4 <tft_init+0x63c>
 8002d6e:	f248 3257 	movw	r2, #33623	; 0x8357
 8002d72:	4293      	cmp	r3, r2
 8002d74:	f000 8180 	beq.w	8003078 <tft_init+0x3e0>
 8002d78:	f248 3257 	movw	r2, #33623	; 0x8357
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	f300 82a9 	bgt.w	80032d4 <tft_init+0x63c>
 8002d82:	f248 0231 	movw	r2, #32817	; 0x8031
 8002d86:	4293      	cmp	r3, r2
 8002d88:	f000 816d 	beq.w	8003066 <tft_init+0x3ce>
 8002d8c:	f248 0231 	movw	r2, #32817	; 0x8031
 8002d90:	4293      	cmp	r3, r2
 8002d92:	f300 829f 	bgt.w	80032d4 <tft_init+0x63c>
 8002d96:	f247 7296 	movw	r2, #30614	; 0x7796
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	f000 8242 	beq.w	8003224 <tft_init+0x58c>
 8002da0:	f247 7296 	movw	r2, #30614	; 0x7796
 8002da4:	4293      	cmp	r3, r2
 8002da6:	f300 8295 	bgt.w	80032d4 <tft_init+0x63c>
 8002daa:	f247 7293 	movw	r2, #30611	; 0x7793
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f000 825d 	beq.w	800326e <tft_init+0x5d6>
 8002db4:	f247 7293 	movw	r2, #30611	; 0x7793
 8002db8:	4293      	cmp	r3, r2
 8002dba:	f300 828b 	bgt.w	80032d4 <tft_init+0x63c>
 8002dbe:	f247 7289 	movw	r2, #30601	; 0x7789
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	f000 8146 	beq.w	8003054 <tft_init+0x3bc>
 8002dc8:	f247 7289 	movw	r2, #30601	; 0x7789
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	f300 8281 	bgt.w	80032d4 <tft_init+0x63c>
 8002dd2:	f646 0209 	movw	r2, #26633	; 0x6809
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	f000 8194 	beq.w	8003104 <tft_init+0x46c>
 8002ddc:	f646 0209 	movw	r2, #26633	; 0x6809
 8002de0:	4293      	cmp	r3, r2
 8002de2:	f300 8277 	bgt.w	80032d4 <tft_init+0x63c>
 8002de6:	f245 4208 	movw	r2, #21512	; 0x5408
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 817a 	beq.w	80030e4 <tft_init+0x44c>
 8002df0:	f245 4208 	movw	r2, #21512	; 0x5408
 8002df4:	4293      	cmp	r3, r2
 8002df6:	f300 826d 	bgt.w	80032d4 <tft_init+0x63c>
 8002dfa:	f245 3210 	movw	r2, #21264	; 0x5310
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	f000 8100 	beq.w	8003004 <tft_init+0x36c>
 8002e04:	f245 3210 	movw	r2, #21264	; 0x5310
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	f300 8263 	bgt.w	80032d4 <tft_init+0x63c>
 8002e0e:	f242 0253 	movw	r2, #8275	; 0x2053
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f000 81a8 	beq.w	8003168 <tft_init+0x4d0>
 8002e18:	f242 0253 	movw	r2, #8275	; 0x2053
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	f300 8259 	bgt.w	80032d4 <tft_init+0x63c>
 8002e22:	f241 6202 	movw	r2, #5634	; 0x1602
 8002e26:	4293      	cmp	r3, r2
 8002e28:	f000 8195 	beq.w	8003156 <tft_init+0x4be>
 8002e2c:	f241 6202 	movw	r2, #5634	; 0x1602
 8002e30:	4293      	cmp	r3, r2
 8002e32:	f300 824f 	bgt.w	80032d4 <tft_init+0x63c>
 8002e36:	f241 5281 	movw	r2, #5505	; 0x1581
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	f000 81c1 	beq.w	80031c2 <tft_init+0x52a>
 8002e40:	f241 5281 	movw	r2, #5505	; 0x1581
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f300 8245 	bgt.w	80032d4 <tft_init+0x63c>
 8002e4a:	f241 5226 	movw	r2, #5414	; 0x1526
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	f000 80cf 	beq.w	8002ff2 <tft_init+0x35a>
 8002e54:	f241 5226 	movw	r2, #5414	; 0x1526
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	f300 823b 	bgt.w	80032d4 <tft_init+0x63c>
 8002e5e:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002e62:	f000 80bd 	beq.w	8002fe0 <tft_init+0x348>
 8002e66:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8002e6a:	f300 8233 	bgt.w	80032d4 <tft_init+0x63c>
 8002e6e:	f241 5211 	movw	r2, #5393	; 0x1511
 8002e72:	4293      	cmp	r3, r2
 8002e74:	f000 80a0 	beq.w	8002fb8 <tft_init+0x320>
 8002e78:	f241 5211 	movw	r2, #5393	; 0x1511
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f300 8229 	bgt.w	80032d4 <tft_init+0x63c>
 8002e82:	f241 5205 	movw	r2, #5381	; 0x1505
 8002e86:	4293      	cmp	r3, r2
 8002e88:	f000 8131 	beq.w	80030ee <tft_init+0x456>
 8002e8c:	f241 5205 	movw	r2, #5381	; 0x1505
 8002e90:	4293      	cmp	r3, r2
 8002e92:	f300 821f 	bgt.w	80032d4 <tft_init+0x63c>
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f000 811f 	beq.w	80030da <tft_init+0x442>
 8002e9c:	2b99      	cmp	r3, #153	; 0x99
 8002e9e:	f000 8107 	beq.w	80030b0 <tft_init+0x418>
 8002ea2:	e217      	b.n	80032d4 <tft_init+0x63c>
 8002ea4:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8002ea8:	3b02      	subs	r3, #2
 8002eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8002eac:	f200 8212 	bhi.w	80032d4 <tft_init+0x63c>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <tft_init+0x220>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	0800317d 	.word	0x0800317d
 8002ebc:	080032d5 	.word	0x080032d5
 8002ec0:	080032d5 	.word	0x080032d5
 8002ec4:	080032d5 	.word	0x080032d5
 8002ec8:	080032d5 	.word	0x080032d5
 8002ecc:	080032d5 	.word	0x080032d5
 8002ed0:	080032d5 	.word	0x080032d5
 8002ed4:	080032d5 	.word	0x080032d5
 8002ed8:	080032d5 	.word	0x080032d5
 8002edc:	080032d5 	.word	0x080032d5
 8002ee0:	080032d5 	.word	0x080032d5
 8002ee4:	080032d5 	.word	0x080032d5
 8002ee8:	080032d5 	.word	0x080032d5
 8002eec:	080032d5 	.word	0x080032d5
 8002ef0:	080032d5 	.word	0x080032d5
 8002ef4:	080032d5 	.word	0x080032d5
 8002ef8:	080032d5 	.word	0x080032d5
 8002efc:	080032d5 	.word	0x080032d5
 8002f00:	080032d5 	.word	0x080032d5
 8002f04:	080032d5 	.word	0x080032d5
 8002f08:	080032d5 	.word	0x080032d5
 8002f0c:	080032d5 	.word	0x080032d5
 8002f10:	080032d5 	.word	0x080032d5
 8002f14:	080032d5 	.word	0x080032d5
 8002f18:	080032d5 	.word	0x080032d5
 8002f1c:	080032d5 	.word	0x080032d5
 8002f20:	080032d5 	.word	0x080032d5
 8002f24:	080032d5 	.word	0x080032d5
 8002f28:	080032d5 	.word	0x080032d5
 8002f2c:	080032d5 	.word	0x080032d5
 8002f30:	080030ef 	.word	0x080030ef
 8002f34:	080032d5 	.word	0x080032d5
 8002f38:	080032d5 	.word	0x080032d5
 8002f3c:	080032d5 	.word	0x080032d5
 8002f40:	080032d5 	.word	0x080032d5
 8002f44:	0800310f 	.word	0x0800310f
 8002f48:	080032d5 	.word	0x080032d5
 8002f4c:	0800312f 	.word	0x0800312f
 8002f50:	0800310f 	.word	0x0800310f
 8002f54:	08003191 	.word	0x08003191
 8002f58:	080032d5 	.word	0x080032d5
 8002f5c:	080032d5 	.word	0x080032d5
 8002f60:	080032d5 	.word	0x080032d5
 8002f64:	080032d5 	.word	0x080032d5
 8002f68:	080032d5 	.word	0x080032d5
 8002f6c:	080032d5 	.word	0x080032d5
 8002f70:	080032d5 	.word	0x080032d5
 8002f74:	08003119 	.word	0x08003119
 8002f78:	080032d5 	.word	0x080032d5
 8002f7c:	080032d5 	.word	0x080032d5
 8002f80:	080032d5 	.word	0x080032d5
 8002f84:	08003119 	.word	0x08003119
 8002f88:	080032d5 	.word	0x080032d5
 8002f8c:	080032d5 	.word	0x080032d5
 8002f90:	08003187 	.word	0x08003187
 8002f94:	080032d5 	.word	0x080032d5
 8002f98:	080032d5 	.word	0x080032d5
 8002f9c:	080032d5 	.word	0x080032d5
 8002fa0:	080032d5 	.word	0x080032d5
 8002fa4:	080032d5 	.word	0x080032d5
 8002fa8:	080032d5 	.word	0x080032d5
 8002fac:	080032d5 	.word	0x080032d5
 8002fb0:	080031a7 	.word	0x080031a7
 8002fb4:	080031b1 	.word	0x080031b1
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <tft_init+0x3a0>)
 8002fba:	2203      	movs	r2, #3
 8002fbc:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <tft_init+0x3a4>)
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <tft_init+0x3a8>)
 8002fc8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fd0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <tft_init+0x3ac>)
 8002fd4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fdc:	801a      	strh	r2, [r3, #0]
        break;
 8002fde:	e17f      	b.n	80032e0 <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <tft_init+0x3a0>)
 8002fe2:	f240 4213 	movw	r2, #1043	; 0x413
 8002fe6:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <tft_init+0x3b0>)
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	2306      	movs	r3, #6
 8002fee:	837b      	strh	r3, [r7, #26]
        break;
 8002ff0:	e176      	b.n	80032e0 <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <tft_init+0x3a0>)
 8002ff4:	f240 4213 	movw	r2, #1043	; 0x413
 8002ff8:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <tft_init+0x3b4>)
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	230c      	movs	r3, #12
 8003000:	837b      	strh	r3, [r7, #26]
        break;
 8003002:	e16d      	b.n	80032e0 <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <tft_init+0x3a0>)
 8003006:	f640 6213 	movw	r2, #3603	; 0xe13
 800300a:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <tft_init+0x3b8>)
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	2302      	movs	r3, #2
 8003012:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <tft_init+0x3a8>)
 8003016:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800301e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <tft_init+0x3ac>)
 8003022:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800302a:	801a      	strh	r2, [r3, #0]
        break;
 800302c:	e158      	b.n	80032e0 <tft_init+0x648>
 800302e:	bf00      	nop
 8003030:	200052e0 	.word	0x200052e0
 8003034:	200052de 	.word	0x200052de
 8003038:	200052d0 	.word	0x200052d0
 800303c:	0800949c 	.word	0x0800949c
 8003040:	08001bc5 	.word	0x08001bc5
 8003044:	08001bad 	.word	0x08001bad
 8003048:	080094a0 	.word	0x080094a0
 800304c:	080094a8 	.word	0x080094a8
 8003050:	080094b4 	.word	0x080094b4
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003054:	4b8d      	ldr	r3, [pc, #564]	; (800328c <tft_init+0x5f4>)
 8003056:	f240 4213 	movw	r2, #1043	; 0x413
 800305a:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 800305c:	4b8c      	ldr	r3, [pc, #560]	; (8003290 <tft_init+0x5f8>)
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	2341      	movs	r3, #65	; 0x41
 8003062:	837b      	strh	r3, [r7, #26]
        break;
 8003064:	e13c      	b.n	80032e0 <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8003066:	4b89      	ldr	r3, [pc, #548]	; (800328c <tft_init+0x5f4>)
 8003068:	f241 4213 	movw	r2, #5139	; 0x1413
 800306c:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 800306e:	4b89      	ldr	r3, [pc, #548]	; (8003294 <tft_init+0x5fc>)
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	2312      	movs	r3, #18
 8003074:	837b      	strh	r3, [r7, #26]
        break;
 8003076:	e133      	b.n	80032e0 <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8003078:	4b84      	ldr	r3, [pc, #528]	; (800328c <tft_init+0x5f4>)
 800307a:	f241 4203 	movw	r2, #5123	; 0x1403
 800307e:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8003080:	e003      	b.n	800308a <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8003082:	4b82      	ldr	r3, [pc, #520]	; (800328c <tft_init+0x5f4>)
 8003084:	f241 4213 	movw	r2, #5139	; 0x1413
 8003088:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 800308a:	2301      	movs	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800308e:	4b82      	ldr	r3, [pc, #520]	; (8003298 <tft_init+0x600>)
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	2302      	movs	r3, #2
 8003094:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003096:	4b81      	ldr	r3, [pc, #516]	; (800329c <tft_init+0x604>)
 8003098:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030a0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80030a2:	4b7f      	ldr	r3, [pc, #508]	; (80032a0 <tft_init+0x608>)
 80030a4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030ac:	801a      	strh	r2, [r3, #0]
        break;
 80030ae:	e117      	b.n	80032e0 <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80030b0:	4b76      	ldr	r3, [pc, #472]	; (800328c <tft_init+0x5f4>)
 80030b2:	f241 4213 	movw	r2, #5139	; 0x1413
 80030b6:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80030b8:	4b7a      	ldr	r3, [pc, #488]	; (80032a4 <tft_init+0x60c>)
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	231d      	movs	r3, #29
 80030be:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80030c0:	4b76      	ldr	r3, [pc, #472]	; (800329c <tft_init+0x604>)
 80030c2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030ca:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80030cc:	4b74      	ldr	r3, [pc, #464]	; (80032a0 <tft_init+0x608>)
 80030ce:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030d6:	801a      	strh	r2, [r3, #0]
        break;
 80030d8:	e102      	b.n	80032e0 <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <tft_init+0x5f4>)
 80030dc:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80030e0:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80030e2:	e008      	b.n	80030f6 <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80030e4:	4b69      	ldr	r3, [pc, #420]	; (800328c <tft_init+0x5f4>)
 80030e6:	f241 0204 	movw	r2, #4100	; 0x1004
 80030ea:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80030ec:	e003      	b.n	80030f6 <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80030ee:	4b67      	ldr	r3, [pc, #412]	; (800328c <tft_init+0x5f4>)
 80030f0:	f241 0204 	movw	r2, #4100	; 0x1004
 80030f4:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80030fa:	21d8      	movs	r1, #216	; 0xd8
 80030fc:	486a      	ldr	r0, [pc, #424]	; (80032a8 <tft_init+0x610>)
 80030fe:	f7ff fb3e 	bl	800277e <init_table16>
        break;
 8003102:	e0ed      	b.n	80032e0 <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8003104:	4b61      	ldr	r3, [pc, #388]	; (800328c <tft_init+0x5f4>)
 8003106:	f241 1202 	movw	r2, #4354	; 0x1102
 800310a:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800310c:	e008      	b.n	8003120 <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <tft_init+0x5f4>)
 8003110:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8003114:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8003116:	e003      	b.n	8003120 <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8003118:	4b5c      	ldr	r3, [pc, #368]	; (800328c <tft_init+0x5f4>)
 800311a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800311e:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 8003120:	2301      	movs	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8003124:	21cc      	movs	r1, #204	; 0xcc
 8003126:	4861      	ldr	r0, [pc, #388]	; (80032ac <tft_init+0x614>)
 8003128:	f7ff fb29 	bl	800277e <init_table16>
        break;
 800312c:	e0d8      	b.n	80032e0 <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800312e:	4b57      	ldr	r3, [pc, #348]	; (800328c <tft_init+0x5f4>)
 8003130:	f240 4203 	movw	r2, #1027	; 0x403
 8003134:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8003136:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <tft_init+0x618>)
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	231e      	movs	r3, #30
 800313c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800313e:	4b57      	ldr	r3, [pc, #348]	; (800329c <tft_init+0x604>)
 8003140:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003148:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800314a:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <tft_init+0x608>)
 800314c:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	22f0      	movs	r2, #240	; 0xf0
 8003152:	801a      	strh	r2, [r3, #0]
        break;
 8003154:	e0c4      	b.n	80032e0 <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8003156:	4b4d      	ldr	r3, [pc, #308]	; (800328c <tft_init+0x5f4>)
 8003158:	f240 4203 	movw	r2, #1027	; 0x403
 800315c:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800315e:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <tft_init+0x61c>)
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	2306      	movs	r3, #6
 8003164:	837b      	strh	r3, [r7, #26]
        break;
 8003166:	e0bb      	b.n	80032e0 <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8003168:	4b48      	ldr	r3, [pc, #288]	; (800328c <tft_init+0x5f4>)
 800316a:	f241 4217 	movw	r2, #5143	; 0x1417
 800316e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003170:	e012      	b.n	8003198 <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 8003172:	4b46      	ldr	r3, [pc, #280]	; (800328c <tft_init+0x5f4>)
 8003174:	f241 4213 	movw	r2, #5139	; 0x1413
 8003178:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800317a:	e00d      	b.n	8003198 <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <tft_init+0x5f4>)
 800317e:	f240 4203 	movw	r2, #1027	; 0x403
 8003182:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8003184:	e008      	b.n	8003198 <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <tft_init+0x5f4>)
 8003188:	f240 4213 	movw	r2, #1043	; 0x413
 800318c:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800318e:	e003      	b.n	8003198 <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8003190:	4b3e      	ldr	r3, [pc, #248]	; (800328c <tft_init+0x5f4>)
 8003192:	f241 6203 	movw	r2, #5635	; 0x1603
 8003196:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8003198:	2301      	movs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <tft_init+0x620>)
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	2303      	movs	r3, #3
 80031a2:	837b      	strh	r3, [r7, #26]
        break;
 80031a4:	e09c      	b.n	80032e0 <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <tft_init+0x5f4>)
 80031a8:	f241 4213 	movw	r2, #5139	; 0x1413
 80031ac:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 80031ae:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <tft_init+0x5f4>)
 80031b2:	f240 4213 	movw	r2, #1043	; 0x413
 80031b6:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <tft_init+0x624>)
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	2365      	movs	r3, #101	; 0x65
 80031be:	837b      	strh	r3, [r7, #26]
        break;
 80031c0:	e08e      	b.n	80032e0 <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80031c2:	4b32      	ldr	r3, [pc, #200]	; (800328c <tft_init+0x5f4>)
 80031c4:	f240 4213 	movw	r2, #1043	; 0x413
 80031c8:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80031ca:	e003      	b.n	80031d4 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <tft_init+0x5f4>)
 80031ce:	f240 4207 	movw	r2, #1031	; 0x407
 80031d2:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80031d8:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <tft_init+0x628>)
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	2345      	movs	r3, #69	; 0x45
 80031de:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <tft_init+0x604>)
 80031e2:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031ea:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80031ec:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <tft_init+0x608>)
 80031ee:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031f6:	801a      	strh	r2, [r3, #0]
        break;
 80031f8:	e072      	b.n	80032e0 <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <tft_init+0x5f4>)
 80031fc:	f240 4203 	movw	r2, #1027	; 0x403
 8003200:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8003202:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <tft_init+0x62c>)
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	233b      	movs	r3, #59	; 0x3b
 8003208:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <tft_init+0x604>)
 800320c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003214:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <tft_init+0x608>)
 8003218:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003220:	801a      	strh	r2, [r3, #0]
        break;
 8003222:	e05d      	b.n	80032e0 <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <tft_init+0x5f4>)
 8003226:	f240 4203 	movw	r2, #1027	; 0x403
 800322a:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 800322c:	e003      	b.n	8003236 <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <tft_init+0x5f4>)
 8003230:	f240 4213 	movw	r2, #1043	; 0x413
 8003234:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8003236:	2301      	movs	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <tft_init+0x630>)
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	232b      	movs	r3, #43	; 0x2b
 8003240:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <tft_init+0x604>)
 8003244:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800324c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <tft_init+0x608>)
 8003250:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003258:	801a      	strh	r2, [r3, #0]
        break;
 800325a:	e041      	b.n	80032e0 <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <tft_init+0x5f4>)
 800325e:	f241 0208 	movw	r2, #4104	; 0x1008
 8003262:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 8003264:	21b0      	movs	r1, #176	; 0xb0
 8003266:	4819      	ldr	r0, [pc, #100]	; (80032cc <tft_init+0x634>)
 8003268:	f7ff fa89 	bl	800277e <init_table16>
        break;
 800326c:	e038      	b.n	80032e0 <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <tft_init+0x5f4>)
 8003270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003274:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 8003276:	21c0      	movs	r1, #192	; 0xc0
 8003278:	4815      	ldr	r0, [pc, #84]	; (80032d0 <tft_init+0x638>)
 800327a:	f7ff fa80 	bl	800277e <init_table16>
        p16 = (int16_t *) & height;
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <tft_init+0x604>)
 8003280:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003288:	801a      	strh	r2, [r3, #0]
        break;
 800328a:	e029      	b.n	80032e0 <tft_init+0x648>
 800328c:	200052d0 	.word	0x200052d0
 8003290:	080094b8 	.word	0x080094b8
 8003294:	080094fc 	.word	0x080094fc
 8003298:	08009510 	.word	0x08009510
 800329c:	08001bc5 	.word	0x08001bc5
 80032a0:	08001bad 	.word	0x08001bad
 80032a4:	08009514 	.word	0x08009514
 80032a8:	08009534 	.word	0x08009534
 80032ac:	0800960c 	.word	0x0800960c
 80032b0:	080096d8 	.word	0x080096d8
 80032b4:	080096f8 	.word	0x080096f8
 80032b8:	08009700 	.word	0x08009700
 80032bc:	08009704 	.word	0x08009704
 80032c0:	0800976c 	.word	0x0800976c
 80032c4:	080097b4 	.word	0x080097b4
 80032c8:	080097f0 	.word	0x080097f0
 80032cc:	0800981c 	.word	0x0800981c
 80032d0:	080098cc 	.word	0x080098cc
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 80032d4:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <tft_init+0x6f0>)
 80032d6:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2200      	movs	r2, #0
 80032dc:	801a      	strh	r2, [r3, #0]
        break;
 80032de:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80032e0:	4b2a      	ldr	r3, [pc, #168]	; (800338c <tft_init+0x6f4>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <tft_init+0x6f8>)
 80032f6:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 80032fe:	2109      	movs	r1, #9
 8003300:	4824      	ldr	r0, [pc, #144]	; (8003394 <tft_init+0x6fc>)
 8003302:	f7ff f9e3 	bl	80026cc <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8003306:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800330a:	4619      	mov	r1, r3
 800330c:	69f8      	ldr	r0, [r7, #28]
 800330e:	f7ff f9dd 	bl	80026cc <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8003312:	2106      	movs	r1, #6
 8003314:	4820      	ldr	r0, [pc, #128]	; (8003398 <tft_init+0x700>)
 8003316:	f7ff f9d9 	bl	80026cc <init_table>
    }
    setRotation(0);             //PORTRAIT
 800331a:	2000      	movs	r0, #0
 800331c:	f000 ff72 	bl	8004204 <setRotation>
    invertDisplay(false);
 8003320:	2000      	movs	r0, #0
 8003322:	f001 fd5f 	bl	8004de4 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <tft_init+0x704>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	f249 4288 	movw	r2, #38024	; 0x9488
 800332e:	4293      	cmp	r3, r2
 8003330:	d125      	bne.n	800337e <tft_init+0x6e6>
		is555 = 0;
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <tft_init+0x708>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8003338:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800333c:	2100      	movs	r1, #0
 800333e:	2000      	movs	r0, #0
 8003340:	f001 f9e6 	bl	8004710 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8003344:	2100      	movs	r1, #0
 8003346:	2000      	movs	r0, #0
 8003348:	f7fe fcdf 	bl	8001d0a <readPixel>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8003354:	429a      	cmp	r2, r3
 8003356:	d112      	bne.n	800337e <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 8003358:	2306      	movs	r3, #6
 800335a:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 800335c:	f107 030f 	add.w	r3, r7, #15
 8003360:	2201      	movs	r2, #1
 8003362:	4619      	mov	r1, r3
 8003364:	203a      	movs	r0, #58	; 0x3a
 8003366:	f7fe fcfa 	bl	8001d5e <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <tft_init+0x6f4>)
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	f023 0310 	bic.w	r3, r3, #16
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <tft_init+0x6f4>)
 8003376:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <tft_init+0x708>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 800337e:	bf00      	nop
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08001bad 	.word	0x08001bad
 800338c:	200052d0 	.word	0x200052d0
 8003390:	200052d4 	.word	0x200052d4
 8003394:	0800998c 	.word	0x0800998c
 8003398:	08009998 	.word	0x08009998
 800339c:	200052de 	.word	0x200052de
 80033a0:	2000004b 	.word	0x2000004b

080033a4 <readID>:


uint16_t readID(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 80033aa:	2100      	movs	r1, #0
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7ff fb55 	bl	8002a5c <readReg>
 80033b2:	4603      	mov	r3, r0
 80033b4:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	f245 4208 	movw	r2, #21512	; 0x5408
 80033bc:	4293      	cmp	r3, r2
 80033be:	d102      	bne.n	80033c6 <readID+0x22>
        return 0x5408;
 80033c0:	f245 4308 	movw	r3, #21512	; 0x5408
 80033c4:	e128      	b.n	8003618 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 80033c6:	89fb      	ldrh	r3, [r7, #14]
 80033c8:	f245 4220 	movw	r2, #21536	; 0x5420
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <readID+0x32>
        return 0x5420;
 80033d0:	f245 4320 	movw	r3, #21536	; 0x5420
 80033d4:	e120      	b.n	8003618 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	f648 1289 	movw	r2, #35209	; 0x8989
 80033dc:	4293      	cmp	r3, r2
 80033de:	d102      	bne.n	80033e6 <readID+0x42>
        return 0x1289;
 80033e0:	f241 2389 	movw	r3, #4745	; 0x1289
 80033e4:	e118      	b.n	8003618 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 80033e6:	2100      	movs	r1, #0
 80033e8:	2067      	movs	r0, #103	; 0x67
 80033ea:	f7ff fb37 	bl	8002a5c <readReg>
 80033ee:	4603      	mov	r3, r0
 80033f0:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 80033f2:	89fb      	ldrh	r3, [r7, #14]
 80033f4:	f244 7247 	movw	r2, #18247	; 0x4747
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d102      	bne.n	8003402 <readID+0x5e>
        return 0x8347;
 80033fc:	f248 3347 	movw	r3, #33607	; 0x8347
 8003400:	e10a      	b.n	8003618 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8003402:	20a1      	movs	r0, #161	; 0xa1
 8003404:	f7ff fc06 	bl	8002c14 <readReg32>
 8003408:	4603      	mov	r3, r0
 800340a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 800340c:	89fb      	ldrh	r3, [r7, #14]
 800340e:	f246 1201 	movw	r2, #24833	; 0x6101
 8003412:	4293      	cmp	r3, r2
 8003414:	d102      	bne.n	800341c <readID+0x78>
        return 0x1963;
 8003416:	f641 1363 	movw	r3, #6499	; 0x1963
 800341a:	e0fd      	b.n	8003618 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003422:	4293      	cmp	r3, r2
 8003424:	d102      	bne.n	800342c <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8003426:	f241 5326 	movw	r3, #5414	; 0x1526
 800342a:	e0f5      	b.n	8003618 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 800342c:	20bf      	movs	r0, #191	; 0xbf
 800342e:	f7ff fc0c 	bl	8002c4a <readReg40>
 8003432:	4603      	mov	r3, r0
 8003434:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	f248 3257 	movw	r2, #33623	; 0x8357
 800343c:	4293      	cmp	r3, r2
 800343e:	d102      	bne.n	8003446 <readID+0xa2>
        return 0x8357;
 8003440:	f248 3357 	movw	r3, #33623	; 0x8357
 8003444:	e0e8      	b.n	8003618 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8003446:	89fb      	ldrh	r3, [r7, #14]
 8003448:	f249 4281 	movw	r2, #38017	; 0x9481
 800344c:	4293      	cmp	r3, r2
 800344e:	d102      	bne.n	8003456 <readID+0xb2>
        return 0x9481;
 8003450:	f249 4381 	movw	r3, #38017	; 0x9481
 8003454:	e0e0      	b.n	8003618 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8003456:	89fb      	ldrh	r3, [r7, #14]
 8003458:	f241 5211 	movw	r2, #5393	; 0x1511
 800345c:	4293      	cmp	r3, r2
 800345e:	d102      	bne.n	8003466 <readID+0xc2>
        return 0x1511;
 8003460:	f241 5311 	movw	r3, #5393	; 0x1511
 8003464:	e0d8      	b.n	8003618 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 800346c:	d102      	bne.n	8003474 <readID+0xd0>
        return 0x1520;
 800346e:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 8003472:	e0d1      	b.n	8003618 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8003474:	89fb      	ldrh	r3, [r7, #14]
 8003476:	f241 5226 	movw	r2, #5414	; 0x1526
 800347a:	4293      	cmp	r3, r2
 800347c:	d102      	bne.n	8003484 <readID+0xe0>
        return 0x1526;
 800347e:	f241 5326 	movw	r3, #5414	; 0x1526
 8003482:	e0c9      	b.n	8003618 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	f241 5281 	movw	r2, #5505	; 0x1581
 800348a:	4293      	cmp	r3, r2
 800348c:	d102      	bne.n	8003494 <readID+0xf0>
        return 0x1581;
 800348e:	f241 5381 	movw	r3, #5505	; 0x1581
 8003492:	e0c1      	b.n	8003618 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8003494:	89fb      	ldrh	r3, [r7, #14]
 8003496:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800349a:	d102      	bne.n	80034a2 <readID+0xfe>
        return 0x6814;
 800349c:	f646 0314 	movw	r3, #26644	; 0x6814
 80034a0:	e0ba      	b.n	8003618 <readID+0x274>
    ret = readReg32(0xD4);
 80034a2:	20d4      	movs	r0, #212	; 0xd4
 80034a4:	f7ff fbb6 	bl	8002c14 <readReg32>
 80034a8:	4603      	mov	r3, r0
 80034aa:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 80034ac:	89fb      	ldrh	r3, [r7, #14]
 80034ae:	f245 3210 	movw	r2, #21264	; 0x5310
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d102      	bne.n	80034bc <readID+0x118>
        return 0x5310;
 80034b6:	f245 3310 	movw	r3, #21264	; 0x5310
 80034ba:	e0ad      	b.n	8003618 <readID+0x274>
    ret = readReg32(0xD7);
 80034bc:	20d7      	movs	r0, #215	; 0xd7
 80034be:	f7ff fba9 	bl	8002c14 <readReg32>
 80034c2:	4603      	mov	r3, r0
 80034c4:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 80034c6:	89fb      	ldrh	r3, [r7, #14]
 80034c8:	f248 0231 	movw	r2, #32817	; 0x8031
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d102      	bne.n	80034d6 <readID+0x132>
        return 0x8031;
 80034d0:	f248 0331 	movw	r3, #32817	; 0x8031
 80034d4:	e0a0      	b.n	8003618 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 80034d6:	20ef      	movs	r0, #239	; 0xef
 80034d8:	f7ff fbb7 	bl	8002c4a <readReg40>
 80034dc:	4603      	mov	r3, r0
 80034de:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	f249 3227 	movw	r2, #37671	; 0x9327
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d102      	bne.n	80034f0 <readID+0x14c>
        return 0x9327;
 80034ea:	f249 3327 	movw	r3, #37671	; 0x9327
 80034ee:	e093      	b.n	8003618 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 80034f0:	20fe      	movs	r0, #254	; 0xfe
 80034f2:	f7ff fb8f 	bl	8002c14 <readReg32>
 80034f6:	4603      	mov	r3, r0
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	f242 0253 	movw	r2, #8275	; 0x2053
 8003502:	4293      	cmp	r3, r2
 8003504:	d102      	bne.n	800350c <readID+0x168>
        return 0x2053;
 8003506:	f242 0353 	movw	r3, #8275	; 0x2053
 800350a:	e085      	b.n	8003618 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 800350c:	2004      	movs	r0, #4
 800350e:	f7ff fb81 	bl	8002c14 <readReg32>
 8003512:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d122      	bne.n	800356a <readID+0x1c6>
 8003524:	89fb      	ldrh	r3, [r7, #14]
 8003526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352a:	d11e      	bne.n	800356a <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 800352c:	4a3c      	ldr	r2, [pc, #240]	; (8003620 <readID+0x27c>)
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	4611      	mov	r1, r2
 8003534:	8019      	strh	r1, [r3, #0]
 8003536:	3302      	adds	r3, #2
 8003538:	0c12      	lsrs	r2, r2, #16
 800353a:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	2203      	movs	r2, #3
 8003540:	4619      	mov	r1, r3
 8003542:	20b9      	movs	r0, #185	; 0xb9
 8003544:	f7fe fc0b 	bl	8001d5e <pushCommand>
        msb = readReg(0xD0,0);
 8003548:	2100      	movs	r1, #0
 800354a:	20d0      	movs	r0, #208	; 0xd0
 800354c:	f7ff fa86 	bl	8002a5c <readReg>
 8003550:	4603      	mov	r3, r0
 8003552:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2b99      	cmp	r3, #153	; 0x99
 8003558:	d101      	bne.n	800355e <readID+0x1ba>
 800355a:	2399      	movs	r3, #153	; 0x99
 800355c:	e05c      	b.n	8003618 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	2b90      	cmp	r3, #144	; 0x90
 8003562:	d102      	bne.n	800356a <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8003564:	f249 0390 	movw	r3, #37008	; 0x9090
 8003568:	e056      	b.n	8003618 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 800356a:	89fb      	ldrh	r3, [r7, #14]
 800356c:	f241 5226 	movw	r2, #5414	; 0x1526
 8003570:	4293      	cmp	r3, r2
 8003572:	d102      	bne.n	800357a <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8003574:	f241 5326 	movw	r3, #5414	; 0x1526
 8003578:	e04e      	b.n	8003618 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <readID+0x1e6>
        return 0x7735;
 8003584:	f247 7335 	movw	r3, #30517	; 0x7735
 8003588:	e046      	b.n	8003618 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 800358a:	89fb      	ldrh	r3, [r7, #14]
 800358c:	f248 5252 	movw	r2, #34130	; 0x8552
 8003590:	4293      	cmp	r3, r2
 8003592:	d102      	bne.n	800359a <readID+0x1f6>
        return 0x7789;
 8003594:	f247 7389 	movw	r3, #30601	; 0x7789
 8003598:	e03e      	b.n	8003618 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	f64a 4211 	movw	r2, #44049	; 0xac11
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d102      	bne.n	80035aa <readID+0x206>
        return 0xAC11;
 80035a4:	f64a 4311 	movw	r3, #44049	; 0xac11
 80035a8:	e036      	b.n	8003618 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 80035aa:	20d3      	movs	r0, #211	; 0xd3
 80035ac:	f7ff fb32 	bl	8002c14 <readReg32>
 80035b0:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	f249 1263 	movw	r2, #37219	; 0x9163
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <readID+0x222>
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	e028      	b.n	8003618 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 80035c6:	20d3      	movs	r0, #211	; 0xd3
 80035c8:	f7ff fb24 	bl	8002c14 <readReg32>
 80035cc:	4603      	mov	r3, r0
 80035ce:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	2b93      	cmp	r3, #147	; 0x93
 80035dc:	d00b      	beq.n	80035f6 <readID+0x252>
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2b94      	cmp	r3, #148	; 0x94
 80035e2:	d008      	beq.n	80035f6 <readID+0x252>
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	2b98      	cmp	r3, #152	; 0x98
 80035e8:	d005      	beq.n	80035f6 <readID+0x252>
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b77      	cmp	r3, #119	; 0x77
 80035ee:	d002      	beq.n	80035f6 <readID+0x252>
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b16      	cmp	r3, #22
 80035f4:	d101      	bne.n	80035fa <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	e00e      	b.n	8003618 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 80035fa:	89fb      	ldrh	r3, [r7, #14]
 80035fc:	2bd3      	cmp	r3, #211	; 0xd3
 80035fe:	d004      	beq.n	800360a <readID+0x266>
 8003600:	89fb      	ldrh	r3, [r7, #14]
 8003602:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <readID+0x26a>
        return ret;             //16-bit write-only bus
 800360a:	89fb      	ldrh	r3, [r7, #14]
 800360c:	e004      	b.n	8003618 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 800360e:	2100      	movs	r1, #0
 8003610:	2000      	movs	r0, #0
 8003612:	f7ff fa23 	bl	8002a5c <readReg>
 8003616:	4603      	mov	r3, r0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	080091ac 	.word	0x080091ac

08003624 <readGRAM>:


// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af00      	add	r7, sp, #0
 800362a:	60ba      	str	r2, [r7, #8]
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	81fb      	strh	r3, [r7, #14]
 8003632:	460b      	mov	r3, r1
 8003634:	81bb      	strh	r3, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 800363a:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <readGRAM+0x88>)
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003644:	fb12 f303 	smulbb	r3, r2, r3
 8003648:	b29b      	uxth	r3, r3
 800364a:	847b      	strh	r3, [r7, #34]	; 0x22
 800364c:	2300      	movs	r3, #0
 800364e:	843b      	strh	r3, [r7, #32]
 8003650:	2300      	movs	r3, #0
 8003652:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <readGRAM+0x8c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <readGRAM+0x48>
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <readGRAM+0x90>)
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <readGRAM+0x48>
        _MR = 0x2E;
 8003668:	232e      	movs	r3, #46	; 0x2e
 800366a:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <readGRAM+0x94>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	f241 6202 	movw	r2, #5634	; 0x1602
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <readGRAM+0x58>
 8003678:	232e      	movs	r3, #46	; 0x2e
 800367a:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800367c:	89fa      	ldrh	r2, [r7, #14]
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	4413      	add	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29b      	uxth	r3, r3
 8003688:	b21c      	sxth	r4, r3
 800368a:	89ba      	ldrh	r2, [r7, #12]
 800368c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800368e:	4413      	add	r3, r2
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800369c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80036a0:	4622      	mov	r2, r4
 80036a2:	f001 f93b 	bl	800491c <setAddrWindow>
    while (n > 0) {
 80036a6:	f000 bd86 	b.w	80041b6 <readGRAM+0xb92>
 80036aa:	bf00      	nop
 80036ac:	200052ce 	.word	0x200052ce
 80036b0:	2000004a 	.word	0x2000004a
 80036b4:	200052d0 	.word	0x200052d0
 80036b8:	200052de 	.word	0x200052de
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 80036bc:	4ba0      	ldr	r3, [pc, #640]	; (8003940 <readGRAM+0x31c>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 80036c8:	4b9e      	ldr	r3, [pc, #632]	; (8003944 <readGRAM+0x320>)
 80036ca:	8818      	ldrh	r0, [r3, #0]
 80036cc:	89fa      	ldrh	r2, [r7, #14]
 80036ce:	8bfb      	ldrh	r3, [r7, #30]
 80036d0:	4413      	add	r3, r2
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4619      	mov	r1, r3
 80036d6:	f7fe fb30 	bl	8001d3a <WriteCmdData>
            WriteCmdData(_MP, y + row);
 80036da:	4b9b      	ldr	r3, [pc, #620]	; (8003948 <readGRAM+0x324>)
 80036dc:	8818      	ldrh	r0, [r3, #0]
 80036de:	89ba      	ldrh	r2, [r7, #12]
 80036e0:	8c3b      	ldrh	r3, [r7, #32]
 80036e2:	4413      	add	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7fe fb27 	bl	8001d3a <WriteCmdData>
        }
        CS_ACTIVE;
 80036ec:	2101      	movs	r1, #1
 80036ee:	4897      	ldr	r0, [pc, #604]	; (800394c <readGRAM+0x328>)
 80036f0:	f7fe fa0e 	bl	8001b10 <PIN_LOW>
        WriteCmd(_MR);
 80036f4:	2110      	movs	r1, #16
 80036f6:	4896      	ldr	r0, [pc, #600]	; (8003950 <readGRAM+0x32c>)
 80036f8:	f7fe fa0a 	bl	8001b10 <PIN_LOW>
 80036fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29b      	uxth	r3, r3
 8003702:	777b      	strb	r3, [r7, #29]
 8003704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003706:	773b      	strb	r3, [r7, #28]
 8003708:	4b91      	ldr	r3, [pc, #580]	; (8003950 <readGRAM+0x32c>)
 800370a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800370e:	619a      	str	r2, [r3, #24]
 8003710:	4b8e      	ldr	r3, [pc, #568]	; (800394c <readGRAM+0x328>)
 8003712:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8003716:	619a      	str	r2, [r3, #24]
 8003718:	4b8e      	ldr	r3, [pc, #568]	; (8003954 <readGRAM+0x330>)
 800371a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800371e:	619a      	str	r2, [r3, #24]
 8003720:	7f7b      	ldrb	r3, [r7, #29]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8003728:	7f7b      	ldrb	r3, [r7, #29]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	431a      	orrs	r2, r3
 8003732:	7f7b      	ldrb	r3, [r7, #29]
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373a:	431a      	orrs	r2, r3
 800373c:	4b84      	ldr	r3, [pc, #528]	; (8003950 <readGRAM+0x32c>)
 800373e:	619a      	str	r2, [r3, #24]
 8003740:	7f7b      	ldrb	r3, [r7, #29]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003748:	7f7b      	ldrb	r3, [r7, #29]
 800374a:	105b      	asrs	r3, r3, #1
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	431a      	orrs	r2, r3
 8003752:	7f7b      	ldrb	r3, [r7, #29]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	431a      	orrs	r2, r3
 800375c:	7f7b      	ldrb	r3, [r7, #29]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	431a      	orrs	r2, r3
 8003764:	4b79      	ldr	r3, [pc, #484]	; (800394c <readGRAM+0x328>)
 8003766:	619a      	str	r2, [r3, #24]
 8003768:	7f7b      	ldrb	r3, [r7, #29]
 800376a:	019b      	lsls	r3, r3, #6
 800376c:	4a79      	ldr	r2, [pc, #484]	; (8003954 <readGRAM+0x330>)
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	6193      	str	r3, [r2, #24]
 8003774:	2102      	movs	r1, #2
 8003776:	4876      	ldr	r0, [pc, #472]	; (8003950 <readGRAM+0x32c>)
 8003778:	f7fe f9ca 	bl	8001b10 <PIN_LOW>
 800377c:	2102      	movs	r1, #2
 800377e:	4874      	ldr	r0, [pc, #464]	; (8003950 <readGRAM+0x32c>)
 8003780:	f7fe f9c6 	bl	8001b10 <PIN_LOW>
 8003784:	2102      	movs	r1, #2
 8003786:	4872      	ldr	r0, [pc, #456]	; (8003950 <readGRAM+0x32c>)
 8003788:	f7fe f9c2 	bl	8001b10 <PIN_LOW>
 800378c:	2102      	movs	r1, #2
 800378e:	4870      	ldr	r0, [pc, #448]	; (8003950 <readGRAM+0x32c>)
 8003790:	f7fe f9ce 	bl	8001b30 <PIN_HIGH>
 8003794:	2102      	movs	r1, #2
 8003796:	486e      	ldr	r0, [pc, #440]	; (8003950 <readGRAM+0x32c>)
 8003798:	f7fe f9ca 	bl	8001b30 <PIN_HIGH>
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <readGRAM+0x32c>)
 800379e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80037a2:	619a      	str	r2, [r3, #24]
 80037a4:	4b69      	ldr	r3, [pc, #420]	; (800394c <readGRAM+0x328>)
 80037a6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80037aa:	619a      	str	r2, [r3, #24]
 80037ac:	4b69      	ldr	r3, [pc, #420]	; (8003954 <readGRAM+0x330>)
 80037ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037b2:	619a      	str	r2, [r3, #24]
 80037b4:	7f3b      	ldrb	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80037bc:	7f3b      	ldrb	r3, [r7, #28]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	431a      	orrs	r2, r3
 80037c6:	7f3b      	ldrb	r3, [r7, #28]
 80037c8:	025b      	lsls	r3, r3, #9
 80037ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ce:	431a      	orrs	r2, r3
 80037d0:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <readGRAM+0x32c>)
 80037d2:	619a      	str	r2, [r3, #24]
 80037d4:	7f3b      	ldrb	r3, [r7, #28]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80037dc:	7f3b      	ldrb	r3, [r7, #28]
 80037de:	105b      	asrs	r3, r3, #1
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	7f3b      	ldrb	r3, [r7, #28]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	431a      	orrs	r2, r3
 80037f0:	7f3b      	ldrb	r3, [r7, #28]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	431a      	orrs	r2, r3
 80037f8:	4b54      	ldr	r3, [pc, #336]	; (800394c <readGRAM+0x328>)
 80037fa:	619a      	str	r2, [r3, #24]
 80037fc:	7f3b      	ldrb	r3, [r7, #28]
 80037fe:	019b      	lsls	r3, r3, #6
 8003800:	4a54      	ldr	r2, [pc, #336]	; (8003954 <readGRAM+0x330>)
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	2102      	movs	r1, #2
 800380a:	4851      	ldr	r0, [pc, #324]	; (8003950 <readGRAM+0x32c>)
 800380c:	f7fe f980 	bl	8001b10 <PIN_LOW>
 8003810:	2102      	movs	r1, #2
 8003812:	484f      	ldr	r0, [pc, #316]	; (8003950 <readGRAM+0x32c>)
 8003814:	f7fe f97c 	bl	8001b10 <PIN_LOW>
 8003818:	2102      	movs	r1, #2
 800381a:	484d      	ldr	r0, [pc, #308]	; (8003950 <readGRAM+0x32c>)
 800381c:	f7fe f978 	bl	8001b10 <PIN_LOW>
 8003820:	2102      	movs	r1, #2
 8003822:	484b      	ldr	r0, [pc, #300]	; (8003950 <readGRAM+0x32c>)
 8003824:	f7fe f984 	bl	8001b30 <PIN_HIGH>
 8003828:	2102      	movs	r1, #2
 800382a:	4849      	ldr	r0, [pc, #292]	; (8003950 <readGRAM+0x32c>)
 800382c:	f7fe f980 	bl	8001b30 <PIN_HIGH>
 8003830:	2110      	movs	r1, #16
 8003832:	4847      	ldr	r0, [pc, #284]	; (8003950 <readGRAM+0x32c>)
 8003834:	f7fe f97c 	bl	8001b30 <PIN_HIGH>
        setReadDir();
 8003838:	f7fe faa4 	bl	8001d84 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 800383c:	4b40      	ldr	r3, [pc, #256]	; (8003940 <readGRAM+0x31c>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 816d 	bne.w	8003b24 <readGRAM+0x500>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <readGRAM+0x31c>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <readGRAM+0x23e>
 8003856:	4b40      	ldr	r3, [pc, #256]	; (8003958 <readGRAM+0x334>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	f241 2289 	movw	r2, #4745	; 0x1289
 800385e:	4293      	cmp	r3, r2
 8003860:	d17c      	bne.n	800395c <readGRAM+0x338>
            READ_8(r);
 8003862:	2101      	movs	r1, #1
 8003864:	483a      	ldr	r0, [pc, #232]	; (8003950 <readGRAM+0x32c>)
 8003866:	f7fe f963 	bl	8001b30 <PIN_HIGH>
 800386a:	2101      	movs	r1, #1
 800386c:	4838      	ldr	r0, [pc, #224]	; (8003950 <readGRAM+0x32c>)
 800386e:	f7fe f94f 	bl	8001b10 <PIN_LOW>
 8003872:	2101      	movs	r1, #1
 8003874:	4836      	ldr	r0, [pc, #216]	; (8003950 <readGRAM+0x32c>)
 8003876:	f7fe f94b 	bl	8001b10 <PIN_LOW>
 800387a:	2101      	movs	r1, #1
 800387c:	4834      	ldr	r0, [pc, #208]	; (8003950 <readGRAM+0x32c>)
 800387e:	f7fe f947 	bl	8001b10 <PIN_LOW>
 8003882:	2101      	movs	r1, #1
 8003884:	4832      	ldr	r0, [pc, #200]	; (8003950 <readGRAM+0x32c>)
 8003886:	f7fe f943 	bl	8001b10 <PIN_LOW>
 800388a:	2101      	movs	r1, #1
 800388c:	4830      	ldr	r0, [pc, #192]	; (8003950 <readGRAM+0x32c>)
 800388e:	f7fe f93f 	bl	8001b10 <PIN_LOW>
 8003892:	2101      	movs	r1, #1
 8003894:	482e      	ldr	r0, [pc, #184]	; (8003950 <readGRAM+0x32c>)
 8003896:	f7fe f93b 	bl	8001b10 <PIN_LOW>
 800389a:	2101      	movs	r1, #1
 800389c:	482c      	ldr	r0, [pc, #176]	; (8003950 <readGRAM+0x32c>)
 800389e:	f7fe f937 	bl	8001b10 <PIN_LOW>
 80038a2:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <readGRAM+0x32c>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b26      	ldr	r3, [pc, #152]	; (800394c <readGRAM+0x328>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4313      	orrs	r3, r2
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <readGRAM+0x328>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <readGRAM+0x328>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <readGRAM+0x328>)
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <readGRAM+0x32c>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	b2db      	uxtb	r3, r3
 8003906:	4313      	orrs	r3, r2
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <readGRAM+0x330>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	b2db      	uxtb	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b2da      	uxtb	r2, r3
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <readGRAM+0x32c>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	0a5b      	lsrs	r3, r3, #9
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4313      	orrs	r3, r2
 800392c:	75fb      	strb	r3, [r7, #23]
 800392e:	2101      	movs	r1, #1
 8003930:	4807      	ldr	r0, [pc, #28]	; (8003950 <readGRAM+0x32c>)
 8003932:	f7fe f8fd 	bl	8001b30 <PIN_HIGH>
 8003936:	2101      	movs	r1, #1
 8003938:	4805      	ldr	r0, [pc, #20]	; (8003950 <readGRAM+0x32c>)
 800393a:	f7fe f8f9 	bl	8001b30 <PIN_HIGH>
 800393e:	e0f1      	b.n	8003b24 <readGRAM+0x500>
 8003940:	200052d0 	.word	0x200052d0
 8003944:	200052d8 	.word	0x200052d8
 8003948:	200052d6 	.word	0x200052d6
 800394c:	40020400 	.word	0x40020400
 8003950:	40020000 	.word	0x40020000
 8003954:	40020800 	.word	0x40020800
 8003958:	200052de 	.word	0x200052de
        } else {
            READ_16(dummy);
 800395c:	2101      	movs	r1, #1
 800395e:	48ac      	ldr	r0, [pc, #688]	; (8003c10 <readGRAM+0x5ec>)
 8003960:	f7fe f8e6 	bl	8001b30 <PIN_HIGH>
 8003964:	2101      	movs	r1, #1
 8003966:	48aa      	ldr	r0, [pc, #680]	; (8003c10 <readGRAM+0x5ec>)
 8003968:	f7fe f8d2 	bl	8001b10 <PIN_LOW>
 800396c:	2101      	movs	r1, #1
 800396e:	48a8      	ldr	r0, [pc, #672]	; (8003c10 <readGRAM+0x5ec>)
 8003970:	f7fe f8ce 	bl	8001b10 <PIN_LOW>
 8003974:	2101      	movs	r1, #1
 8003976:	48a6      	ldr	r0, [pc, #664]	; (8003c10 <readGRAM+0x5ec>)
 8003978:	f7fe f8ca 	bl	8001b10 <PIN_LOW>
 800397c:	2101      	movs	r1, #1
 800397e:	48a4      	ldr	r0, [pc, #656]	; (8003c10 <readGRAM+0x5ec>)
 8003980:	f7fe f8c6 	bl	8001b10 <PIN_LOW>
 8003984:	2101      	movs	r1, #1
 8003986:	48a2      	ldr	r0, [pc, #648]	; (8003c10 <readGRAM+0x5ec>)
 8003988:	f7fe f8c2 	bl	8001b10 <PIN_LOW>
 800398c:	2101      	movs	r1, #1
 800398e:	48a0      	ldr	r0, [pc, #640]	; (8003c10 <readGRAM+0x5ec>)
 8003990:	f7fe f8be 	bl	8001b10 <PIN_LOW>
 8003994:	2101      	movs	r1, #1
 8003996:	489e      	ldr	r0, [pc, #632]	; (8003c10 <readGRAM+0x5ec>)
 8003998:	f7fe f8ba 	bl	8001b10 <PIN_LOW>
 800399c:	4b9c      	ldr	r3, [pc, #624]	; (8003c10 <readGRAM+0x5ec>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4b9a      	ldr	r3, [pc, #616]	; (8003c14 <readGRAM+0x5f0>)
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b95      	ldr	r3, [pc, #596]	; (8003c14 <readGRAM+0x5f0>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4313      	orrs	r3, r2
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	4b90      	ldr	r3, [pc, #576]	; (8003c14 <readGRAM+0x5f0>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4313      	orrs	r3, r2
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4b8c      	ldr	r3, [pc, #560]	; (8003c14 <readGRAM+0x5f0>)
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	4313      	orrs	r3, r2
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <readGRAM+0x5ec>)
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	4313      	orrs	r3, r2
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	4b84      	ldr	r3, [pc, #528]	; (8003c18 <readGRAM+0x5f4>)
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	4313      	orrs	r3, r2
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b7e      	ldr	r3, [pc, #504]	; (8003c10 <readGRAM+0x5ec>)
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	0a5b      	lsrs	r3, r3, #9
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4313      	orrs	r3, r2
 8003a26:	76fb      	strb	r3, [r7, #27]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	4879      	ldr	r0, [pc, #484]	; (8003c10 <readGRAM+0x5ec>)
 8003a2c:	f7fe f880 	bl	8001b30 <PIN_HIGH>
 8003a30:	2101      	movs	r1, #1
 8003a32:	4877      	ldr	r0, [pc, #476]	; (8003c10 <readGRAM+0x5ec>)
 8003a34:	f7fe f87c 	bl	8001b30 <PIN_HIGH>
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4875      	ldr	r0, [pc, #468]	; (8003c10 <readGRAM+0x5ec>)
 8003a3c:	f7fe f878 	bl	8001b30 <PIN_HIGH>
 8003a40:	2101      	movs	r1, #1
 8003a42:	4873      	ldr	r0, [pc, #460]	; (8003c10 <readGRAM+0x5ec>)
 8003a44:	f7fe f864 	bl	8001b10 <PIN_LOW>
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4871      	ldr	r0, [pc, #452]	; (8003c10 <readGRAM+0x5ec>)
 8003a4c:	f7fe f860 	bl	8001b10 <PIN_LOW>
 8003a50:	2101      	movs	r1, #1
 8003a52:	486f      	ldr	r0, [pc, #444]	; (8003c10 <readGRAM+0x5ec>)
 8003a54:	f7fe f85c 	bl	8001b10 <PIN_LOW>
 8003a58:	2101      	movs	r1, #1
 8003a5a:	486d      	ldr	r0, [pc, #436]	; (8003c10 <readGRAM+0x5ec>)
 8003a5c:	f7fe f858 	bl	8001b10 <PIN_LOW>
 8003a60:	2101      	movs	r1, #1
 8003a62:	486b      	ldr	r0, [pc, #428]	; (8003c10 <readGRAM+0x5ec>)
 8003a64:	f7fe f854 	bl	8001b10 <PIN_LOW>
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4869      	ldr	r0, [pc, #420]	; (8003c10 <readGRAM+0x5ec>)
 8003a6c:	f7fe f850 	bl	8001b10 <PIN_LOW>
 8003a70:	2101      	movs	r1, #1
 8003a72:	4867      	ldr	r0, [pc, #412]	; (8003c10 <readGRAM+0x5ec>)
 8003a74:	f7fe f84c 	bl	8001b10 <PIN_LOW>
 8003a78:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <readGRAM+0x5ec>)
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	4b63      	ldr	r3, [pc, #396]	; (8003c14 <readGRAM+0x5f0>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b5e      	ldr	r3, [pc, #376]	; (8003c14 <readGRAM+0x5f0>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <readGRAM+0x5f0>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4313      	orrs	r3, r2
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	4b55      	ldr	r3, [pc, #340]	; (8003c14 <readGRAM+0x5f0>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	4b50      	ldr	r3, [pc, #320]	; (8003c10 <readGRAM+0x5ec>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <readGRAM+0x5f4>)
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4313      	orrs	r3, r2
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <readGRAM+0x5ec>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	0a5b      	lsrs	r3, r3, #9
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	833b      	strh	r3, [r7, #24]
 8003b04:	2101      	movs	r1, #1
 8003b06:	4842      	ldr	r0, [pc, #264]	; (8003c10 <readGRAM+0x5ec>)
 8003b08:	f7fe f812 	bl	8001b30 <PIN_HIGH>
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4840      	ldr	r0, [pc, #256]	; (8003c10 <readGRAM+0x5ec>)
 8003b10:	f7fe f80e 	bl	8001b30 <PIN_HIGH>
 8003b14:	7efb      	ldrb	r3, [r7, #27]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	b21a      	sxth	r2, r3
 8003b1a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8003b24:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <readGRAM+0x5f8>)
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	f241 5211 	movw	r2, #5393	; 0x1511
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	f040 830f 	bne.w	8004150 <readGRAM+0xb2c>
 8003b32:	2101      	movs	r1, #1
 8003b34:	4836      	ldr	r0, [pc, #216]	; (8003c10 <readGRAM+0x5ec>)
 8003b36:	f7fd fffb 	bl	8001b30 <PIN_HIGH>
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4834      	ldr	r0, [pc, #208]	; (8003c10 <readGRAM+0x5ec>)
 8003b3e:	f7fd ffe7 	bl	8001b10 <PIN_LOW>
 8003b42:	2101      	movs	r1, #1
 8003b44:	4832      	ldr	r0, [pc, #200]	; (8003c10 <readGRAM+0x5ec>)
 8003b46:	f7fd ffe3 	bl	8001b10 <PIN_LOW>
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4830      	ldr	r0, [pc, #192]	; (8003c10 <readGRAM+0x5ec>)
 8003b4e:	f7fd ffdf 	bl	8001b10 <PIN_LOW>
 8003b52:	2101      	movs	r1, #1
 8003b54:	482e      	ldr	r0, [pc, #184]	; (8003c10 <readGRAM+0x5ec>)
 8003b56:	f7fd ffdb 	bl	8001b10 <PIN_LOW>
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	482c      	ldr	r0, [pc, #176]	; (8003c10 <readGRAM+0x5ec>)
 8003b5e:	f7fd ffd7 	bl	8001b10 <PIN_LOW>
 8003b62:	2101      	movs	r1, #1
 8003b64:	482a      	ldr	r0, [pc, #168]	; (8003c10 <readGRAM+0x5ec>)
 8003b66:	f7fd ffd3 	bl	8001b10 <PIN_LOW>
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4828      	ldr	r0, [pc, #160]	; (8003c10 <readGRAM+0x5ec>)
 8003b6e:	f7fd ffcf 	bl	8001b10 <PIN_LOW>
 8003b72:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <readGRAM+0x5ec>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <readGRAM+0x5f0>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <readGRAM+0x5f0>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <readGRAM+0x5f0>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <readGRAM+0x5f0>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <readGRAM+0x5ec>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <readGRAM+0x5f4>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4313      	orrs	r3, r2
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <readGRAM+0x5ec>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	0a5b      	lsrs	r3, r3, #9
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	75fb      	strb	r3, [r7, #23]
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4803      	ldr	r0, [pc, #12]	; (8003c10 <readGRAM+0x5ec>)
 8003c02:	f7fd ff95 	bl	8001b30 <PIN_HIGH>
 8003c06:	2101      	movs	r1, #1
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <readGRAM+0x5ec>)
 8003c0a:	f7fd ff91 	bl	8001b30 <PIN_HIGH>
        while (n)
 8003c0e:	e29f      	b.n	8004150 <readGRAM+0xb2c>
 8003c10:	40020000 	.word	0x40020000
 8003c14:	40020400 	.word	0x40020400
 8003c18:	40020800 	.word	0x40020800
 8003c1c:	200052de 	.word	0x200052de
        {
            if (_lcd_capable & READ_24BITS)
 8003c20:	4bab      	ldr	r3, [pc, #684]	; (8003ed0 <readGRAM+0x8ac>)
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 816b 	beq.w	8003f04 <readGRAM+0x8e0>
            {
                READ_8(r);
 8003c2e:	2101      	movs	r1, #1
 8003c30:	48a8      	ldr	r0, [pc, #672]	; (8003ed4 <readGRAM+0x8b0>)
 8003c32:	f7fd ff7d 	bl	8001b30 <PIN_HIGH>
 8003c36:	2101      	movs	r1, #1
 8003c38:	48a6      	ldr	r0, [pc, #664]	; (8003ed4 <readGRAM+0x8b0>)
 8003c3a:	f7fd ff69 	bl	8001b10 <PIN_LOW>
 8003c3e:	2101      	movs	r1, #1
 8003c40:	48a4      	ldr	r0, [pc, #656]	; (8003ed4 <readGRAM+0x8b0>)
 8003c42:	f7fd ff65 	bl	8001b10 <PIN_LOW>
 8003c46:	2101      	movs	r1, #1
 8003c48:	48a2      	ldr	r0, [pc, #648]	; (8003ed4 <readGRAM+0x8b0>)
 8003c4a:	f7fd ff61 	bl	8001b10 <PIN_LOW>
 8003c4e:	2101      	movs	r1, #1
 8003c50:	48a0      	ldr	r0, [pc, #640]	; (8003ed4 <readGRAM+0x8b0>)
 8003c52:	f7fd ff5d 	bl	8001b10 <PIN_LOW>
 8003c56:	2101      	movs	r1, #1
 8003c58:	489e      	ldr	r0, [pc, #632]	; (8003ed4 <readGRAM+0x8b0>)
 8003c5a:	f7fd ff59 	bl	8001b10 <PIN_LOW>
 8003c5e:	2101      	movs	r1, #1
 8003c60:	489c      	ldr	r0, [pc, #624]	; (8003ed4 <readGRAM+0x8b0>)
 8003c62:	f7fd ff55 	bl	8001b10 <PIN_LOW>
 8003c66:	2101      	movs	r1, #1
 8003c68:	489a      	ldr	r0, [pc, #616]	; (8003ed4 <readGRAM+0x8b0>)
 8003c6a:	f7fd ff51 	bl	8001b10 <PIN_LOW>
 8003c6e:	4b99      	ldr	r3, [pc, #612]	; (8003ed4 <readGRAM+0x8b0>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	4b96      	ldr	r3, [pc, #600]	; (8003ed8 <readGRAM+0x8b4>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <readGRAM+0x8b4>)
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <readGRAM+0x8b4>)
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <readGRAM+0x8b4>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	4b83      	ldr	r3, [pc, #524]	; (8003ed4 <readGRAM+0x8b0>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b81      	ldr	r3, [pc, #516]	; (8003edc <readGRAM+0x8b8>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	099b      	lsrs	r3, r3, #6
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	4b7a      	ldr	r3, [pc, #488]	; (8003ed4 <readGRAM+0x8b0>)
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	0a5b      	lsrs	r3, r3, #9
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	75fb      	strb	r3, [r7, #23]
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4875      	ldr	r0, [pc, #468]	; (8003ed4 <readGRAM+0x8b0>)
 8003cfe:	f7fd ff17 	bl	8001b30 <PIN_HIGH>
 8003d02:	2101      	movs	r1, #1
 8003d04:	4873      	ldr	r0, [pc, #460]	; (8003ed4 <readGRAM+0x8b0>)
 8003d06:	f7fd ff13 	bl	8001b30 <PIN_HIGH>
                READ_8(g);
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	4871      	ldr	r0, [pc, #452]	; (8003ed4 <readGRAM+0x8b0>)
 8003d0e:	f7fd ff0f 	bl	8001b30 <PIN_HIGH>
 8003d12:	2101      	movs	r1, #1
 8003d14:	486f      	ldr	r0, [pc, #444]	; (8003ed4 <readGRAM+0x8b0>)
 8003d16:	f7fd fefb 	bl	8001b10 <PIN_LOW>
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	486d      	ldr	r0, [pc, #436]	; (8003ed4 <readGRAM+0x8b0>)
 8003d1e:	f7fd fef7 	bl	8001b10 <PIN_LOW>
 8003d22:	2101      	movs	r1, #1
 8003d24:	486b      	ldr	r0, [pc, #428]	; (8003ed4 <readGRAM+0x8b0>)
 8003d26:	f7fd fef3 	bl	8001b10 <PIN_LOW>
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4869      	ldr	r0, [pc, #420]	; (8003ed4 <readGRAM+0x8b0>)
 8003d2e:	f7fd feef 	bl	8001b10 <PIN_LOW>
 8003d32:	2101      	movs	r1, #1
 8003d34:	4867      	ldr	r0, [pc, #412]	; (8003ed4 <readGRAM+0x8b0>)
 8003d36:	f7fd feeb 	bl	8001b10 <PIN_LOW>
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4865      	ldr	r0, [pc, #404]	; (8003ed4 <readGRAM+0x8b0>)
 8003d3e:	f7fd fee7 	bl	8001b10 <PIN_LOW>
 8003d42:	2101      	movs	r1, #1
 8003d44:	4863      	ldr	r0, [pc, #396]	; (8003ed4 <readGRAM+0x8b0>)
 8003d46:	f7fd fee3 	bl	8001b10 <PIN_LOW>
 8003d4a:	4b62      	ldr	r3, [pc, #392]	; (8003ed4 <readGRAM+0x8b0>)
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <readGRAM+0x8b4>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4b5b      	ldr	r3, [pc, #364]	; (8003ed8 <readGRAM+0x8b4>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b56      	ldr	r3, [pc, #344]	; (8003ed8 <readGRAM+0x8b4>)
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	085b      	lsrs	r3, r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <readGRAM+0x8b4>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <readGRAM+0x8b0>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	4313      	orrs	r3, r2
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <readGRAM+0x8b8>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <readGRAM+0x8b0>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	0a5b      	lsrs	r3, r3, #9
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	757b      	strb	r3, [r7, #21]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	483e      	ldr	r0, [pc, #248]	; (8003ed4 <readGRAM+0x8b0>)
 8003dda:	f7fd fea9 	bl	8001b30 <PIN_HIGH>
 8003dde:	2101      	movs	r1, #1
 8003de0:	483c      	ldr	r0, [pc, #240]	; (8003ed4 <readGRAM+0x8b0>)
 8003de2:	f7fd fea5 	bl	8001b30 <PIN_HIGH>
                READ_8(b);
 8003de6:	2101      	movs	r1, #1
 8003de8:	483a      	ldr	r0, [pc, #232]	; (8003ed4 <readGRAM+0x8b0>)
 8003dea:	f7fd fea1 	bl	8001b30 <PIN_HIGH>
 8003dee:	2101      	movs	r1, #1
 8003df0:	4838      	ldr	r0, [pc, #224]	; (8003ed4 <readGRAM+0x8b0>)
 8003df2:	f7fd fe8d 	bl	8001b10 <PIN_LOW>
 8003df6:	2101      	movs	r1, #1
 8003df8:	4836      	ldr	r0, [pc, #216]	; (8003ed4 <readGRAM+0x8b0>)
 8003dfa:	f7fd fe89 	bl	8001b10 <PIN_LOW>
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4834      	ldr	r0, [pc, #208]	; (8003ed4 <readGRAM+0x8b0>)
 8003e02:	f7fd fe85 	bl	8001b10 <PIN_LOW>
 8003e06:	2101      	movs	r1, #1
 8003e08:	4832      	ldr	r0, [pc, #200]	; (8003ed4 <readGRAM+0x8b0>)
 8003e0a:	f7fd fe81 	bl	8001b10 <PIN_LOW>
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4830      	ldr	r0, [pc, #192]	; (8003ed4 <readGRAM+0x8b0>)
 8003e12:	f7fd fe7d 	bl	8001b10 <PIN_LOW>
 8003e16:	2101      	movs	r1, #1
 8003e18:	482e      	ldr	r0, [pc, #184]	; (8003ed4 <readGRAM+0x8b0>)
 8003e1a:	f7fd fe79 	bl	8001b10 <PIN_LOW>
 8003e1e:	2101      	movs	r1, #1
 8003e20:	482c      	ldr	r0, [pc, #176]	; (8003ed4 <readGRAM+0x8b0>)
 8003e22:	f7fd fe75 	bl	8001b10 <PIN_LOW>
 8003e26:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <readGRAM+0x8b0>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <readGRAM+0x8b4>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <readGRAM+0x8b4>)
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <readGRAM+0x8b4>)
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <readGRAM+0x8b4>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <readGRAM+0x8b0>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <readGRAM+0x8b8>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <readGRAM+0x8b0>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	753b      	strb	r3, [r7, #20]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <readGRAM+0x8b0>)
 8003eb6:	f7fd fe3b 	bl	8001b30 <PIN_HIGH>
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <readGRAM+0x8b0>)
 8003ebe:	f7fd fe37 	bl	8001b30 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8003ec2:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <readGRAM+0x8ac>)
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <readGRAM+0x8ce>
 8003ece:	e007      	b.n	8003ee0 <readGRAM+0x8bc>
 8003ed0:	200052d0 	.word	0x200052d0
 8003ed4:	40020000 	.word	0x40020000
 8003ed8:	40020400 	.word	0x40020400
 8003edc:	40020800 	.word	0x40020800
                    ret = color565(b, g, r);
 8003ee0:	7dfa      	ldrb	r2, [r7, #23]
 8003ee2:	7d79      	ldrb	r1, [r7, #21]
 8003ee4:	7d3b      	ldrb	r3, [r7, #20]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd fee9 	bl	8001cbe <color565>
 8003eec:	4603      	mov	r3, r0
 8003eee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ef0:	e113      	b.n	800411a <readGRAM+0xaf6>
                else
                    ret = color565(r, g, b);
 8003ef2:	7d3a      	ldrb	r2, [r7, #20]
 8003ef4:	7d79      	ldrb	r1, [r7, #21]
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fd fee0 	bl	8001cbe <color565>
 8003efe:	4603      	mov	r3, r0
 8003f00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f02:	e10a      	b.n	800411a <readGRAM+0xaf6>
            } else
            {
                READ_16(ret);
 8003f04:	2101      	movs	r1, #1
 8003f06:	4895      	ldr	r0, [pc, #596]	; (800415c <readGRAM+0xb38>)
 8003f08:	f7fd fe12 	bl	8001b30 <PIN_HIGH>
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4893      	ldr	r0, [pc, #588]	; (800415c <readGRAM+0xb38>)
 8003f10:	f7fd fdfe 	bl	8001b10 <PIN_LOW>
 8003f14:	2101      	movs	r1, #1
 8003f16:	4891      	ldr	r0, [pc, #580]	; (800415c <readGRAM+0xb38>)
 8003f18:	f7fd fdfa 	bl	8001b10 <PIN_LOW>
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	488f      	ldr	r0, [pc, #572]	; (800415c <readGRAM+0xb38>)
 8003f20:	f7fd fdf6 	bl	8001b10 <PIN_LOW>
 8003f24:	2101      	movs	r1, #1
 8003f26:	488d      	ldr	r0, [pc, #564]	; (800415c <readGRAM+0xb38>)
 8003f28:	f7fd fdf2 	bl	8001b10 <PIN_LOW>
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	488b      	ldr	r0, [pc, #556]	; (800415c <readGRAM+0xb38>)
 8003f30:	f7fd fdee 	bl	8001b10 <PIN_LOW>
 8003f34:	2101      	movs	r1, #1
 8003f36:	4889      	ldr	r0, [pc, #548]	; (800415c <readGRAM+0xb38>)
 8003f38:	f7fd fdea 	bl	8001b10 <PIN_LOW>
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4887      	ldr	r0, [pc, #540]	; (800415c <readGRAM+0xb38>)
 8003f40:	f7fd fde6 	bl	8001b10 <PIN_LOW>
 8003f44:	4b85      	ldr	r3, [pc, #532]	; (800415c <readGRAM+0xb38>)
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4b83      	ldr	r3, [pc, #524]	; (8004160 <readGRAM+0xb3c>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	4b7e      	ldr	r3, [pc, #504]	; (8004160 <readGRAM+0xb3c>)
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	4313      	orrs	r3, r2
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4b79      	ldr	r3, [pc, #484]	; (8004160 <readGRAM+0xb3c>)
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4b75      	ldr	r3, [pc, #468]	; (8004160 <readGRAM+0xb3c>)
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b70      	ldr	r3, [pc, #448]	; (800415c <readGRAM+0xb38>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <readGRAM+0xb40>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4b67      	ldr	r3, [pc, #412]	; (800415c <readGRAM+0xb38>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	0a5b      	lsrs	r3, r3, #9
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	75bb      	strb	r3, [r7, #22]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4862      	ldr	r0, [pc, #392]	; (800415c <readGRAM+0xb38>)
 8003fd4:	f7fd fdac 	bl	8001b30 <PIN_HIGH>
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4860      	ldr	r0, [pc, #384]	; (800415c <readGRAM+0xb38>)
 8003fdc:	f7fd fda8 	bl	8001b30 <PIN_HIGH>
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	485e      	ldr	r0, [pc, #376]	; (800415c <readGRAM+0xb38>)
 8003fe4:	f7fd fda4 	bl	8001b30 <PIN_HIGH>
 8003fe8:	2101      	movs	r1, #1
 8003fea:	485c      	ldr	r0, [pc, #368]	; (800415c <readGRAM+0xb38>)
 8003fec:	f7fd fd90 	bl	8001b10 <PIN_LOW>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	485a      	ldr	r0, [pc, #360]	; (800415c <readGRAM+0xb38>)
 8003ff4:	f7fd fd8c 	bl	8001b10 <PIN_LOW>
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4858      	ldr	r0, [pc, #352]	; (800415c <readGRAM+0xb38>)
 8003ffc:	f7fd fd88 	bl	8001b10 <PIN_LOW>
 8004000:	2101      	movs	r1, #1
 8004002:	4856      	ldr	r0, [pc, #344]	; (800415c <readGRAM+0xb38>)
 8004004:	f7fd fd84 	bl	8001b10 <PIN_LOW>
 8004008:	2101      	movs	r1, #1
 800400a:	4854      	ldr	r0, [pc, #336]	; (800415c <readGRAM+0xb38>)
 800400c:	f7fd fd80 	bl	8001b10 <PIN_LOW>
 8004010:	2101      	movs	r1, #1
 8004012:	4852      	ldr	r0, [pc, #328]	; (800415c <readGRAM+0xb38>)
 8004014:	f7fd fd7c 	bl	8001b10 <PIN_LOW>
 8004018:	2101      	movs	r1, #1
 800401a:	4850      	ldr	r0, [pc, #320]	; (800415c <readGRAM+0xb38>)
 800401c:	f7fd fd78 	bl	8001b10 <PIN_LOW>
 8004020:	4b4e      	ldr	r3, [pc, #312]	; (800415c <readGRAM+0xb38>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	b29a      	uxth	r2, r3
 800402e:	4b4c      	ldr	r3, [pc, #304]	; (8004160 <readGRAM+0xb3c>)
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	b29b      	uxth	r3, r3
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	b29b      	uxth	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	b29a      	uxth	r2, r3
 8004040:	4b47      	ldr	r3, [pc, #284]	; (8004160 <readGRAM+0xb3c>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	b29b      	uxth	r3, r3
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	b29b      	uxth	r3, r3
 8004050:	4313      	orrs	r3, r2
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b42      	ldr	r3, [pc, #264]	; (8004160 <readGRAM+0xb3c>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	b29b      	uxth	r3, r3
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	b29b      	uxth	r3, r3
 8004062:	4313      	orrs	r3, r2
 8004064:	b29a      	uxth	r2, r3
 8004066:	4b3e      	ldr	r3, [pc, #248]	; (8004160 <readGRAM+0xb3c>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	4313      	orrs	r3, r2
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <readGRAM+0xb38>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	b29b      	uxth	r3, r3
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	b29b      	uxth	r3, r3
 8004084:	4313      	orrs	r3, r2
 8004086:	b29a      	uxth	r2, r3
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <readGRAM+0xb40>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	099b      	lsrs	r3, r3, #6
 800408e:	b29b      	uxth	r3, r3
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	b29b      	uxth	r3, r3
 8004096:	4313      	orrs	r3, r2
 8004098:	b29a      	uxth	r2, r3
 800409a:	4b30      	ldr	r3, [pc, #192]	; (800415c <readGRAM+0xb38>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4313      	orrs	r3, r2
 80040aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040ac:	2101      	movs	r1, #1
 80040ae:	482b      	ldr	r0, [pc, #172]	; (800415c <readGRAM+0xb38>)
 80040b0:	f7fd fd3e 	bl	8001b30 <PIN_HIGH>
 80040b4:	2101      	movs	r1, #1
 80040b6:	4829      	ldr	r0, [pc, #164]	; (800415c <readGRAM+0xb38>)
 80040b8:	f7fd fd3a 	bl	8001b30 <PIN_HIGH>
 80040bc:	7dbb      	ldrb	r3, [r7, #22]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	b21a      	sxth	r2, r3
 80040c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80040c6:	4313      	orrs	r3, r2
 80040c8:	b21b      	sxth	r3, r3
 80040ca:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <readGRAM+0xb44>)
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <readGRAM+0xac8>
                    ret = (ret >> 8) | (ret << 8);
 80040d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	b29b      	uxth	r3, r3
 80040de:	b21a      	sxth	r2, r3
 80040e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	4313      	orrs	r3, r2
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 80040ec:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <readGRAM+0xb44>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <readGRAM+0xaf6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 80040f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80040fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004100:	b21a      	sxth	r2, r3
 8004102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004104:	0adb      	lsrs	r3, r3, #11
 8004106:	b29b      	uxth	r3, r3
 8004108:	b21b      	sxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b21a      	sxth	r2, r3
 800410e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004110:	02db      	lsls	r3, r3, #11
 8004112:	b21b      	sxth	r3, r3
 8004114:	4313      	orrs	r3, r2
 8004116:	b21b      	sxth	r3, r3
 8004118:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <readGRAM+0xb48>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <readGRAM+0xb0a>
 8004122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd fd79 	bl	8001c1c <color555_to_565>
 800412a:	4603      	mov	r3, r0
 800412c:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	60ba      	str	r2, [r7, #8]
 8004134:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004136:	801a      	strh	r2, [r3, #0]
            n--;
 8004138:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29b      	uxth	r3, r3
 8004142:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <readGRAM+0xb44>)
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00f      	beq.n	8004170 <readGRAM+0xb4c>
        while (n)
 8004150:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004154:	2b00      	cmp	r3, #0
 8004156:	f47f ad63 	bne.w	8003c20 <readGRAM+0x5fc>
 800415a:	e00a      	b.n	8004172 <readGRAM+0xb4e>
 800415c:	40020000 	.word	0x40020000
 8004160:	40020400 	.word	0x40020400
 8004164:	40020800 	.word	0x40020800
 8004168:	200052d0 	.word	0x200052d0
 800416c:	2000004b 	.word	0x2000004b
                break;
 8004170:	bf00      	nop
        }
        if (++col >= w) {
 8004172:	8bfb      	ldrh	r3, [r7, #30]
 8004174:	3301      	adds	r3, #1
 8004176:	b29b      	uxth	r3, r3
 8004178:	83fb      	strh	r3, [r7, #30]
 800417a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800417e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004182:	429a      	cmp	r2, r3
 8004184:	db0d      	blt.n	80041a2 <readGRAM+0xb7e>
            col = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800418a:	8c3b      	ldrh	r3, [r7, #32]
 800418c:	3301      	adds	r3, #1
 800418e:	b29b      	uxth	r3, r3
 8004190:	843b      	strh	r3, [r7, #32]
 8004192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004196:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800419a:	429a      	cmp	r2, r3
 800419c:	db01      	blt.n	80041a2 <readGRAM+0xb7e>
                row = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 80041a2:	2101      	movs	r1, #1
 80041a4:	4814      	ldr	r0, [pc, #80]	; (80041f8 <readGRAM+0xbd4>)
 80041a6:	f7fd fcc3 	bl	8001b30 <PIN_HIGH>
        CS_IDLE;
 80041aa:	2101      	movs	r1, #1
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <readGRAM+0xbd8>)
 80041ae:	f7fd fcbf 	bl	8001b30 <PIN_HIGH>
        setWriteDir();
 80041b2:	f7fd fe15 	bl	8001de0 <setWriteDir>
    while (n > 0) {
 80041b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f73f aa7e 	bgt.w	80036bc <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <readGRAM+0xbdc>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d110      	bne.n	80041ee <readGRAM+0xbca>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80041cc:	f7fd fcee 	bl	8001bac <width>
 80041d0:	4603      	mov	r3, r0
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	b21c      	sxth	r4, r3
 80041d8:	f7fd fcf4 	bl	8001bc4 <height>
 80041dc:	4603      	mov	r3, r0
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	b21b      	sxth	r3, r3
 80041e4:	4622      	mov	r2, r4
 80041e6:	2100      	movs	r1, #0
 80041e8:	2000      	movs	r0, #0
 80041ea:	f000 fb97 	bl	800491c <setAddrWindow>
    return 0;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	372c      	adds	r7, #44	; 0x2c
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}
 80041f8:	40020000 	.word	0x40020000
 80041fc:	40020400 	.word	0x40020400
 8004200:	200052d0 	.word	0x200052d0

08004204 <setRotation>:


void setRotation(uint8_t r)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 800420e:	4bab      	ldr	r3, [pc, #684]	; (80044bc <setRotation+0x2b8>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4ba8      	ldr	r3, [pc, #672]	; (80044c0 <setRotation+0x2bc>)
 800421e:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8004220:	4ba7      	ldr	r3, [pc, #668]	; (80044c0 <setRotation+0x2bc>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <setRotation+0x2e>
 800422c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004230:	e000      	b.n	8004234 <setRotation+0x30>
 8004232:	22f0      	movs	r2, #240	; 0xf0
 8004234:	4ba3      	ldr	r3, [pc, #652]	; (80044c4 <setRotation+0x2c0>)
 8004236:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8004238:	4ba1      	ldr	r3, [pc, #644]	; (80044c0 <setRotation+0x2bc>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <setRotation+0x44>
 8004244:	22f0      	movs	r2, #240	; 0xf0
 8004246:	e001      	b.n	800424c <setRotation+0x48>
 8004248:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800424c:	4b9e      	ldr	r3, [pc, #632]	; (80044c8 <setRotation+0x2c4>)
 800424e:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8004250:	4b9b      	ldr	r3, [pc, #620]	; (80044c0 <setRotation+0x2bc>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d817      	bhi.n	8004288 <setRotation+0x84>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <setRotation+0x5c>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004271 	.word	0x08004271
 8004264:	08004277 	.word	0x08004277
 8004268:	0800427d 	.word	0x0800427d
 800426c:	08004283 	.word	0x08004283
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8004270:	2348      	movs	r3, #72	; 0x48
 8004272:	72fb      	strb	r3, [r7, #11]
       break;
 8004274:	e008      	b.n	8004288 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 8004276:	2328      	movs	r3, #40	; 0x28
 8004278:	72fb      	strb	r3, [r7, #11]
       break;
 800427a:	e005      	b.n	8004288 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 800427c:	2398      	movs	r3, #152	; 0x98
 800427e:	72fb      	strb	r3, [r7, #11]
       break;
 8004280:	e002      	b.n	8004288 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8004282:	23f8      	movs	r3, #248	; 0xf8
 8004284:	72fb      	strb	r3, [r7, #11]
       break;
 8004286:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8004288:	4b90      	ldr	r3, [pc, #576]	; (80044cc <setRotation+0x2c8>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <setRotation+0x9c>
       val ^= 0x80;
 8004294:	7afb      	ldrb	r3, [r7, #11]
 8004296:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800429a:	43db      	mvns	r3, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 80042a0:	4b8a      	ldr	r3, [pc, #552]	; (80044cc <setRotation+0x2c8>)
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <setRotation+0xb2>
       val ^= 0x40;
 80042ac:	7afb      	ldrb	r3, [r7, #11]
 80042ae:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 80042b6:	4b85      	ldr	r3, [pc, #532]	; (80044cc <setRotation+0x2c8>)
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <setRotation+0xc8>
       val ^= 0x08;
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	f083 0308 	eor.w	r3, r3, #8
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80042cc:	4b7f      	ldr	r3, [pc, #508]	; (80044cc <setRotation+0x2c8>)
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8119 	beq.w	800450c <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80042da:	4b7d      	ldr	r3, [pc, #500]	; (80044d0 <setRotation+0x2cc>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	f646 0214 	movw	r2, #26644	; 0x6814
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d128      	bne.n	8004338 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	105b      	asrs	r3, r3, #1
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80042f6:	7afb      	ldrb	r3, [r7, #11]
 80042f8:	105b      	asrs	r3, r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004308:	b2db      	uxtb	r3, r3
 800430a:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8004310:	8a3b      	ldrh	r3, [r7, #16]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	89fb      	ldrh	r3, [r7, #14]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f043 0302 	orr.w	r3, r3, #2
 8004320:	b2db      	uxtb	r3, r3
 8004322:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 8004324:	233b      	movs	r3, #59	; 0x3b
 8004326:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	461a      	mov	r2, r3
 800432e:	2103      	movs	r1, #3
 8004330:	20b6      	movs	r0, #182	; 0xb6
 8004332:	f7fd ffd9 	bl	80022e8 <WriteCmdParamN>
           goto common_MC;
 8004336:	e0a4      	b.n	8004482 <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8004338:	4b65      	ldr	r3, [pc, #404]	; (80044d0 <setRotation+0x2cc>)
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	f641 1263 	movw	r2, #6499	; 0x1963
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <setRotation+0x158>
 8004344:	4b62      	ldr	r3, [pc, #392]	; (80044d0 <setRotation+0x2cc>)
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	f249 4281 	movw	r2, #38017	; 0x9481
 800434c:	4293      	cmp	r3, r2
 800434e:	d005      	beq.n	800435c <setRotation+0x158>
 8004350:	4b5f      	ldr	r3, [pc, #380]	; (80044d0 <setRotation+0x2cc>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	f241 5211 	movw	r2, #5393	; 0x1511
 8004358:	4293      	cmp	r3, r2
 800435a:	d139      	bne.n	80043d0 <setRotation+0x1cc>
           if (val & 0x80)
 800435c:	7afb      	ldrb	r3, [r7, #11]
 800435e:	b25b      	sxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	da04      	bge.n	800436e <setRotation+0x16a>
               val |= 0x01;    //GS
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 800436e:	7afb      	ldrb	r3, [r7, #11]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <setRotation+0x17e>
               val |= 0x02;    //SS
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	f043 0302 	orr.w	r3, r3, #2
 800437e:	b2db      	uxtb	r3, r3
 8004380:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8004382:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <setRotation+0x2cc>)
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	f641 1263 	movw	r2, #6499	; 0x1963
 800438a:	4293      	cmp	r3, r2
 800438c:	d104      	bne.n	8004398 <setRotation+0x194>
 800438e:	7afb      	ldrb	r3, [r7, #11]
 8004390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004394:	b2db      	uxtb	r3, r3
 8004396:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 8004398:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <setRotation+0x2cc>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	f249 4281 	movw	r2, #38017	; 0x9481
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d104      	bne.n	80043ae <setRotation+0x1aa>
 80043a4:	7afb      	ldrb	r3, [r7, #11]
 80043a6:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 80043ae:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <setRotation+0x2cc>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	f241 5211 	movw	r2, #5393	; 0x1511
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d160      	bne.n	800447c <setRotation+0x278>
               val &= ~0x10;   //remove ML
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	f023 0310 	bic.w	r3, r3, #16
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 80043c4:	7afb      	ldrb	r3, [r7, #11]
 80043c6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 80043ce:	e055      	b.n	800447c <setRotation+0x278>
      }
       else if (is8347) {
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <setRotation+0x2d0>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d053      	beq.n	8004480 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80043d8:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <setRotation+0x2d4>)
 80043da:	2202      	movs	r2, #2
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	4b3f      	ldr	r3, [pc, #252]	; (80044dc <setRotation+0x2d8>)
 80043e0:	2206      	movs	r2, #6
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <setRotation+0x2dc>)
 80043e6:	2222      	movs	r2, #34	; 0x22
 80043e8:	801a      	strh	r2, [r3, #0]
 80043ea:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <setRotation+0x2e0>)
 80043ec:	2202      	movs	r2, #2
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <setRotation+0x2e4>)
 80043f2:	2204      	movs	r2, #4
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	4b3d      	ldr	r3, [pc, #244]	; (80044ec <setRotation+0x2e8>)
 80043f8:	2206      	movs	r2, #6
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	4b3c      	ldr	r3, [pc, #240]	; (80044f0 <setRotation+0x2ec>)
 80043fe:	2208      	movs	r2, #8
 8004400:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8004402:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <setRotation+0x2cc>)
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	2b65      	cmp	r3, #101	; 0x65
 8004408:	d121      	bne.n	800444e <setRotation+0x24a>
               val |= 0x01;    //GS=1
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8004414:	7afb      	ldrb	r3, [r7, #11]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <setRotation+0x226>
 800441e:	7afb      	ldrb	r3, [r7, #11]
 8004420:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 8004424:	43db      	mvns	r3, r3
 8004426:	b2db      	uxtb	r3, r3
 8004428:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d006      	beq.n	8004442 <setRotation+0x23e>
 8004434:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <setRotation+0x2d4>)
 8004436:	2282      	movs	r2, #130	; 0x82
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	4b28      	ldr	r3, [pc, #160]	; (80044dc <setRotation+0x2d8>)
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e005      	b.n	800444e <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 8004442:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <setRotation+0x2d4>)
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	4b24      	ldr	r3, [pc, #144]	; (80044dc <setRotation+0x2d8>)
 800444a:	2282      	movs	r2, #130	; 0x82
 800444c:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <setRotation+0x2cc>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	f245 2252 	movw	r2, #21074	; 0x5252
 8004456:	4293      	cmp	r3, r2
 8004458:	d129      	bne.n	80044ae <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 800445a:	7afb      	ldrb	r3, [r7, #11]
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	b2db      	uxtb	r3, r3
 8004462:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 8004464:	7afb      	ldrb	r3, [r7, #11]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01f      	beq.n	80044ae <setRotation+0x2aa>
 800446e:	7afb      	ldrb	r3, [r7, #11]
 8004470:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 8004474:	43db      	mvns	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 800447a:	e018      	b.n	80044ae <setRotation+0x2aa>
           goto common_MC;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <setRotation+0x27e>
       }
     common_MC:
 8004480:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <setRotation+0x2d4>)
 8004484:	222a      	movs	r2, #42	; 0x2a
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	4b14      	ldr	r3, [pc, #80]	; (80044dc <setRotation+0x2d8>)
 800448a:	222b      	movs	r2, #43	; 0x2b
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <setRotation+0x2dc>)
 8004490:	222c      	movs	r2, #44	; 0x2c
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <setRotation+0x2e0>)
 8004496:	222a      	movs	r2, #42	; 0x2a
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <setRotation+0x2e4>)
 800449c:	222a      	movs	r2, #42	; 0x2a
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <setRotation+0x2e8>)
 80044a2:	222b      	movs	r2, #43	; 0x2b
 80044a4:	801a      	strh	r2, [r3, #0]
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <setRotation+0x2ec>)
 80044a8:	222b      	movs	r2, #43	; 0x2b
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	e000      	b.n	80044b0 <setRotation+0x2ac>
			goto common_BGR;
 80044ae:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <setRotation+0x2d0>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01d      	beq.n	80044f4 <setRotation+0x2f0>
 80044b8:	2316      	movs	r3, #22
 80044ba:	e01c      	b.n	80044f6 <setRotation+0x2f2>
 80044bc:	200052d4 	.word	0x200052d4
 80044c0:	2000004d 	.word	0x2000004d
 80044c4:	20000008 	.word	0x20000008
 80044c8:	2000000a 	.word	0x2000000a
 80044cc:	200052d0 	.word	0x200052d0
 80044d0:	200052de 	.word	0x200052de
 80044d4:	2000004a 	.word	0x2000004a
 80044d8:	200052d8 	.word	0x200052d8
 80044dc:	200052d6 	.word	0x200052d6
 80044e0:	200052ce 	.word	0x200052ce
 80044e4:	200052da 	.word	0x200052da
 80044e8:	200052e2 	.word	0x200052e2
 80044ec:	200052d2 	.word	0x200052d2
 80044f0:	200052dc 	.word	0x200052dc
 80044f4:	2336      	movs	r3, #54	; 0x36
 80044f6:	f107 020b 	add.w	r2, r7, #11
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd fef3 	bl	80022e8 <WriteCmdParamN>
       _lcd_madctl = val;
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	b29a      	uxth	r2, r3
 8004506:	4b77      	ldr	r3, [pc, #476]	; (80046e4 <setRotation+0x4e0>)
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	e0a5      	b.n	8004658 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 800450c:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <setRotation+0x4e4>)
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <setRotation+0x33c>
 8004518:	f24b 5209 	movw	r2, #46345	; 0xb509
 800451c:	4293      	cmp	r3, r2
 800451e:	dc4f      	bgt.n	80045c0 <setRotation+0x3bc>
 8004520:	f249 3226 	movw	r2, #37670	; 0x9326
 8004524:	4293      	cmp	r3, r2
 8004526:	d00b      	beq.n	8004540 <setRotation+0x33c>
 8004528:	f249 3226 	movw	r2, #37670	; 0x9326
 800452c:	4293      	cmp	r3, r2
 800452e:	dc47      	bgt.n	80045c0 <setRotation+0x3bc>
 8004530:	f245 4220 	movw	r2, #21536	; 0x5420
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <setRotation+0x33c>
 8004538:	f247 7293 	movw	r2, #30611	; 0x7793
 800453c:	4293      	cmp	r3, r2
 800453e:	d13f      	bne.n	80045c0 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8004540:	4b6a      	ldr	r3, [pc, #424]	; (80046ec <setRotation+0x4e8>)
 8004542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	4b69      	ldr	r3, [pc, #420]	; (80046f0 <setRotation+0x4ec>)
 800454a:	f240 2201 	movw	r2, #513	; 0x201
 800454e:	801a      	strh	r2, [r3, #0]
 8004550:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <setRotation+0x4f0>)
 8004552:	f240 2202 	movw	r2, #514	; 0x202
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <setRotation+0x4f4>)
 800455a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <setRotation+0x4f8>)
 8004562:	f240 2211 	movw	r2, #529	; 0x211
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	4b65      	ldr	r3, [pc, #404]	; (8004700 <setRotation+0x4fc>)
 800456a:	f240 2212 	movw	r2, #530	; 0x212
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	4b64      	ldr	r3, [pc, #400]	; (8004704 <setRotation+0x500>)
 8004572:	f240 2213 	movw	r2, #531	; 0x213
 8004576:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	b25b      	sxtb	r3, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004582:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004586:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8004588:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800458c:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 800458e:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <setRotation+0x4e4>)
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	f249 3226 	movw	r2, #37670	; 0x9326
 8004596:	4293      	cmp	r3, r2
 8004598:	d005      	beq.n	80045a6 <setRotation+0x3a2>
 800459a:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <setRotation+0x4e4>)
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	f245 4220 	movw	r2, #21536	; 0x5420
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d102      	bne.n	80045ac <setRotation+0x3a8>
 80045a6:	8abb      	ldrh	r3, [r7, #20]
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 80045ac:	8a3a      	ldrh	r2, [r7, #16]
 80045ae:	8abb      	ldrh	r3, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4619      	mov	r1, r3
 80045b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80045ba:	f7fd fbbe 	bl	8001d3a <WriteCmdData>
           goto common_SS;
 80045be:	e024      	b.n	800460a <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80045c0:	4b4a      	ldr	r3, [pc, #296]	; (80046ec <setRotation+0x4e8>)
 80045c2:	2220      	movs	r2, #32
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	4b4a      	ldr	r3, [pc, #296]	; (80046f0 <setRotation+0x4ec>)
 80045c8:	2221      	movs	r2, #33	; 0x21
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	4b49      	ldr	r3, [pc, #292]	; (80046f4 <setRotation+0x4f0>)
 80045ce:	2222      	movs	r2, #34	; 0x22
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <setRotation+0x4f4>)
 80045d4:	2250      	movs	r2, #80	; 0x50
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	4b48      	ldr	r3, [pc, #288]	; (80046fc <setRotation+0x4f8>)
 80045da:	2251      	movs	r2, #81	; 0x51
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	4b48      	ldr	r3, [pc, #288]	; (8004700 <setRotation+0x4fc>)
 80045e0:	2252      	movs	r2, #82	; 0x52
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	4b47      	ldr	r3, [pc, #284]	; (8004704 <setRotation+0x500>)
 80045e6:	2253      	movs	r2, #83	; 0x53
 80045e8:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80045ea:	7afb      	ldrb	r3, [r7, #11]
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045f8:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 80045fa:	8a3b      	ldrh	r3, [r7, #16]
 80045fc:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8004600:	b29b      	uxth	r3, r3
 8004602:	4619      	mov	r1, r3
 8004604:	2060      	movs	r0, #96	; 0x60
 8004606:	f7fd fb98 	bl	8001d3a <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	b29b      	uxth	r3, r3
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	4619      	mov	r1, r3
 800461a:	2001      	movs	r0, #1
 800461c:	f7fd fb8d 	bl	8001d3a <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8004620:	7afb      	ldrb	r3, [r7, #11]
 8004622:	109b      	asrs	r3, r3, #2
 8004624:	b29b      	uxth	r3, r3
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 800462c:	7afb      	ldrb	r3, [r7, #11]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 8004636:	8afb      	ldrh	r3, [r7, #22]
 8004638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800463c:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 800463e:	8afb      	ldrh	r3, [r7, #22]
 8004640:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004644:	b29a      	uxth	r2, r3
 8004646:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <setRotation+0x4e0>)
 8004648:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <setRotation+0x4e0>)
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	4619      	mov	r1, r3
 8004650:	2003      	movs	r0, #3
 8004652:	f7fd fb72 	bl	8001d3a <WriteCmdData>
           break;
 8004656:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <setRotation+0x504>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d023      	beq.n	80046ac <setRotation+0x4a8>
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <setRotation+0x508>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d11d      	bne.n	80046ac <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8004670:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <setRotation+0x4e8>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	81bb      	strh	r3, [r7, #12]
 8004676:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <setRotation+0x4ec>)
 8004678:	881a      	ldrh	r2, [r3, #0]
 800467a:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <setRotation+0x4e8>)
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <setRotation+0x4ec>)
 8004680:	89bb      	ldrh	r3, [r7, #12]
 8004682:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8004684:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <setRotation+0x4f4>)
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	81bb      	strh	r3, [r7, #12]
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <setRotation+0x4fc>)
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <setRotation+0x4f4>)
 8004690:	801a      	strh	r2, [r3, #0]
 8004692:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <setRotation+0x4fc>)
 8004694:	89bb      	ldrh	r3, [r7, #12]
 8004696:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <setRotation+0x4f8>)
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	81bb      	strh	r3, [r7, #12]
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <setRotation+0x500>)
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	4b16      	ldr	r3, [pc, #88]	; (80046fc <setRotation+0x4f8>)
 80046a4:	801a      	strh	r2, [r3, #0]
 80046a6:	4a17      	ldr	r2, [pc, #92]	; (8004704 <setRotation+0x500>)
 80046a8:	89bb      	ldrh	r3, [r7, #12]
 80046aa:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 80046ac:	f7fd fa7e 	bl	8001bac <width>
 80046b0:	4603      	mov	r3, r0
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	b21c      	sxth	r4, r3
 80046b8:	f7fd fa84 	bl	8001bc4 <height>
 80046bc:	4603      	mov	r3, r0
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	4622      	mov	r2, r4
 80046c6:	2100      	movs	r1, #0
 80046c8:	2000      	movs	r0, #0
 80046ca:	f000 f927 	bl	800491c <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80046ce:	2200      	movs	r2, #0
 80046d0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80046d4:	2000      	movs	r0, #0
 80046d6:	f000 fa45 	bl	8004b64 <vertScroll>
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200052e4 	.word	0x200052e4
 80046e8:	200052de 	.word	0x200052de
 80046ec:	200052d8 	.word	0x200052d8
 80046f0:	200052d6 	.word	0x200052d6
 80046f4:	200052ce 	.word	0x200052ce
 80046f8:	200052da 	.word	0x200052da
 80046fc:	200052e2 	.word	0x200052e2
 8004700:	200052d2 	.word	0x200052d2
 8004704:	200052dc 	.word	0x200052dc
 8004708:	2000004d 	.word	0x2000004d
 800470c:	200052d0 	.word	0x200052d0

08004710 <drawPixel>:


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	80fb      	strh	r3, [r7, #6]
 800471a:	460b      	mov	r3, r1
 800471c:	80bb      	strh	r3, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 8004722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f2c0 80e7 	blt.w	80048fa <drawPixel+0x1ea>
 800472c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f2c0 80e2 	blt.w	80048fa <drawPixel+0x1ea>
 8004736:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800473a:	f7fd fa37 	bl	8001bac <width>
 800473e:	4603      	mov	r3, r0
 8004740:	429c      	cmp	r4, r3
 8004742:	f280 80da 	bge.w	80048fa <drawPixel+0x1ea>
 8004746:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800474a:	f7fd fa3b 	bl	8001bc4 <height>
 800474e:	4603      	mov	r3, r0
 8004750:	429c      	cmp	r4, r3
 8004752:	f280 80d2 	bge.w	80048fa <drawPixel+0x1ea>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8004756:	4b6b      	ldr	r3, [pc, #428]	; (8004904 <drawPixel+0x1f4>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <drawPixel+0x5a>
 800475e:	887b      	ldrh	r3, [r7, #2]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd fa3b 	bl	8001bdc <color565_to_555>
 8004766:	4603      	mov	r3, r0
 8004768:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 800476a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800476e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004772:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004776:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800477a:	f000 f8cf 	bl	800491c <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 800477e:	4b62      	ldr	r3, [pc, #392]	; (8004908 <drawPixel+0x1f8>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80b1 	beq.w	80048ea <drawPixel+0x1da>
 8004788:	2101      	movs	r1, #1
 800478a:	4860      	ldr	r0, [pc, #384]	; (800490c <drawPixel+0x1fc>)
 800478c:	f7fd f9c0 	bl	8001b10 <PIN_LOW>
 8004790:	2110      	movs	r1, #16
 8004792:	485f      	ldr	r0, [pc, #380]	; (8004910 <drawPixel+0x200>)
 8004794:	f7fd f9bc 	bl	8001b10 <PIN_LOW>
 8004798:	4b5e      	ldr	r3, [pc, #376]	; (8004914 <drawPixel+0x204>)
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	b29b      	uxth	r3, r3
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	4b5c      	ldr	r3, [pc, #368]	; (8004914 <drawPixel+0x204>)
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	73bb      	strb	r3, [r7, #14]
 80047a8:	4b59      	ldr	r3, [pc, #356]	; (8004910 <drawPixel+0x200>)
 80047aa:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80047ae:	619a      	str	r2, [r3, #24]
 80047b0:	4b56      	ldr	r3, [pc, #344]	; (800490c <drawPixel+0x1fc>)
 80047b2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80047b6:	619a      	str	r2, [r3, #24]
 80047b8:	4b57      	ldr	r3, [pc, #348]	; (8004918 <drawPixel+0x208>)
 80047ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047be:	619a      	str	r2, [r3, #24]
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	431a      	orrs	r2, r3
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	025b      	lsls	r3, r3, #9
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	431a      	orrs	r2, r3
 80047dc:	4b4c      	ldr	r3, [pc, #304]	; (8004910 <drawPixel+0x200>)
 80047de:	619a      	str	r2, [r3, #24]
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	105b      	asrs	r3, r3, #1
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	431a      	orrs	r2, r3
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	431a      	orrs	r2, r3
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <drawPixel+0x1fc>)
 8004806:	619a      	str	r2, [r3, #24]
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	019b      	lsls	r3, r3, #6
 800480c:	4a42      	ldr	r2, [pc, #264]	; (8004918 <drawPixel+0x208>)
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	6193      	str	r3, [r2, #24]
 8004814:	2102      	movs	r1, #2
 8004816:	483e      	ldr	r0, [pc, #248]	; (8004910 <drawPixel+0x200>)
 8004818:	f7fd f97a 	bl	8001b10 <PIN_LOW>
 800481c:	2102      	movs	r1, #2
 800481e:	483c      	ldr	r0, [pc, #240]	; (8004910 <drawPixel+0x200>)
 8004820:	f7fd f976 	bl	8001b10 <PIN_LOW>
 8004824:	2102      	movs	r1, #2
 8004826:	483a      	ldr	r0, [pc, #232]	; (8004910 <drawPixel+0x200>)
 8004828:	f7fd f972 	bl	8001b10 <PIN_LOW>
 800482c:	2102      	movs	r1, #2
 800482e:	4838      	ldr	r0, [pc, #224]	; (8004910 <drawPixel+0x200>)
 8004830:	f7fd f97e 	bl	8001b30 <PIN_HIGH>
 8004834:	2102      	movs	r1, #2
 8004836:	4836      	ldr	r0, [pc, #216]	; (8004910 <drawPixel+0x200>)
 8004838:	f7fd f97a 	bl	8001b30 <PIN_HIGH>
 800483c:	4b34      	ldr	r3, [pc, #208]	; (8004910 <drawPixel+0x200>)
 800483e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004842:	619a      	str	r2, [r3, #24]
 8004844:	4b31      	ldr	r3, [pc, #196]	; (800490c <drawPixel+0x1fc>)
 8004846:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800484a:	619a      	str	r2, [r3, #24]
 800484c:	4b32      	ldr	r3, [pc, #200]	; (8004918 <drawPixel+0x208>)
 800484e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004852:	619a      	str	r2, [r3, #24]
 8004854:	7bbb      	ldrb	r3, [r7, #14]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	431a      	orrs	r2, r3
 8004866:	7bbb      	ldrb	r3, [r7, #14]
 8004868:	025b      	lsls	r3, r3, #9
 800486a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800486e:	431a      	orrs	r2, r3
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <drawPixel+0x200>)
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800487c:	7bbb      	ldrb	r3, [r7, #14]
 800487e:	105b      	asrs	r3, r3, #1
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	431a      	orrs	r2, r3
 8004886:	7bbb      	ldrb	r3, [r7, #14]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	431a      	orrs	r2, r3
 8004890:	7bbb      	ldrb	r3, [r7, #14]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	431a      	orrs	r2, r3
 8004898:	4b1c      	ldr	r3, [pc, #112]	; (800490c <drawPixel+0x1fc>)
 800489a:	619a      	str	r2, [r3, #24]
 800489c:	7bbb      	ldrb	r3, [r7, #14]
 800489e:	019b      	lsls	r3, r3, #6
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <drawPixel+0x208>)
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	6193      	str	r3, [r2, #24]
 80048a8:	2102      	movs	r1, #2
 80048aa:	4819      	ldr	r0, [pc, #100]	; (8004910 <drawPixel+0x200>)
 80048ac:	f7fd f930 	bl	8001b10 <PIN_LOW>
 80048b0:	2102      	movs	r1, #2
 80048b2:	4817      	ldr	r0, [pc, #92]	; (8004910 <drawPixel+0x200>)
 80048b4:	f7fd f92c 	bl	8001b10 <PIN_LOW>
 80048b8:	2102      	movs	r1, #2
 80048ba:	4815      	ldr	r0, [pc, #84]	; (8004910 <drawPixel+0x200>)
 80048bc:	f7fd f928 	bl	8001b10 <PIN_LOW>
 80048c0:	2102      	movs	r1, #2
 80048c2:	4813      	ldr	r0, [pc, #76]	; (8004910 <drawPixel+0x200>)
 80048c4:	f7fd f934 	bl	8001b30 <PIN_HIGH>
 80048c8:	2102      	movs	r1, #2
 80048ca:	4811      	ldr	r0, [pc, #68]	; (8004910 <drawPixel+0x200>)
 80048cc:	f7fd f930 	bl	8001b30 <PIN_HIGH>
 80048d0:	2110      	movs	r1, #16
 80048d2:	480f      	ldr	r0, [pc, #60]	; (8004910 <drawPixel+0x200>)
 80048d4:	f7fd f92c 	bl	8001b30 <PIN_HIGH>
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd faae 	bl	8001e3c <write24>
 80048e0:	2101      	movs	r1, #1
 80048e2:	480a      	ldr	r0, [pc, #40]	; (800490c <drawPixel+0x1fc>)
 80048e4:	f7fd f924 	bl	8001b30 <PIN_HIGH>
 80048e8:	e008      	b.n	80048fc <drawPixel+0x1ec>
   WriteCmdData(_MW, color);
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <drawPixel+0x204>)
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd fa21 	bl	8001d3a <WriteCmdData>
 80048f8:	e000      	b.n	80048fc <drawPixel+0x1ec>
       return;
 80048fa:	bf00      	nop
}
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd90      	pop	{r4, r7, pc}
 8004902:	bf00      	nop
 8004904:	2000004b 	.word	0x2000004b
 8004908:	2000004c 	.word	0x2000004c
 800490c:	40020400 	.word	0x40020400
 8004910:	40020000 	.word	0x40020000
 8004914:	200052ce 	.word	0x200052ce
 8004918:	40020800 	.word	0x40020800

0800491c <setAddrWindow>:


void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b087      	sub	sp, #28
 8004920:	af02      	add	r7, sp, #8
 8004922:	4604      	mov	r4, r0
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	461a      	mov	r2, r3
 800492a:	4623      	mov	r3, r4
 800492c:	80fb      	strh	r3, [r7, #6]
 800492e:	4603      	mov	r3, r0
 8004930:	80bb      	strh	r3, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	807b      	strh	r3, [r7, #2]
 8004936:	4613      	mov	r3, r2
 8004938:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 800493a:	4b80      	ldr	r3, [pc, #512]	; (8004b3c <setAddrWindow+0x220>)
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	f249 3227 	movw	r2, #37671	; 0x9327
 8004942:	4293      	cmp	r3, r2
 8004944:	d117      	bne.n	8004976 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8004946:	4b7e      	ldr	r3, [pc, #504]	; (8004b40 <setAddrWindow+0x224>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d107      	bne.n	800495e <setAddrWindow+0x42>
 800494e:	88bb      	ldrh	r3, [r7, #4]
 8004950:	3320      	adds	r3, #32
 8004952:	b29b      	uxth	r3, r3
 8004954:	80bb      	strh	r3, [r7, #4]
 8004956:	883b      	ldrh	r3, [r7, #0]
 8004958:	3320      	adds	r3, #32
 800495a:	b29b      	uxth	r3, r3
 800495c:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 800495e:	4b78      	ldr	r3, [pc, #480]	; (8004b40 <setAddrWindow+0x224>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <setAddrWindow+0x5a>
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	3320      	adds	r3, #32
 800496a:	b29b      	uxth	r3, r3
 800496c:	80fb      	strh	r3, [r7, #6]
 800496e:	887b      	ldrh	r3, [r7, #2]
 8004970:	3320      	adds	r3, #32
 8004972:	b29b      	uxth	r3, r3
 8004974:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 8004976:	4b71      	ldr	r3, [pc, #452]	; (8004b3c <setAddrWindow+0x220>)
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	f241 5226 	movw	r2, #5414	; 0x1526
 800497e:	4293      	cmp	r3, r2
 8004980:	d128      	bne.n	80049d4 <setAddrWindow+0xb8>
 8004982:	4b6f      	ldr	r3, [pc, #444]	; (8004b40 <setAddrWindow+0x224>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d022      	beq.n	80049d4 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	b29b      	uxth	r3, r3
 8004996:	81fb      	strh	r3, [r7, #14]
 8004998:	883a      	ldrh	r2, [r7, #0]
 800499a:	88bb      	ldrh	r3, [r7, #4]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	b29b      	uxth	r3, r3
 80049a0:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 80049a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <setAddrWindow+0x9c>
 80049aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3301      	adds	r3, #1
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	803b      	strh	r3, [r7, #0]
 80049b6:	e00d      	b.n	80049d4 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 80049b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <setAddrWindow+0xb8>
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	89bb      	ldrh	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	807b      	strh	r3, [r7, #2]
 80049ca:	883a      	ldrh	r2, [r7, #0]
 80049cc:	89bb      	ldrh	r3, [r7, #12]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 80049d4:	4b5b      	ldr	r3, [pc, #364]	; (8004b44 <setAddrWindow+0x228>)
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d054      	beq.n	8004a8a <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 80049e0:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <setAddrWindow+0x22c>)
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b2d8      	uxtb	r0, r3
 80049e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ea:	121b      	asrs	r3, r3, #8
 80049ec:	b21b      	sxth	r3, r3
 80049ee:	b2d9      	uxtb	r1, r3
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049f8:	121b      	asrs	r3, r3, #8
 80049fa:	b21b      	sxth	r3, r3
 80049fc:	b2dc      	uxtb	r4, r3
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4623      	mov	r3, r4
 8004a06:	f7fd fe3d 	bl	8002684 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8004a0a:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <setAddrWindow+0x230>)
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b2d8      	uxtb	r0, r3
 8004a10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a14:	121b      	asrs	r3, r3, #8
 8004a16:	b21b      	sxth	r3, r3
 8004a18:	b2d9      	uxtb	r1, r3
 8004a1a:	88bb      	ldrh	r3, [r7, #4]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a22:	121b      	asrs	r3, r3, #8
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	b2dc      	uxtb	r4, r3
 8004a28:	883b      	ldrh	r3, [r7, #0]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4623      	mov	r3, r4
 8004a30:	f7fd fe28 	bl	8002684 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8004a34:	4b46      	ldr	r3, [pc, #280]	; (8004b50 <setAddrWindow+0x234>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d07b      	beq.n	8004b34 <setAddrWindow+0x218>
 8004a3c:	4b3f      	ldr	r3, [pc, #252]	; (8004b3c <setAddrWindow+0x220>)
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	2b65      	cmp	r3, #101	; 0x65
 8004a42:	d177      	bne.n	8004b34 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8004a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a48:	121b      	asrs	r3, r3, #8
 8004a4a:	b21b      	sxth	r3, r3
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	723b      	strb	r3, [r7, #8]
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <setAddrWindow+0x238>)
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	f107 0208 	add.w	r2, r7, #8
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fd fc41 	bl	80022e8 <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8004a66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a6a:	121b      	asrs	r3, r3, #8
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	723b      	strb	r3, [r7, #8]
 8004a72:	88bb      	ldrh	r3, [r7, #4]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8004a78:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <setAddrWindow+0x23c>)
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	f107 0208 	add.w	r2, r7, #8
 8004a80:	2102      	movs	r1, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd fc30 	bl	80022e8 <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8004a88:	e054      	b.n	8004b34 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8004a8a:	4b32      	ldr	r3, [pc, #200]	; (8004b54 <setAddrWindow+0x238>)
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd f951 	bl	8001d3a <WriteCmdData>
       WriteCmdData(_MP, y);
 8004a98:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <setAddrWindow+0x23c>)
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	88ba      	ldrh	r2, [r7, #4]
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fd f94a 	bl	8001d3a <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8004aa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004aaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d105      	bne.n	8004abe <setAddrWindow+0x1a2>
 8004ab2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004ab6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d03a      	beq.n	8004b34 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <setAddrWindow+0x228>)
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d018      	beq.n	8004afc <setAddrWindow+0x1e0>
               if (rotation & 1)
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <setAddrWindow+0x224>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8004ad6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	b21a      	sxth	r2, r3
 8004ade:	88bb      	ldrh	r3, [r7, #4]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	80bb      	strh	r3, [r7, #4]
 8004ae4:	88bb      	ldrh	r3, [r7, #4]
 8004ae6:	803b      	strh	r3, [r7, #0]
 8004ae8:	e008      	b.n	8004afc <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8004aea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	b21a      	sxth	r2, r3
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <setAddrWindow+0x22c>)
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fd f918 	bl	8001d3a <WriteCmdData>
           WriteCmdData(_SP, y);
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <setAddrWindow+0x230>)
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	88ba      	ldrh	r2, [r7, #4]
 8004b10:	4611      	mov	r1, r2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd f911 	bl	8001d3a <WriteCmdData>
           WriteCmdData(_EC, x1);
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <setAddrWindow+0x240>)
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	887a      	ldrh	r2, [r7, #2]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd f90a 	bl	8001d3a <WriteCmdData>
           WriteCmdData(_EP, y1);
 8004b26:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <setAddrWindow+0x244>)
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	883a      	ldrh	r2, [r7, #0]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fd f903 	bl	8001d3a <WriteCmdData>
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}
 8004b3c:	200052de 	.word	0x200052de
 8004b40:	2000004d 	.word	0x2000004d
 8004b44:	200052d0 	.word	0x200052d0
 8004b48:	200052da 	.word	0x200052da
 8004b4c:	200052d2 	.word	0x200052d2
 8004b50:	2000004a 	.word	0x2000004a
 8004b54:	200052d8 	.word	0x200052d8
 8004b58:	200052d6 	.word	0x200052d6
 8004b5c:	200052e2 	.word	0x200052e2
 8004b60:	200052dc 	.word	0x200052dc

08004b64 <vertScroll>:


void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	80fb      	strh	r3, [r7, #6]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	80bb      	strh	r3, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8004b76:	4b89      	ldr	r3, [pc, #548]	; (8004d9c <vertScroll+0x238>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	f249 3227 	movw	r2, #37671	; 0x9327
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10b      	bne.n	8004b9a <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8004b82:	4b87      	ldr	r3, [pc, #540]	; (8004da0 <vertScroll+0x23c>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d003      	beq.n	8004b92 <vertScroll+0x2e>
 8004b8a:	4b85      	ldr	r3, [pc, #532]	; (8004da0 <vertScroll+0x23c>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d103      	bne.n	8004b9a <vertScroll+0x36>
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	3320      	adds	r3, #32
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8004b9a:	88fa      	ldrh	r2, [r7, #6]
 8004b9c:	88bb      	ldrh	r3, [r7, #4]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8004bae:	4b7b      	ldr	r3, [pc, #492]	; (8004d9c <vertScroll+0x238>)
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	f249 3227 	movw	r2, #37671	; 0x9327
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d103      	bne.n	8004bc2 <vertScroll+0x5e>
 8004bba:	8afb      	ldrh	r3, [r7, #22]
 8004bbc:	3320      	adds	r3, #32
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8004bc2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bca:	425b      	negs	r3, r3
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	dd05      	ble.n	8004bdc <vertScroll+0x78>
 8004bd0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	db01      	blt.n	8004be0 <vertScroll+0x7c>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	4413      	add	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8004bea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	da04      	bge.n	8004bfc <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8004bf2:	8aba      	ldrh	r2, [r7, #20]
 8004bf4:	88bb      	ldrh	r3, [r7, #4]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	88bb      	ldrh	r3, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004c0a:	4b66      	ldr	r3, [pc, #408]	; (8004da4 <vertScroll+0x240>)
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d071      	beq.n	8004cfa <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8004c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c1a:	121b      	asrs	r3, r3, #8
 8004c1c:	b21b      	sxth	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8004c28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c2c:	121b      	asrs	r3, r3, #8
 8004c2e:	b21b      	sxth	r3, r3
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8004c34:	88bb      	ldrh	r3, [r7, #4]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8004c3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004c3e:	121b      	asrs	r3, r3, #8
 8004c40:	b21b      	sxth	r3, r3
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8004c4c:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <vertScroll+0x244>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <vertScroll+0xf4>
 8004c54:	230e      	movs	r3, #14
 8004c56:	e000      	b.n	8004c5a <vertScroll+0xf6>
 8004c58:	2333      	movs	r3, #51	; 0x33
 8004c5a:	f107 020c 	add.w	r2, r7, #12
 8004c5e:	2106      	movs	r1, #6
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fd fb41 	bl	80022e8 <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8004c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c6a:	121b      	asrs	r3, r3, #8
 8004c6c:	b21b      	sxth	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8004c72:	8abb      	ldrh	r3, [r7, #20]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <vertScroll+0x244>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <vertScroll+0x120>
 8004c80:	2314      	movs	r3, #20
 8004c82:	e000      	b.n	8004c86 <vertScroll+0x122>
 8004c84:	2337      	movs	r3, #55	; 0x37
 8004c86:	f107 020c 	add.w	r2, r7, #12
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fd fb2b 	bl	80022e8 <WriteCmdParamN>
		if (is8347) {
 8004c92:	4b45      	ldr	r3, [pc, #276]	; (8004da8 <vertScroll+0x244>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01f      	beq.n	8004cda <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8004c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <vertScroll+0x152>
 8004ca2:	4b3e      	ldr	r3, [pc, #248]	; (8004d9c <vertScroll+0x238>)
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	f248 3247 	movw	r2, #33607	; 0x8347
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <vertScroll+0x14e>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e002      	b.n	8004cb8 <vertScroll+0x154>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	e000      	b.n	8004cb8 <vertScroll+0x154>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8004cba:	4b38      	ldr	r3, [pc, #224]	; (8004d9c <vertScroll+0x238>)
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	f248 3247 	movw	r2, #33607	; 0x8347
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <vertScroll+0x166>
 8004cc6:	2318      	movs	r3, #24
 8004cc8:	e000      	b.n	8004ccc <vertScroll+0x168>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f107 020c 	add.w	r2, r7, #12
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fb08 	bl	80022e8 <WriteCmdParamN>
 8004cd8:	e05d      	b.n	8004d96 <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8004cda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d159      	bne.n	8004d96 <vertScroll+0x232>
 8004ce2:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <vertScroll+0x240>)
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d053      	beq.n	8004d96 <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2013      	movs	r0, #19
 8004cf4:	f7fd faf8 	bl	80022e8 <WriteCmdParamN>
 8004cf8:	e04d      	b.n	8004d96 <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004cfa:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <vertScroll+0x238>)
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d027      	beq.n	8004d56 <vertScroll+0x1f2>
 8004d06:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	dc34      	bgt.n	8004d78 <vertScroll+0x214>
 8004d0e:	f249 3226 	movw	r2, #37670	; 0x9326
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01f      	beq.n	8004d56 <vertScroll+0x1f2>
 8004d16:	f249 3226 	movw	r2, #37670	; 0x9326
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	dc2c      	bgt.n	8004d78 <vertScroll+0x214>
 8004d1e:	f247 7293 	movw	r2, #30611	; 0x7793
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d017      	beq.n	8004d56 <vertScroll+0x1f2>
 8004d26:	f247 7293 	movw	r2, #30611	; 0x7793
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	dc24      	bgt.n	8004d78 <vertScroll+0x214>
 8004d2e:	f245 4220 	movw	r2, #21536	; 0x5420
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00f      	beq.n	8004d56 <vertScroll+0x1f2>
 8004d36:	f247 7283 	movw	r2, #30595	; 0x7783
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d11c      	bne.n	8004d78 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8004d3e:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <vertScroll+0x248>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	2061      	movs	r0, #97	; 0x61
 8004d46:	f7fc fff8 	bl	8001d3a <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004d4a:	8abb      	ldrh	r3, [r7, #20]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	206a      	movs	r0, #106	; 0x6a
 8004d50:	f7fc fff3 	bl	8001d3a <WriteCmdData>
        break;
 8004d54:	e01f      	b.n	8004d96 <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <vertScroll+0x248>)
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	f240 4001 	movw	r0, #1025	; 0x401
 8004d66:	f7fc ffe8 	bl	8001d3a <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8004d6a:	8abb      	ldrh	r3, [r7, #20]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f240 4004 	movw	r0, #1028	; 0x404
 8004d72:	f7fc ffe2 	bl	8001d3a <WriteCmdData>
        break;
 8004d76:	e00e      	b.n	8004d96 <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <vertScroll+0x248>)
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	4619      	mov	r1, r3
 8004d84:	2061      	movs	r0, #97	; 0x61
 8004d86:	f7fc ffd8 	bl	8001d3a <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8004d8a:	8abb      	ldrh	r3, [r7, #20]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	206a      	movs	r0, #106	; 0x6a
 8004d90:	f7fc ffd3 	bl	8001d3a <WriteCmdData>
        break;
 8004d94:	bf00      	nop
    }
}
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	200052de 	.word	0x200052de
 8004da0:	2000004d 	.word	0x2000004d
 8004da4:	200052d0 	.word	0x200052d0
 8004da8:	2000004a 	.word	0x2000004a
 8004dac:	200052d4 	.word	0x200052d4

08004db0 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <fillScreen+0x2c>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b21a      	sxth	r2, r3
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <fillScreen+0x30>)
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b219      	sxth	r1, r3
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	2100      	movs	r1, #0
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f000 f92c 	bl	800502c <fillRect>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	2000000a 	.word	0x2000000a

08004de4 <invertDisplay>:


void invertDisplay(uint8_t i)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8004dee:	4b4c      	ldr	r3, [pc, #304]	; (8004f20 <invertDisplay+0x13c>)
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	b21a      	sxth	r2, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	b21b      	sxth	r3, r3
 8004e06:	4053      	eors	r3, r2
 8004e08:	b21b      	sxth	r3, r3
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	4b45      	ldr	r3, [pc, #276]	; (8004f24 <invertDisplay+0x140>)
 8004e0e:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8004e10:	4b43      	ldr	r3, [pc, #268]	; (8004f20 <invertDisplay+0x13c>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d035      	beq.n	8004e88 <invertDisplay+0xa4>
        if (is8347) {
 8004e1c:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <invertDisplay+0x144>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d024      	beq.n	8004e6e <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8004e24:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <invertDisplay+0x148>)
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	f248 3247 	movw	r2, #33607	; 0x8347
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d005      	beq.n	8004e3c <invertDisplay+0x58>
 8004e30:	4b3e      	ldr	r3, [pc, #248]	; (8004f2c <invertDisplay+0x148>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	f245 2252 	movw	r2, #21074	; 0x5252
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <invertDisplay+0x140>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <invertDisplay+0x64>
 8004e44:	2306      	movs	r3, #6
 8004e46:	e000      	b.n	8004e4a <invertDisplay+0x66>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e007      	b.n	8004e5e <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8004e4e:	4b35      	ldr	r3, [pc, #212]	; (8004f24 <invertDisplay+0x140>)
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <invertDisplay+0x76>
 8004e56:	2308      	movs	r3, #8
 8004e58:	e000      	b.n	8004e5c <invertDisplay+0x78>
 8004e5a:	230a      	movs	r3, #10
 8004e5c:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8004e5e:	f107 030f 	add.w	r3, r7, #15
 8004e62:	461a      	mov	r2, r3
 8004e64:	2101      	movs	r1, #1
 8004e66:	2001      	movs	r0, #1
 8004e68:	f7fd fa3e 	bl	80022e8 <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8004e6c:	e055      	b.n	8004f1a <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8004e6e:	4b2d      	ldr	r3, [pc, #180]	; (8004f24 <invertDisplay+0x140>)
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <invertDisplay+0x96>
 8004e76:	2321      	movs	r3, #33	; 0x21
 8004e78:	e000      	b.n	8004e7c <invertDisplay+0x98>
 8004e7a:	2320      	movs	r3, #32
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2100      	movs	r1, #0
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fd fa31 	bl	80022e8 <WriteCmdParamN>
 8004e86:	e048      	b.n	8004f1a <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8004e88:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <invertDisplay+0x148>)
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d030      	beq.n	8004ef6 <invertDisplay+0x112>
 8004e94:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	dc37      	bgt.n	8004f0c <invertDisplay+0x128>
 8004e9c:	f249 3226 	movw	r2, #37670	; 0x9326
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d028      	beq.n	8004ef6 <invertDisplay+0x112>
 8004ea4:	f249 3226 	movw	r2, #37670	; 0x9326
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	dc2f      	bgt.n	8004f0c <invertDisplay+0x128>
 8004eac:	f249 2225 	movw	r2, #37413	; 0x9225
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <invertDisplay+0xf8>
 8004eb4:	f249 2225 	movw	r2, #37413	; 0x9225
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	dc27      	bgt.n	8004f0c <invertDisplay+0x128>
 8004ebc:	f247 7293 	movw	r2, #30611	; 0x7793
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d018      	beq.n	8004ef6 <invertDisplay+0x112>
 8004ec4:	f247 7293 	movw	r2, #30611	; 0x7793
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	dc1f      	bgt.n	8004f0c <invertDisplay+0x128>
 8004ecc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004ed0:	d004      	beq.n	8004edc <invertDisplay+0xf8>
 8004ed2:	f245 4220 	movw	r2, #21536	; 0x5420
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00d      	beq.n	8004ef6 <invertDisplay+0x112>
 8004eda:	e017      	b.n	8004f0c <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <invertDisplay+0x140>)
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	b21b      	sxth	r3, r3
 8004ee4:	f043 0313 	orr.w	r3, r3, #19
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4619      	mov	r1, r3
 8004eee:	2007      	movs	r0, #7
 8004ef0:	f7fc ff23 	bl	8001d3a <WriteCmdData>
        break;
 8004ef4:	e011      	b.n	8004f1a <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <invertDisplay+0x140>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	f043 0302 	orr.w	r3, r3, #2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4619      	mov	r1, r3
 8004f02:	f240 4001 	movw	r0, #1025	; 0x401
 8004f06:	f7fc ff18 	bl	8001d3a <WriteCmdData>
        break;
 8004f0a:	e006      	b.n	8004f1a <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <invertDisplay+0x140>)
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	2061      	movs	r0, #97	; 0x61
 8004f14:	f7fc ff11 	bl	8001d3a <WriteCmdData>
        break;
 8004f18:	bf00      	nop
    }
}
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	200052d0 	.word	0x200052d0
 8004f24:	200052d4 	.word	0x200052d4
 8004f28:	2000004a 	.word	0x2000004a
 8004f2c:	200052de 	.word	0x200052de

08004f30 <drawFastVLine>:


void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4623      	mov	r3, r4
 8004f40:	80fb      	strh	r3, [r7, #6]
 8004f42:	4603      	mov	r3, r0
 8004f44:	80bb      	strh	r3, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	807b      	strh	r3, [r7, #2]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, 1, h, color);
 8004f4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004f52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f5a:	883b      	ldrh	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	2201      	movs	r2, #1
 8004f62:	f000 f863 	bl	800502c <fillRect>
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd90      	pop	{r4, r7, pc}

08004f6e <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8004f6e:	b590      	push	{r4, r7, lr}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af02      	add	r7, sp, #8
 8004f74:	4604      	mov	r4, r0
 8004f76:	4608      	mov	r0, r1
 8004f78:	4611      	mov	r1, r2
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4623      	mov	r3, r4
 8004f7e:	80fb      	strh	r3, [r7, #6]
 8004f80:	4603      	mov	r3, r0
 8004f82:	80bb      	strh	r3, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	807b      	strh	r3, [r7, #2]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	803b      	strh	r3, [r7, #0]
	fillRect(x, y, w, 1, color);
 8004f8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004f90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f94:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f98:	883b      	ldrh	r3, [r7, #0]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f000 f845 	bl	800502c <fillRect>
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd90      	pop	{r4, r7, pc}

08004faa <drawRect>:
    }
}


void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8004faa:	b590      	push	{r4, r7, lr}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4623      	mov	r3, r4
 8004fba:	80fb      	strh	r3, [r7, #6]
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	80bb      	strh	r3, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8004fc8:	8b3b      	ldrh	r3, [r7, #24]
 8004fca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004fce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004fd2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004fd6:	f7ff ffca 	bl	8004f6e <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8004fda:	88ba      	ldrh	r2, [r7, #4]
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	4413      	add	r3, r2
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	b219      	sxth	r1, r3
 8004fe8:	8b3b      	ldrh	r3, [r7, #24]
 8004fea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004fee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004ff2:	f7ff ffbc 	bl	8004f6e <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8004ff6:	8b3b      	ldrh	r3, [r7, #24]
 8004ff8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004ffc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005000:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005004:	f7ff ff94 	bl	8004f30 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	887b      	ldrh	r3, [r7, #2]
 800500c:	4413      	add	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29b      	uxth	r3, r3
 8005014:	b218      	sxth	r0, r3
 8005016:	8b3b      	ldrh	r3, [r7, #24]
 8005018:	f9b7 2000 	ldrsh.w	r2, [r7]
 800501c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005020:	f7ff ff86 	bl	8004f30 <drawFastVLine>
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bd90      	pop	{r4, r7, pc}

0800502c <fillRect>:


void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4623      	mov	r3, r4
 800503c:	80fb      	strh	r3, [r7, #6]
 800503e:	4603      	mov	r3, r0
 8005040:	80bb      	strh	r3, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	807b      	strh	r3, [r7, #2]
 8005046:	4613      	mov	r3, r2
 8005048:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 800504a:	4b95      	ldr	r3, [pc, #596]	; (80052a0 <fillRect+0x274>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <fillRect+0x32>
 8005052:	8c3b      	ldrh	r3, [r7, #32]
 8005054:	4618      	mov	r0, r3
 8005056:	f7fc fdc1 	bl	8001bdc <color565_to_555>
 800505a:	4603      	mov	r3, r0
 800505c:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 800505e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005062:	2b00      	cmp	r3, #0
 8005064:	da08      	bge.n	8005078 <fillRect+0x4c>
        w = -w;
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	425b      	negs	r3, r3
 800506a:	b29b      	uxth	r3, r3
 800506c:	807b      	strh	r3, [r7, #2]
        x -= w;
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	b29b      	uxth	r3, r3
 8005076:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8005078:	88fa      	ldrh	r2, [r7, #6]
 800507a:	887b      	ldrh	r3, [r7, #2]
 800507c:	4413      	add	r3, r2
 800507e:	b29b      	uxth	r3, r3
 8005080:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8005082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da01      	bge.n	800508e <fillRect+0x62>
        x = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 800508e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005092:	f7fc fd8b 	bl	8001bac <width>
 8005096:	4603      	mov	r3, r0
 8005098:	429c      	cmp	r4, r3
 800509a:	dd03      	ble.n	80050a4 <fillRect+0x78>
        end = width();
 800509c:	f7fc fd86 	bl	8001bac <width>
 80050a0:	4603      	mov	r3, r0
 80050a2:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 80050a4:	89fa      	ldrh	r2, [r7, #14]
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 80050ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da08      	bge.n	80050c8 <fillRect+0x9c>
        h = -h;
 80050b6:	883b      	ldrh	r3, [r7, #0]
 80050b8:	425b      	negs	r3, r3
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	803b      	strh	r3, [r7, #0]
        y -= h;
 80050be:	88ba      	ldrh	r2, [r7, #4]
 80050c0:	883b      	ldrh	r3, [r7, #0]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 80050c8:	88ba      	ldrh	r2, [r7, #4]
 80050ca:	883b      	ldrh	r3, [r7, #0]
 80050cc:	4413      	add	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 80050d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da01      	bge.n	80050de <fillRect+0xb2>
        y = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 80050de:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80050e2:	f7fc fd6f 	bl	8001bc4 <height>
 80050e6:	4603      	mov	r3, r0
 80050e8:	429c      	cmp	r4, r3
 80050ea:	dd03      	ble.n	80050f4 <fillRect+0xc8>
        end = height();
 80050ec:	f7fc fd6a 	bl	8001bc4 <height>
 80050f0:	4603      	mov	r3, r0
 80050f2:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 80050f4:	89fa      	ldrh	r2, [r7, #14]
 80050f6:	88bb      	ldrh	r3, [r7, #4]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 80050fe:	88fa      	ldrh	r2, [r7, #6]
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	4413      	add	r3, r2
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29b      	uxth	r3, r3
 800510a:	b21c      	sxth	r4, r3
 800510c:	88ba      	ldrh	r2, [r7, #4]
 800510e:	883b      	ldrh	r3, [r7, #0]
 8005110:	4413      	add	r3, r2
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	b21b      	sxth	r3, r3
 800511a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800511e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005122:	4622      	mov	r2, r4
 8005124:	f7ff fbfa 	bl	800491c <setAddrWindow>
    CS_ACTIVE;
 8005128:	2101      	movs	r1, #1
 800512a:	485e      	ldr	r0, [pc, #376]	; (80052a4 <fillRect+0x278>)
 800512c:	f7fc fcf0 	bl	8001b10 <PIN_LOW>
    WriteCmd(_MW);
 8005130:	2110      	movs	r1, #16
 8005132:	485d      	ldr	r0, [pc, #372]	; (80052a8 <fillRect+0x27c>)
 8005134:	f7fc fcec 	bl	8001b10 <PIN_LOW>
 8005138:	4b5c      	ldr	r3, [pc, #368]	; (80052ac <fillRect+0x280>)
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	0a1b      	lsrs	r3, r3, #8
 800513e:	b29b      	uxth	r3, r3
 8005140:	737b      	strb	r3, [r7, #13]
 8005142:	4b5a      	ldr	r3, [pc, #360]	; (80052ac <fillRect+0x280>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	733b      	strb	r3, [r7, #12]
 8005148:	4b57      	ldr	r3, [pc, #348]	; (80052a8 <fillRect+0x27c>)
 800514a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800514e:	619a      	str	r2, [r3, #24]
 8005150:	4b54      	ldr	r3, [pc, #336]	; (80052a4 <fillRect+0x278>)
 8005152:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005156:	619a      	str	r2, [r3, #24]
 8005158:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <fillRect+0x284>)
 800515a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800515e:	619a      	str	r2, [r3, #24]
 8005160:	7b7b      	ldrb	r3, [r7, #13]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005168:	7b7b      	ldrb	r3, [r7, #13]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	431a      	orrs	r2, r3
 8005172:	7b7b      	ldrb	r3, [r7, #13]
 8005174:	025b      	lsls	r3, r3, #9
 8005176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517a:	431a      	orrs	r2, r3
 800517c:	4b4a      	ldr	r3, [pc, #296]	; (80052a8 <fillRect+0x27c>)
 800517e:	619a      	str	r2, [r3, #24]
 8005180:	7b7b      	ldrb	r3, [r7, #13]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005188:	7b7b      	ldrb	r3, [r7, #13]
 800518a:	105b      	asrs	r3, r3, #1
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	431a      	orrs	r2, r3
 8005192:	7b7b      	ldrb	r3, [r7, #13]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	431a      	orrs	r2, r3
 800519c:	7b7b      	ldrb	r3, [r7, #13]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	431a      	orrs	r2, r3
 80051a4:	4b3f      	ldr	r3, [pc, #252]	; (80052a4 <fillRect+0x278>)
 80051a6:	619a      	str	r2, [r3, #24]
 80051a8:	7b7b      	ldrb	r3, [r7, #13]
 80051aa:	019b      	lsls	r3, r3, #6
 80051ac:	4a40      	ldr	r2, [pc, #256]	; (80052b0 <fillRect+0x284>)
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	6193      	str	r3, [r2, #24]
 80051b4:	2102      	movs	r1, #2
 80051b6:	483c      	ldr	r0, [pc, #240]	; (80052a8 <fillRect+0x27c>)
 80051b8:	f7fc fcaa 	bl	8001b10 <PIN_LOW>
 80051bc:	2102      	movs	r1, #2
 80051be:	483a      	ldr	r0, [pc, #232]	; (80052a8 <fillRect+0x27c>)
 80051c0:	f7fc fca6 	bl	8001b10 <PIN_LOW>
 80051c4:	2102      	movs	r1, #2
 80051c6:	4838      	ldr	r0, [pc, #224]	; (80052a8 <fillRect+0x27c>)
 80051c8:	f7fc fca2 	bl	8001b10 <PIN_LOW>
 80051cc:	2102      	movs	r1, #2
 80051ce:	4836      	ldr	r0, [pc, #216]	; (80052a8 <fillRect+0x27c>)
 80051d0:	f7fc fcae 	bl	8001b30 <PIN_HIGH>
 80051d4:	2102      	movs	r1, #2
 80051d6:	4834      	ldr	r0, [pc, #208]	; (80052a8 <fillRect+0x27c>)
 80051d8:	f7fc fcaa 	bl	8001b30 <PIN_HIGH>
 80051dc:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <fillRect+0x27c>)
 80051de:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80051e2:	619a      	str	r2, [r3, #24]
 80051e4:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <fillRect+0x278>)
 80051e6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80051ea:	619a      	str	r2, [r3, #24]
 80051ec:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <fillRect+0x284>)
 80051ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80051f2:	619a      	str	r2, [r3, #24]
 80051f4:	7b3b      	ldrb	r3, [r7, #12]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80051fc:	7b3b      	ldrb	r3, [r7, #12]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005204:	431a      	orrs	r2, r3
 8005206:	7b3b      	ldrb	r3, [r7, #12]
 8005208:	025b      	lsls	r3, r3, #9
 800520a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520e:	431a      	orrs	r2, r3
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <fillRect+0x27c>)
 8005212:	619a      	str	r2, [r3, #24]
 8005214:	7b3b      	ldrb	r3, [r7, #12]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800521c:	7b3b      	ldrb	r3, [r7, #12]
 800521e:	105b      	asrs	r3, r3, #1
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	431a      	orrs	r2, r3
 8005226:	7b3b      	ldrb	r3, [r7, #12]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	431a      	orrs	r2, r3
 8005230:	7b3b      	ldrb	r3, [r7, #12]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	431a      	orrs	r2, r3
 8005238:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <fillRect+0x278>)
 800523a:	619a      	str	r2, [r3, #24]
 800523c:	7b3b      	ldrb	r3, [r7, #12]
 800523e:	019b      	lsls	r3, r3, #6
 8005240:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <fillRect+0x284>)
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	6193      	str	r3, [r2, #24]
 8005248:	2102      	movs	r1, #2
 800524a:	4817      	ldr	r0, [pc, #92]	; (80052a8 <fillRect+0x27c>)
 800524c:	f7fc fc60 	bl	8001b10 <PIN_LOW>
 8005250:	2102      	movs	r1, #2
 8005252:	4815      	ldr	r0, [pc, #84]	; (80052a8 <fillRect+0x27c>)
 8005254:	f7fc fc5c 	bl	8001b10 <PIN_LOW>
 8005258:	2102      	movs	r1, #2
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <fillRect+0x27c>)
 800525c:	f7fc fc58 	bl	8001b10 <PIN_LOW>
 8005260:	2102      	movs	r1, #2
 8005262:	4811      	ldr	r0, [pc, #68]	; (80052a8 <fillRect+0x27c>)
 8005264:	f7fc fc64 	bl	8001b30 <PIN_HIGH>
 8005268:	2102      	movs	r1, #2
 800526a:	480f      	ldr	r0, [pc, #60]	; (80052a8 <fillRect+0x27c>)
 800526c:	f7fc fc60 	bl	8001b30 <PIN_HIGH>
 8005270:	2110      	movs	r1, #16
 8005272:	480d      	ldr	r0, [pc, #52]	; (80052a8 <fillRect+0x27c>)
 8005274:	f7fc fc5c 	bl	8001b30 <PIN_HIGH>
    if (h > w) {
 8005278:	f9b7 2000 	ldrsh.w	r2, [r7]
 800527c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005280:	429a      	cmp	r2, r3
 8005282:	dd05      	ble.n	8005290 <fillRect+0x264>
        end = h;
 8005284:	883b      	ldrh	r3, [r7, #0]
 8005286:	81fb      	strh	r3, [r7, #14]
        h = w;
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	803b      	strh	r3, [r7, #0]
        w = end;
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8005290:	8c3b      	ldrh	r3, [r7, #32]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	b29b      	uxth	r3, r3
 8005296:	72fb      	strb	r3, [r7, #11]
 8005298:	8c3b      	ldrh	r3, [r7, #32]
 800529a:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 800529c:	e0a9      	b.n	80053f2 <fillRect+0x3c6>
 800529e:	bf00      	nop
 80052a0:	2000004b 	.word	0x2000004b
 80052a4:	40020400 	.word	0x40020400
 80052a8:	40020000 	.word	0x40020000
 80052ac:	200052ce 	.word	0x200052ce
 80052b0:	40020800 	.word	0x40020800
        end = w;
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 80052b8:	4b68      	ldr	r3, [pc, #416]	; (800545c <fillRect+0x430>)
 80052ba:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80052be:	619a      	str	r2, [r3, #24]
 80052c0:	4b67      	ldr	r3, [pc, #412]	; (8005460 <fillRect+0x434>)
 80052c2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80052c6:	619a      	str	r2, [r3, #24]
 80052c8:	4b66      	ldr	r3, [pc, #408]	; (8005464 <fillRect+0x438>)
 80052ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80052ce:	619a      	str	r2, [r3, #24]
 80052d0:	7afb      	ldrb	r3, [r7, #11]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	431a      	orrs	r2, r3
 80052e2:	7afb      	ldrb	r3, [r7, #11]
 80052e4:	025b      	lsls	r3, r3, #9
 80052e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ea:	431a      	orrs	r2, r3
 80052ec:	4b5b      	ldr	r3, [pc, #364]	; (800545c <fillRect+0x430>)
 80052ee:	619a      	str	r2, [r3, #24]
 80052f0:	7afb      	ldrb	r3, [r7, #11]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80052f8:	7afb      	ldrb	r3, [r7, #11]
 80052fa:	105b      	asrs	r3, r3, #1
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	431a      	orrs	r2, r3
 8005302:	7afb      	ldrb	r3, [r7, #11]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	431a      	orrs	r2, r3
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	431a      	orrs	r2, r3
 8005314:	4b52      	ldr	r3, [pc, #328]	; (8005460 <fillRect+0x434>)
 8005316:	619a      	str	r2, [r3, #24]
 8005318:	7afb      	ldrb	r3, [r7, #11]
 800531a:	019b      	lsls	r3, r3, #6
 800531c:	4a51      	ldr	r2, [pc, #324]	; (8005464 <fillRect+0x438>)
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	6193      	str	r3, [r2, #24]
 8005324:	2102      	movs	r1, #2
 8005326:	484d      	ldr	r0, [pc, #308]	; (800545c <fillRect+0x430>)
 8005328:	f7fc fbf2 	bl	8001b10 <PIN_LOW>
 800532c:	2102      	movs	r1, #2
 800532e:	484b      	ldr	r0, [pc, #300]	; (800545c <fillRect+0x430>)
 8005330:	f7fc fbee 	bl	8001b10 <PIN_LOW>
 8005334:	2102      	movs	r1, #2
 8005336:	4849      	ldr	r0, [pc, #292]	; (800545c <fillRect+0x430>)
 8005338:	f7fc fbea 	bl	8001b10 <PIN_LOW>
 800533c:	2102      	movs	r1, #2
 800533e:	4847      	ldr	r0, [pc, #284]	; (800545c <fillRect+0x430>)
 8005340:	f7fc fbf6 	bl	8001b30 <PIN_HIGH>
 8005344:	2102      	movs	r1, #2
 8005346:	4845      	ldr	r0, [pc, #276]	; (800545c <fillRect+0x430>)
 8005348:	f7fc fbf2 	bl	8001b30 <PIN_HIGH>
            write8(lo);
 800534c:	4b43      	ldr	r3, [pc, #268]	; (800545c <fillRect+0x430>)
 800534e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005352:	619a      	str	r2, [r3, #24]
 8005354:	4b42      	ldr	r3, [pc, #264]	; (8005460 <fillRect+0x434>)
 8005356:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800535a:	619a      	str	r2, [r3, #24]
 800535c:	4b41      	ldr	r3, [pc, #260]	; (8005464 <fillRect+0x438>)
 800535e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005362:	619a      	str	r2, [r3, #24]
 8005364:	7abb      	ldrb	r3, [r7, #10]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800536c:	7abb      	ldrb	r3, [r7, #10]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005374:	431a      	orrs	r2, r3
 8005376:	7abb      	ldrb	r3, [r7, #10]
 8005378:	025b      	lsls	r3, r3, #9
 800537a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800537e:	431a      	orrs	r2, r3
 8005380:	4b36      	ldr	r3, [pc, #216]	; (800545c <fillRect+0x430>)
 8005382:	619a      	str	r2, [r3, #24]
 8005384:	7abb      	ldrb	r3, [r7, #10]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800538c:	7abb      	ldrb	r3, [r7, #10]
 800538e:	105b      	asrs	r3, r3, #1
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	431a      	orrs	r2, r3
 8005396:	7abb      	ldrb	r3, [r7, #10]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	431a      	orrs	r2, r3
 80053a0:	7abb      	ldrb	r3, [r7, #10]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	431a      	orrs	r2, r3
 80053a8:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <fillRect+0x434>)
 80053aa:	619a      	str	r2, [r3, #24]
 80053ac:	7abb      	ldrb	r3, [r7, #10]
 80053ae:	019b      	lsls	r3, r3, #6
 80053b0:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <fillRect+0x438>)
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	6193      	str	r3, [r2, #24]
 80053b8:	2102      	movs	r1, #2
 80053ba:	4828      	ldr	r0, [pc, #160]	; (800545c <fillRect+0x430>)
 80053bc:	f7fc fba8 	bl	8001b10 <PIN_LOW>
 80053c0:	2102      	movs	r1, #2
 80053c2:	4826      	ldr	r0, [pc, #152]	; (800545c <fillRect+0x430>)
 80053c4:	f7fc fba4 	bl	8001b10 <PIN_LOW>
 80053c8:	2102      	movs	r1, #2
 80053ca:	4824      	ldr	r0, [pc, #144]	; (800545c <fillRect+0x430>)
 80053cc:	f7fc fba0 	bl	8001b10 <PIN_LOW>
 80053d0:	2102      	movs	r1, #2
 80053d2:	4822      	ldr	r0, [pc, #136]	; (800545c <fillRect+0x430>)
 80053d4:	f7fc fbac 	bl	8001b30 <PIN_HIGH>
 80053d8:	2102      	movs	r1, #2
 80053da:	4820      	ldr	r0, [pc, #128]	; (800545c <fillRect+0x430>)
 80053dc:	f7fc fba8 	bl	8001b30 <PIN_HIGH>
        } while (--end != 0);
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	81fb      	strh	r3, [r7, #14]
 80053e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af63 	bne.w	80052b8 <fillRect+0x28c>
    while (h-- > 0) {
 80053f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	3a01      	subs	r2, #1
 80053fa:	b292      	uxth	r2, r2
 80053fc:	803a      	strh	r2, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f73f af58 	bgt.w	80052b4 <fillRect+0x288>
#endif
    }
    CS_IDLE;
 8005404:	2101      	movs	r1, #1
 8005406:	4816      	ldr	r0, [pc, #88]	; (8005460 <fillRect+0x434>)
 8005408:	f7fc fb92 	bl	8001b30 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <fillRect+0x43c>)
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <fillRect+0x404>
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <fillRect+0x440>)
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	f241 5226 	movw	r2, #5414	; 0x1526
 8005420:	4293      	cmp	r3, r2
 8005422:	d116      	bne.n	8005452 <fillRect+0x426>
 8005424:	4b12      	ldr	r3, [pc, #72]	; (8005470 <fillRect+0x444>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <fillRect+0x426>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8005430:	f7fc fbbc 	bl	8001bac <width>
 8005434:	4603      	mov	r3, r0
 8005436:	3b01      	subs	r3, #1
 8005438:	b29b      	uxth	r3, r3
 800543a:	b21c      	sxth	r4, r3
 800543c:	f7fc fbc2 	bl	8001bc4 <height>
 8005440:	4603      	mov	r3, r0
 8005442:	3b01      	subs	r3, #1
 8005444:	b29b      	uxth	r3, r3
 8005446:	b21b      	sxth	r3, r3
 8005448:	4622      	mov	r2, r4
 800544a:	2100      	movs	r1, #0
 800544c:	2000      	movs	r0, #0
 800544e:	f7ff fa65 	bl	800491c <setAddrWindow>
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bd90      	pop	{r4, r7, pc}
 800545a:	bf00      	nop
 800545c:	40020000 	.word	0x40020000
 8005460:	40020400 	.word	0x40020400
 8005464:	40020800 	.word	0x40020800
 8005468:	200052d0 	.word	0x200052d0
 800546c:	200052de 	.word	0x200052de
 8005470:	2000004d 	.word	0x2000004d

08005474 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <delay+0x2c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2200      	movs	r2, #0
 8005482:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8005484:	bf00      	nop
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <delay+0x2c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	d8f9      	bhi.n	8005486 <delay+0x12>
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	2000419c 	.word	0x2000419c

080054a4 <desenhaPixel>:


/****************** Integração com câmera ***********************/
//Testado com LCF TFT ILI9340
void desenhaPixel(uint16_t pixel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	80fb      	strh	r3, [r7, #6]
	write16(pixel);
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	73fb      	strb	r3, [r7, #15]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	73bb      	strb	r3, [r7, #14]
 80054ba:	4b4c      	ldr	r3, [pc, #304]	; (80055ec <desenhaPixel+0x148>)
 80054bc:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80054c0:	619a      	str	r2, [r3, #24]
 80054c2:	4b4b      	ldr	r3, [pc, #300]	; (80055f0 <desenhaPixel+0x14c>)
 80054c4:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80054c8:	619a      	str	r2, [r3, #24]
 80054ca:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <desenhaPixel+0x150>)
 80054cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80054d0:	619a      	str	r2, [r3, #24]
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e2:	431a      	orrs	r2, r3
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	025b      	lsls	r3, r3, #9
 80054e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ec:	431a      	orrs	r2, r3
 80054ee:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <desenhaPixel+0x148>)
 80054f0:	619a      	str	r2, [r3, #24]
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	105b      	asrs	r3, r3, #1
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	431a      	orrs	r2, r3
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	431a      	orrs	r2, r3
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	431a      	orrs	r2, r3
 8005516:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <desenhaPixel+0x14c>)
 8005518:	619a      	str	r2, [r3, #24]
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	019b      	lsls	r3, r3, #6
 800551e:	4a35      	ldr	r2, [pc, #212]	; (80055f4 <desenhaPixel+0x150>)
 8005520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005524:	6193      	str	r3, [r2, #24]
 8005526:	2102      	movs	r1, #2
 8005528:	4830      	ldr	r0, [pc, #192]	; (80055ec <desenhaPixel+0x148>)
 800552a:	f7fc faf1 	bl	8001b10 <PIN_LOW>
 800552e:	2102      	movs	r1, #2
 8005530:	482e      	ldr	r0, [pc, #184]	; (80055ec <desenhaPixel+0x148>)
 8005532:	f7fc faed 	bl	8001b10 <PIN_LOW>
 8005536:	2102      	movs	r1, #2
 8005538:	482c      	ldr	r0, [pc, #176]	; (80055ec <desenhaPixel+0x148>)
 800553a:	f7fc fae9 	bl	8001b10 <PIN_LOW>
 800553e:	2102      	movs	r1, #2
 8005540:	482a      	ldr	r0, [pc, #168]	; (80055ec <desenhaPixel+0x148>)
 8005542:	f7fc faf5 	bl	8001b30 <PIN_HIGH>
 8005546:	2102      	movs	r1, #2
 8005548:	4828      	ldr	r0, [pc, #160]	; (80055ec <desenhaPixel+0x148>)
 800554a:	f7fc faf1 	bl	8001b30 <PIN_HIGH>
 800554e:	4b27      	ldr	r3, [pc, #156]	; (80055ec <desenhaPixel+0x148>)
 8005550:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8005554:	619a      	str	r2, [r3, #24]
 8005556:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <desenhaPixel+0x14c>)
 8005558:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800555c:	619a      	str	r2, [r3, #24]
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <desenhaPixel+0x150>)
 8005560:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005564:	619a      	str	r2, [r3, #24]
 8005566:	7bbb      	ldrb	r3, [r7, #14]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005576:	431a      	orrs	r2, r3
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	025b      	lsls	r3, r3, #9
 800557c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005580:	431a      	orrs	r2, r3
 8005582:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <desenhaPixel+0x148>)
 8005584:	619a      	str	r2, [r3, #24]
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800558e:	7bbb      	ldrb	r3, [r7, #14]
 8005590:	105b      	asrs	r3, r3, #1
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	7bbb      	ldrb	r3, [r7, #14]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	431a      	orrs	r2, r3
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	431a      	orrs	r2, r3
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <desenhaPixel+0x14c>)
 80055ac:	619a      	str	r2, [r3, #24]
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <desenhaPixel+0x150>)
 80055b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b8:	6193      	str	r3, [r2, #24]
 80055ba:	2102      	movs	r1, #2
 80055bc:	480b      	ldr	r0, [pc, #44]	; (80055ec <desenhaPixel+0x148>)
 80055be:	f7fc faa7 	bl	8001b10 <PIN_LOW>
 80055c2:	2102      	movs	r1, #2
 80055c4:	4809      	ldr	r0, [pc, #36]	; (80055ec <desenhaPixel+0x148>)
 80055c6:	f7fc faa3 	bl	8001b10 <PIN_LOW>
 80055ca:	2102      	movs	r1, #2
 80055cc:	4807      	ldr	r0, [pc, #28]	; (80055ec <desenhaPixel+0x148>)
 80055ce:	f7fc fa9f 	bl	8001b10 <PIN_LOW>
 80055d2:	2102      	movs	r1, #2
 80055d4:	4805      	ldr	r0, [pc, #20]	; (80055ec <desenhaPixel+0x148>)
 80055d6:	f7fc faab 	bl	8001b30 <PIN_HIGH>
 80055da:	2102      	movs	r1, #2
 80055dc:	4803      	ldr	r0, [pc, #12]	; (80055ec <desenhaPixel+0x148>)
 80055de:	f7fc faa7 	bl	8001b30 <PIN_HIGH>
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40020000 	.word	0x40020000
 80055f0:	40020400 	.word	0x40020400
 80055f4:	40020800 	.word	0x40020800

080055f8 <inicioDados>:


void inicioDados(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
	CS_ACTIVE;
 80055fe:	2101      	movs	r1, #1
 8005600:	4853      	ldr	r0, [pc, #332]	; (8005750 <inicioDados+0x158>)
 8005602:	f7fc fa85 	bl	8001b10 <PIN_LOW>
	WriteCmd(0x2C);
 8005606:	2110      	movs	r1, #16
 8005608:	4852      	ldr	r0, [pc, #328]	; (8005754 <inicioDados+0x15c>)
 800560a:	f7fc fa81 	bl	8001b10 <PIN_LOW>
 800560e:	2300      	movs	r3, #0
 8005610:	71fb      	strb	r3, [r7, #7]
 8005612:	232c      	movs	r3, #44	; 0x2c
 8005614:	71bb      	strb	r3, [r7, #6]
 8005616:	4b4f      	ldr	r3, [pc, #316]	; (8005754 <inicioDados+0x15c>)
 8005618:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800561c:	619a      	str	r2, [r3, #24]
 800561e:	4b4c      	ldr	r3, [pc, #304]	; (8005750 <inicioDados+0x158>)
 8005620:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8005624:	619a      	str	r2, [r3, #24]
 8005626:	4b4c      	ldr	r3, [pc, #304]	; (8005758 <inicioDados+0x160>)
 8005628:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800562c:	619a      	str	r2, [r3, #24]
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563e:	431a      	orrs	r2, r3
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	025b      	lsls	r3, r3, #9
 8005644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005648:	431a      	orrs	r2, r3
 800564a:	4b42      	ldr	r3, [pc, #264]	; (8005754 <inicioDados+0x15c>)
 800564c:	619a      	str	r2, [r3, #24]
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	105b      	asrs	r3, r3, #1
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	431a      	orrs	r2, r3
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	431a      	orrs	r2, r3
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	431a      	orrs	r2, r3
 8005672:	4b37      	ldr	r3, [pc, #220]	; (8005750 <inicioDados+0x158>)
 8005674:	619a      	str	r2, [r3, #24]
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	019b      	lsls	r3, r3, #6
 800567a:	4a37      	ldr	r2, [pc, #220]	; (8005758 <inicioDados+0x160>)
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	6193      	str	r3, [r2, #24]
 8005682:	2102      	movs	r1, #2
 8005684:	4833      	ldr	r0, [pc, #204]	; (8005754 <inicioDados+0x15c>)
 8005686:	f7fc fa43 	bl	8001b10 <PIN_LOW>
 800568a:	2102      	movs	r1, #2
 800568c:	4831      	ldr	r0, [pc, #196]	; (8005754 <inicioDados+0x15c>)
 800568e:	f7fc fa3f 	bl	8001b10 <PIN_LOW>
 8005692:	2102      	movs	r1, #2
 8005694:	482f      	ldr	r0, [pc, #188]	; (8005754 <inicioDados+0x15c>)
 8005696:	f7fc fa3b 	bl	8001b10 <PIN_LOW>
 800569a:	2102      	movs	r1, #2
 800569c:	482d      	ldr	r0, [pc, #180]	; (8005754 <inicioDados+0x15c>)
 800569e:	f7fc fa47 	bl	8001b30 <PIN_HIGH>
 80056a2:	2102      	movs	r1, #2
 80056a4:	482b      	ldr	r0, [pc, #172]	; (8005754 <inicioDados+0x15c>)
 80056a6:	f7fc fa43 	bl	8001b30 <PIN_HIGH>
 80056aa:	4b2a      	ldr	r3, [pc, #168]	; (8005754 <inicioDados+0x15c>)
 80056ac:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80056b0:	619a      	str	r2, [r3, #24]
 80056b2:	4b27      	ldr	r3, [pc, #156]	; (8005750 <inicioDados+0x158>)
 80056b4:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80056b8:	619a      	str	r2, [r3, #24]
 80056ba:	4b27      	ldr	r3, [pc, #156]	; (8005758 <inicioDados+0x160>)
 80056bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	79bb      	ldrb	r3, [r7, #6]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80056ca:	79bb      	ldrb	r3, [r7, #6]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d2:	431a      	orrs	r2, r3
 80056d4:	79bb      	ldrb	r3, [r7, #6]
 80056d6:	025b      	lsls	r3, r3, #9
 80056d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056dc:	431a      	orrs	r2, r3
 80056de:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <inicioDados+0x15c>)
 80056e0:	619a      	str	r2, [r3, #24]
 80056e2:	79bb      	ldrb	r3, [r7, #6]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80056ea:	79bb      	ldrb	r3, [r7, #6]
 80056ec:	105b      	asrs	r3, r3, #1
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	431a      	orrs	r2, r3
 80056f4:	79bb      	ldrb	r3, [r7, #6]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	431a      	orrs	r2, r3
 80056fe:	79bb      	ldrb	r3, [r7, #6]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	431a      	orrs	r2, r3
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <inicioDados+0x158>)
 8005708:	619a      	str	r2, [r3, #24]
 800570a:	79bb      	ldrb	r3, [r7, #6]
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <inicioDados+0x160>)
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	6193      	str	r3, [r2, #24]
 8005716:	2102      	movs	r1, #2
 8005718:	480e      	ldr	r0, [pc, #56]	; (8005754 <inicioDados+0x15c>)
 800571a:	f7fc f9f9 	bl	8001b10 <PIN_LOW>
 800571e:	2102      	movs	r1, #2
 8005720:	480c      	ldr	r0, [pc, #48]	; (8005754 <inicioDados+0x15c>)
 8005722:	f7fc f9f5 	bl	8001b10 <PIN_LOW>
 8005726:	2102      	movs	r1, #2
 8005728:	480a      	ldr	r0, [pc, #40]	; (8005754 <inicioDados+0x15c>)
 800572a:	f7fc f9f1 	bl	8001b10 <PIN_LOW>
 800572e:	2102      	movs	r1, #2
 8005730:	4808      	ldr	r0, [pc, #32]	; (8005754 <inicioDados+0x15c>)
 8005732:	f7fc f9fd 	bl	8001b30 <PIN_HIGH>
 8005736:	2102      	movs	r1, #2
 8005738:	4806      	ldr	r0, [pc, #24]	; (8005754 <inicioDados+0x15c>)
 800573a:	f7fc f9f9 	bl	8001b30 <PIN_HIGH>
 800573e:	2110      	movs	r1, #16
 8005740:	4804      	ldr	r0, [pc, #16]	; (8005754 <inicioDados+0x15c>)
 8005742:	f7fc f9f5 	bl	8001b30 <PIN_HIGH>
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40020400 	.word	0x40020400
 8005754:	40020000 	.word	0x40020000
 8005758:	40020800 	.word	0x40020800

0800575c <fimDados>:


void fimDados(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
	CS_IDLE;
 8005760:	2101      	movs	r1, #1
 8005762:	4802      	ldr	r0, [pc, #8]	; (800576c <fimDados+0x10>)
 8005764:	f7fc f9e4 	bl	8001b30 <PIN_HIGH>
}
 8005768:	bf00      	nop
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40020400 	.word	0x40020400

08005770 <tft_gpio_init>:


/****************** Inicialização de GPIOs **********************/
void tft_gpio_init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	4b32      	ldr	r3, [pc, #200]	; (8005844 <tft_gpio_init+0xd4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	4a31      	ldr	r2, [pc, #196]	; (8005844 <tft_gpio_init+0xd4>)
 8005780:	f043 0304 	orr.w	r3, r3, #4
 8005784:	6313      	str	r3, [r2, #48]	; 0x30
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <tft_gpio_init+0xd4>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <tft_gpio_init+0xd4>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	4a2a      	ldr	r2, [pc, #168]	; (8005844 <tft_gpio_init+0xd4>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	6313      	str	r3, [r2, #48]	; 0x30
 80057a2:	4b28      	ldr	r3, [pc, #160]	; (8005844 <tft_gpio_init+0xd4>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	607b      	str	r3, [r7, #4]
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <tft_gpio_init+0xd4>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	4a23      	ldr	r2, [pc, #140]	; (8005844 <tft_gpio_init+0xd4>)
 80057b8:	f043 0302 	orr.w	r3, r3, #2
 80057bc:	6313      	str	r3, [r2, #48]	; 0x30
 80057be:	4b21      	ldr	r3, [pc, #132]	; (8005844 <tft_gpio_init+0xd4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 80057ca:	2101      	movs	r1, #1
 80057cc:	481e      	ldr	r0, [pc, #120]	; (8005848 <tft_gpio_init+0xd8>)
 80057ce:	f7fc f9d5 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 80057d2:	2102      	movs	r1, #2
 80057d4:	481c      	ldr	r0, [pc, #112]	; (8005848 <tft_gpio_init+0xd8>)
 80057d6:	f7fc f9d1 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 80057da:	2110      	movs	r1, #16
 80057dc:	481a      	ldr	r0, [pc, #104]	; (8005848 <tft_gpio_init+0xd8>)
 80057de:	f7fc f9cd 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 80057e2:	2101      	movs	r1, #1
 80057e4:	4819      	ldr	r0, [pc, #100]	; (800584c <tft_gpio_init+0xdc>)
 80057e6:	f7fc f9c9 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 80057ea:	2102      	movs	r1, #2
 80057ec:	4818      	ldr	r0, [pc, #96]	; (8005850 <tft_gpio_init+0xe0>)
 80057ee:	f7fc f9c5 	bl	8001b7c <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 80057f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057f6:	4814      	ldr	r0, [pc, #80]	; (8005848 <tft_gpio_init+0xd8>)
 80057f8:	f7fc f9c0 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	4814      	ldr	r0, [pc, #80]	; (8005850 <tft_gpio_init+0xe0>)
 8005800:	f7fc f9bc 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8005804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005808:	480f      	ldr	r0, [pc, #60]	; (8005848 <tft_gpio_init+0xd8>)
 800580a:	f7fc f9b7 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 800580e:	2108      	movs	r1, #8
 8005810:	480e      	ldr	r0, [pc, #56]	; (800584c <tft_gpio_init+0xdc>)
 8005812:	f7fc f9b3 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8005816:	2120      	movs	r1, #32
 8005818:	480c      	ldr	r0, [pc, #48]	; (800584c <tft_gpio_init+0xdc>)
 800581a:	f7fc f9af 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 800581e:	2110      	movs	r1, #16
 8005820:	480a      	ldr	r0, [pc, #40]	; (800584c <tft_gpio_init+0xdc>)
 8005822:	f7fc f9ab 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8005826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800582a:	4808      	ldr	r0, [pc, #32]	; (800584c <tft_gpio_init+0xdc>)
 800582c:	f7fc f9a6 	bl	8001b7c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8005830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005834:	4804      	ldr	r0, [pc, #16]	; (8005848 <tft_gpio_init+0xd8>)
 8005836:	f7fc f9a1 	bl	8001b7c <PIN_OUTPUT>
}
 800583a:	bf00      	nop
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	40020000 	.word	0x40020000
 800584c:	40020400 	.word	0x40020400
 8005850:	40020800 	.word	0x40020800

08005854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800588c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800585a:	490e      	ldr	r1, [pc, #56]	; (8005894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800585c:	4a0e      	ldr	r2, [pc, #56]	; (8005898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800585e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005860:	e002      	b.n	8005868 <LoopCopyDataInit>

08005862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005866:	3304      	adds	r3, #4

08005868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800586a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800586c:	d3f9      	bcc.n	8005862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800586e:	4a0b      	ldr	r2, [pc, #44]	; (800589c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005870:	4c0b      	ldr	r4, [pc, #44]	; (80058a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005874:	e001      	b.n	800587a <LoopFillZerobss>

08005876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005878:	3204      	adds	r2, #4

0800587a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800587a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800587c:	d3fb      	bcc.n	8005876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800587e:	f7fc f935 	bl	8001aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005882:	f003 fc21 	bl	80090c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005886:	f7fb fc89 	bl	800119c <main>
  bx  lr    
 800588a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800588c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005894:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8005898:	080099b0 	.word	0x080099b0
  ldr r2, =_sbss
 800589c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80058a0:	2000735c 	.word	0x2000735c

080058a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058a4:	e7fe      	b.n	80058a4 <ADC_IRQHandler>
	...

080058a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058ac:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <HAL_Init+0x40>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0d      	ldr	r2, [pc, #52]	; (80058e8 <HAL_Init+0x40>)
 80058b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_Init+0x40>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <HAL_Init+0x40>)
 80058be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058c4:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <HAL_Init+0x40>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a07      	ldr	r2, [pc, #28]	; (80058e8 <HAL_Init+0x40>)
 80058ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058d0:	2003      	movs	r0, #3
 80058d2:	f000 f931 	bl	8005b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058d6:	2000      	movs	r0, #0
 80058d8:	f000 f808 	bl	80058ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058dc:	f7fb ff32 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023c00 	.word	0x40023c00

080058ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058f4:	4b12      	ldr	r3, [pc, #72]	; (8005940 <HAL_InitTick+0x54>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <HAL_InitTick+0x58>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	4619      	mov	r1, r3
 80058fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005902:	fbb3 f3f1 	udiv	r3, r3, r1
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f93b 	bl	8005b86 <HAL_SYSTICK_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e00e      	b.n	8005938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b0f      	cmp	r3, #15
 800591e:	d80a      	bhi.n	8005936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005920:	2200      	movs	r2, #0
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	f000 f911 	bl	8005b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800592c:	4a06      	ldr	r2, [pc, #24]	; (8005948 <HAL_InitTick+0x5c>)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000004 	.word	0x20000004
 8005944:	20000010 	.word	0x20000010
 8005948:	2000000c 	.word	0x2000000c

0800594c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_IncTick+0x20>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_IncTick+0x24>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4413      	add	r3, r2
 800595c:	4a04      	ldr	r2, [pc, #16]	; (8005970 <HAL_IncTick+0x24>)
 800595e:	6013      	str	r3, [r2, #0]
}
 8005960:	bf00      	nop
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000010 	.word	0x20000010
 8005970:	200052e8 	.word	0x200052e8

08005974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  return uwTick;
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <HAL_GetTick+0x14>)
 800597a:	681b      	ldr	r3, [r3, #0]
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	200052e8 	.word	0x200052e8

0800598c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005994:	f7ff ffee 	bl	8005974 <HAL_GetTick>
 8005998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a4:	d005      	beq.n	80059b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <HAL_Delay+0x44>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059b2:	bf00      	nop
 80059b4:	f7ff ffde 	bl	8005974 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d8f7      	bhi.n	80059b4 <HAL_Delay+0x28>
  {
  }
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000010 	.word	0x20000010

080059d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059e4:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <__NVIC_SetPriorityGrouping+0x44>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059f0:	4013      	ands	r3, r2
 80059f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a06:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <__NVIC_SetPriorityGrouping+0x44>)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	60d3      	str	r3, [r2, #12]
}
 8005a0c:	bf00      	nop
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	e000ed00 	.word	0xe000ed00

08005a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <__NVIC_GetPriorityGrouping+0x18>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	0a1b      	lsrs	r3, r3, #8
 8005a26:	f003 0307 	and.w	r3, r3, #7
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000ed00 	.word	0xe000ed00

08005a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	db0a      	blt.n	8005a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	490c      	ldr	r1, [pc, #48]	; (8005a84 <__NVIC_SetPriority+0x4c>)
 8005a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a56:	0112      	lsls	r2, r2, #4
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a60:	e00a      	b.n	8005a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	4908      	ldr	r1, [pc, #32]	; (8005a88 <__NVIC_SetPriority+0x50>)
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	3b04      	subs	r3, #4
 8005a70:	0112      	lsls	r2, r2, #4
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	440b      	add	r3, r1
 8005a76:	761a      	strb	r2, [r3, #24]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	e000e100 	.word	0xe000e100
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f1c3 0307 	rsb	r3, r3, #7
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	bf28      	it	cs
 8005aaa:	2304      	movcs	r3, #4
 8005aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d902      	bls.n	8005abc <NVIC_EncodePriority+0x30>
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3b03      	subs	r3, #3
 8005aba:	e000      	b.n	8005abe <NVIC_EncodePriority+0x32>
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43da      	mvns	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	401a      	ands	r2, r3
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	43d9      	mvns	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae4:	4313      	orrs	r3, r2
         );
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3724      	adds	r7, #36	; 0x24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b04:	d301      	bcc.n	8005b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b06:	2301      	movs	r3, #1
 8005b08:	e00f      	b.n	8005b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <SysTick_Config+0x40>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b12:	210f      	movs	r1, #15
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	f7ff ff8e 	bl	8005a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <SysTick_Config+0x40>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b22:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <SysTick_Config+0x40>)
 8005b24:	2207      	movs	r2, #7
 8005b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000e010 	.word	0xe000e010

08005b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff ff47 	bl	80059d4 <__NVIC_SetPriorityGrouping>
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4603      	mov	r3, r0
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b60:	f7ff ff5c 	bl	8005a1c <__NVIC_GetPriorityGrouping>
 8005b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f7ff ff8e 	bl	8005a8c <NVIC_EncodePriority>
 8005b70:	4602      	mov	r2, r0
 8005b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ff5d 	bl	8005a38 <__NVIC_SetPriority>
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff ffb0 	bl	8005af4 <SysTick_Config>
 8005b94:	4603      	mov	r3, r0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e165      	b.n	8005e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	f040 8154 	bne.w	8005e82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d005      	beq.n	8005bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d130      	bne.n	8005c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c28:	2201      	movs	r2, #1
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 0201 	and.w	r2, r3, #1
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d017      	beq.n	8005c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d123      	bne.n	8005ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	08da      	lsrs	r2, r3, #3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3208      	adds	r2, #8
 8005ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	220f      	movs	r2, #15
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	08da      	lsrs	r2, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3208      	adds	r2, #8
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	2203      	movs	r2, #3
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0203 	and.w	r2, r3, #3
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80ae 	beq.w	8005e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ea0 <HAL_GPIO_Init+0x300>)
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	4a5c      	ldr	r2, [pc, #368]	; (8005ea0 <HAL_GPIO_Init+0x300>)
 8005d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d34:	6453      	str	r3, [r2, #68]	; 0x44
 8005d36:	4b5a      	ldr	r3, [pc, #360]	; (8005ea0 <HAL_GPIO_Init+0x300>)
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d42:	4a58      	ldr	r2, [pc, #352]	; (8005ea4 <HAL_GPIO_Init+0x304>)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	3302      	adds	r3, #2
 8005d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	220f      	movs	r2, #15
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a4f      	ldr	r2, [pc, #316]	; (8005ea8 <HAL_GPIO_Init+0x308>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d025      	beq.n	8005dba <HAL_GPIO_Init+0x21a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a4e      	ldr	r2, [pc, #312]	; (8005eac <HAL_GPIO_Init+0x30c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01f      	beq.n	8005db6 <HAL_GPIO_Init+0x216>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a4d      	ldr	r2, [pc, #308]	; (8005eb0 <HAL_GPIO_Init+0x310>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d019      	beq.n	8005db2 <HAL_GPIO_Init+0x212>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a4c      	ldr	r2, [pc, #304]	; (8005eb4 <HAL_GPIO_Init+0x314>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_GPIO_Init+0x20e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a4b      	ldr	r2, [pc, #300]	; (8005eb8 <HAL_GPIO_Init+0x318>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00d      	beq.n	8005daa <HAL_GPIO_Init+0x20a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a4a      	ldr	r2, [pc, #296]	; (8005ebc <HAL_GPIO_Init+0x31c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <HAL_GPIO_Init+0x206>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a49      	ldr	r2, [pc, #292]	; (8005ec0 <HAL_GPIO_Init+0x320>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d101      	bne.n	8005da2 <HAL_GPIO_Init+0x202>
 8005d9e:	2306      	movs	r3, #6
 8005da0:	e00c      	b.n	8005dbc <HAL_GPIO_Init+0x21c>
 8005da2:	2307      	movs	r3, #7
 8005da4:	e00a      	b.n	8005dbc <HAL_GPIO_Init+0x21c>
 8005da6:	2305      	movs	r3, #5
 8005da8:	e008      	b.n	8005dbc <HAL_GPIO_Init+0x21c>
 8005daa:	2304      	movs	r3, #4
 8005dac:	e006      	b.n	8005dbc <HAL_GPIO_Init+0x21c>
 8005dae:	2303      	movs	r3, #3
 8005db0:	e004      	b.n	8005dbc <HAL_GPIO_Init+0x21c>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e002      	b.n	8005dbc <HAL_GPIO_Init+0x21c>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <HAL_GPIO_Init+0x21c>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	f002 0203 	and.w	r2, r2, #3
 8005dc2:	0092      	lsls	r2, r2, #2
 8005dc4:	4093      	lsls	r3, r2
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dcc:	4935      	ldr	r1, [pc, #212]	; (8005ea4 <HAL_GPIO_Init+0x304>)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	089b      	lsrs	r3, r3, #2
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005dda:	4b3a      	ldr	r3, [pc, #232]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dfe:	4a31      	ldr	r2, [pc, #196]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e04:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e28:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e2e:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e52:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	43db      	mvns	r3, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e7c:	4a11      	ldr	r2, [pc, #68]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	f67f ae96 	bls.w	8005bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	40013800 	.word	0x40013800
 8005ea8:	40020000 	.word	0x40020000
 8005eac:	40020400 	.word	0x40020400
 8005eb0:	40020800 	.word	0x40020800
 8005eb4:	40020c00 	.word	0x40020c00
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	40021400 	.word	0x40021400
 8005ec0:	40021800 	.word	0x40021800
 8005ec4:	40013c00 	.word	0x40013c00

08005ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ee4:	e003      	b.n	8005eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ee6:	887b      	ldrh	r3, [r7, #2]
 8005ee8:	041a      	lsls	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	619a      	str	r2, [r3, #24]
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	460b      	mov	r3, r1
 8005f04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f0c:	887a      	ldrh	r2, [r7, #2]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4013      	ands	r3, r2
 8005f12:	041a      	lsls	r2, r3, #16
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	43d9      	mvns	r1, r3
 8005f18:	887b      	ldrh	r3, [r7, #2]
 8005f1a:	400b      	ands	r3, r1
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	619a      	str	r2, [r3, #24]
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e12b      	b.n	800619a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fb fc1c 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2224      	movs	r2, #36	; 0x24
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f94:	f000 fd0a 	bl	80069ac <HAL_RCC_GetPCLK1Freq>
 8005f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4a81      	ldr	r2, [pc, #516]	; (80061a4 <HAL_I2C_Init+0x274>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d807      	bhi.n	8005fb4 <HAL_I2C_Init+0x84>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a80      	ldr	r2, [pc, #512]	; (80061a8 <HAL_I2C_Init+0x278>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	bf94      	ite	ls
 8005fac:	2301      	movls	r3, #1
 8005fae:	2300      	movhi	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	e006      	b.n	8005fc2 <HAL_I2C_Init+0x92>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4a7d      	ldr	r2, [pc, #500]	; (80061ac <HAL_I2C_Init+0x27c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	bf94      	ite	ls
 8005fbc:	2301      	movls	r3, #1
 8005fbe:	2300      	movhi	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e0e7      	b.n	800619a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4a78      	ldr	r2, [pc, #480]	; (80061b0 <HAL_I2C_Init+0x280>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	0c9b      	lsrs	r3, r3, #18
 8005fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4a6a      	ldr	r2, [pc, #424]	; (80061a4 <HAL_I2C_Init+0x274>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d802      	bhi.n	8006004 <HAL_I2C_Init+0xd4>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	3301      	adds	r3, #1
 8006002:	e009      	b.n	8006018 <HAL_I2C_Init+0xe8>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	4a69      	ldr	r2, [pc, #420]	; (80061b4 <HAL_I2C_Init+0x284>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	099b      	lsrs	r3, r3, #6
 8006016:	3301      	adds	r3, #1
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	430b      	orrs	r3, r1
 800601e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800602a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	495c      	ldr	r1, [pc, #368]	; (80061a4 <HAL_I2C_Init+0x274>)
 8006034:	428b      	cmp	r3, r1
 8006036:	d819      	bhi.n	800606c <HAL_I2C_Init+0x13c>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1e59      	subs	r1, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	fbb1 f3f3 	udiv	r3, r1, r3
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	f640 73fc 	movw	r3, #4092	; 0xffc
 800604c:	400b      	ands	r3, r1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_I2C_Init+0x138>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1e59      	subs	r1, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006060:	3301      	adds	r3, #1
 8006062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006066:	e051      	b.n	800610c <HAL_I2C_Init+0x1dc>
 8006068:	2304      	movs	r3, #4
 800606a:	e04f      	b.n	800610c <HAL_I2C_Init+0x1dc>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d111      	bne.n	8006098 <HAL_I2C_Init+0x168>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1e58      	subs	r0, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6859      	ldr	r1, [r3, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	440b      	add	r3, r1
 8006082:	fbb0 f3f3 	udiv	r3, r0, r3
 8006086:	3301      	adds	r3, #1
 8006088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	e012      	b.n	80060be <HAL_I2C_Init+0x18e>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	1e58      	subs	r0, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6859      	ldr	r1, [r3, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	0099      	lsls	r1, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ae:	3301      	adds	r3, #1
 80060b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Init+0x196>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e022      	b.n	800610c <HAL_I2C_Init+0x1dc>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10e      	bne.n	80060ec <HAL_I2C_Init+0x1bc>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1e58      	subs	r0, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	440b      	add	r3, r1
 80060dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80060e0:	3301      	adds	r3, #1
 80060e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ea:	e00f      	b.n	800610c <HAL_I2C_Init+0x1dc>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1e58      	subs	r0, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6859      	ldr	r1, [r3, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	0099      	lsls	r1, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006102:	3301      	adds	r3, #1
 8006104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	6809      	ldr	r1, [r1, #0]
 8006110:	4313      	orrs	r3, r2
 8006112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800613a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6911      	ldr	r1, [r2, #16]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68d2      	ldr	r2, [r2, #12]
 8006146:	4311      	orrs	r1, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	430b      	orrs	r3, r1
 800614e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695a      	ldr	r2, [r3, #20]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	000186a0 	.word	0x000186a0
 80061a8:	001e847f 	.word	0x001e847f
 80061ac:	003d08ff 	.word	0x003d08ff
 80061b0:	431bde83 	.word	0x431bde83
 80061b4:	10624dd3 	.word	0x10624dd3

080061b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	461a      	mov	r2, r3
 80061c4:	460b      	mov	r3, r1
 80061c6:	817b      	strh	r3, [r7, #10]
 80061c8:	4613      	mov	r3, r2
 80061ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061cc:	f7ff fbd2 	bl	8005974 <HAL_GetTick>
 80061d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b20      	cmp	r3, #32
 80061dc:	f040 80e0 	bne.w	80063a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	2319      	movs	r3, #25
 80061e6:	2201      	movs	r2, #1
 80061e8:	4970      	ldr	r1, [pc, #448]	; (80063ac <HAL_I2C_Master_Transmit+0x1f4>)
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f964 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
 80061f8:	e0d3      	b.n	80063a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_I2C_Master_Transmit+0x50>
 8006204:	2302      	movs	r3, #2
 8006206:	e0cc      	b.n	80063a2 <HAL_I2C_Master_Transmit+0x1ea>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b01      	cmp	r3, #1
 800621c:	d007      	beq.n	800622e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800623c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2221      	movs	r2, #33	; 0x21
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2210      	movs	r2, #16
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	893a      	ldrh	r2, [r7, #8]
 800625e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a50      	ldr	r2, [pc, #320]	; (80063b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800626e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006270:	8979      	ldrh	r1, [r7, #10]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f89c 	bl	80063b4 <I2C_MasterRequestWrite>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e08d      	b.n	80063a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800629c:	e066      	b.n	800636c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	6a39      	ldr	r1, [r7, #32]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f9de 	bl	8006664 <I2C_WaitOnTXEFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d107      	bne.n	80062c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06b      	b.n	80063a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b04      	cmp	r3, #4
 8006306:	d11b      	bne.n	8006340 <HAL_I2C_Master_Transmit+0x188>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630c:	2b00      	cmp	r3, #0
 800630e:	d017      	beq.n	8006340 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	6a39      	ldr	r1, [r7, #32]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f9ce 	bl	80066e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	2b04      	cmp	r3, #4
 8006356:	d107      	bne.n	8006368 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006366:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e01a      	b.n	80063a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d194      	bne.n	800629e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	00100002 	.word	0x00100002
 80063b0:	ffff0000 	.word	0xffff0000

080063b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	460b      	mov	r3, r1
 80063c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d006      	beq.n	80063de <I2C_MasterRequestWrite+0x2a>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d003      	beq.n	80063de <I2C_MasterRequestWrite+0x2a>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063dc:	d108      	bne.n	80063f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	e00b      	b.n	8006408 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	2b12      	cmp	r3, #18
 80063f6:	d107      	bne.n	8006408 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006406:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f84f 	bl	80064b8 <I2C_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00d      	beq.n	800643c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642e:	d103      	bne.n	8006438 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e035      	b.n	80064a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006444:	d108      	bne.n	8006458 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006446:	897b      	ldrh	r3, [r7, #10]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006454:	611a      	str	r2, [r3, #16]
 8006456:	e01b      	b.n	8006490 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006458:	897b      	ldrh	r3, [r7, #10]
 800645a:	11db      	asrs	r3, r3, #7
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f003 0306 	and.w	r3, r3, #6
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f063 030f 	orn	r3, r3, #15
 8006468:	b2da      	uxtb	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	490e      	ldr	r1, [pc, #56]	; (80064b0 <I2C_MasterRequestWrite+0xfc>)
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f875 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e010      	b.n	80064a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006486:	897b      	ldrh	r3, [r7, #10]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4907      	ldr	r1, [pc, #28]	; (80064b4 <I2C_MasterRequestWrite+0x100>)
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f865 	bl	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	00010008 	.word	0x00010008
 80064b4:	00010002 	.word	0x00010002

080064b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	603b      	str	r3, [r7, #0]
 80064c4:	4613      	mov	r3, r2
 80064c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c8:	e025      	b.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d021      	beq.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d2:	f7ff fa4f 	bl	8005974 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d302      	bcc.n	80064e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d116      	bne.n	8006516 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e023      	b.n	800655e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10d      	bne.n	800653c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	43da      	mvns	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	e00c      	b.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	43da      	mvns	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d0b6      	beq.n	80064ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006574:	e051      	b.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d123      	bne.n	80065ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006594:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800659e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f043 0204 	orr.w	r2, r3, #4
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e046      	b.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d021      	beq.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7ff f9cd 	bl	8005974 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f043 0220 	orr.w	r2, r3, #32
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e020      	b.n	800665c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	0c1b      	lsrs	r3, r3, #16
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d10c      	bne.n	800663e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	43da      	mvns	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	4013      	ands	r3, r2
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e00b      	b.n	8006656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	43da      	mvns	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4013      	ands	r3, r2
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d18d      	bne.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006670:	e02d      	b.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f878 	bl	8006768 <I2C_IsAcknowledgeFailed>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e02d      	b.n	80066de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d021      	beq.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7ff f973 	bl	8005974 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d116      	bne.n	80066ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f043 0220 	orr.w	r2, r3, #32
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e007      	b.n	80066de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d1ca      	bne.n	8006672 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066f2:	e02d      	b.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f837 	bl	8006768 <I2C_IsAcknowledgeFailed>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e02d      	b.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d021      	beq.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7ff f932 	bl	8005974 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d116      	bne.n	8006750 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e007      	b.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b04      	cmp	r3, #4
 800675c:	d1ca      	bne.n	80066f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677e:	d11b      	bne.n	80067b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006788:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	f043 0204 	orr.w	r2, r3, #4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0cc      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067dc:	4b68      	ldr	r3, [pc, #416]	; (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d90c      	bls.n	8006804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ea:	4b65      	ldr	r3, [pc, #404]	; (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f2:	4b63      	ldr	r3, [pc, #396]	; (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0b8      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d020      	beq.n	8006852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800681c:	4b59      	ldr	r3, [pc, #356]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	4a58      	ldr	r2, [pc, #352]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006834:	4b53      	ldr	r3, [pc, #332]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	4a52      	ldr	r2, [pc, #328]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800683e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006840:	4b50      	ldr	r3, [pc, #320]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	494d      	ldr	r1, [pc, #308]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d044      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d107      	bne.n	8006876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006866:	4b47      	ldr	r3, [pc, #284]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d119      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e07f      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d003      	beq.n	8006886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006882:	2b03      	cmp	r3, #3
 8006884:	d107      	bne.n	8006896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006886:	4b3f      	ldr	r3, [pc, #252]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e06f      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006896:	4b3b      	ldr	r3, [pc, #236]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e067      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068a6:	4b37      	ldr	r3, [pc, #220]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 0203 	bic.w	r2, r3, #3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	4934      	ldr	r1, [pc, #208]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068b8:	f7ff f85c 	bl	8005974 <HAL_GetTick>
 80068bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068be:	e00a      	b.n	80068d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c0:	f7ff f858 	bl	8005974 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e04f      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068d6:	4b2b      	ldr	r3, [pc, #172]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 020c 	and.w	r2, r3, #12
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d1eb      	bne.n	80068c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068e8:	4b25      	ldr	r3, [pc, #148]	; (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d20c      	bcs.n	8006910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b22      	ldr	r3, [pc, #136]	; (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <HAL_RCC_ClockConfig+0x1b8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e032      	b.n	8006976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800691c:	4b19      	ldr	r3, [pc, #100]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4916      	ldr	r1, [pc, #88]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	490e      	ldr	r1, [pc, #56]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 800694a:	4313      	orrs	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800694e:	f000 f855 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 8006952:	4602      	mov	r2, r0
 8006954:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <HAL_RCC_ClockConfig+0x1bc>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	490a      	ldr	r1, [pc, #40]	; (8006988 <HAL_RCC_ClockConfig+0x1c0>)
 8006960:	5ccb      	ldrb	r3, [r1, r3]
 8006962:	fa22 f303 	lsr.w	r3, r2, r3
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <HAL_RCC_ClockConfig+0x1c4>)
 8006968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800696a:	4b09      	ldr	r3, [pc, #36]	; (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe ffbc 	bl	80058ec <HAL_InitTick>

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40023c00 	.word	0x40023c00
 8006984:	40023800 	.word	0x40023800
 8006988:	08009484 	.word	0x08009484
 800698c:	20000004 	.word	0x20000004
 8006990:	2000000c 	.word	0x2000000c

08006994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006994:	b480      	push	{r7}
 8006996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006998:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800699a:	681b      	ldr	r3, [r3, #0]
}
 800699c:	4618      	mov	r0, r3
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000004 	.word	0x20000004

080069ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069b0:	f7ff fff0 	bl	8006994 <HAL_RCC_GetHCLKFreq>
 80069b4:	4602      	mov	r2, r0
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	0a9b      	lsrs	r3, r3, #10
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	4903      	ldr	r1, [pc, #12]	; (80069d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069c2:	5ccb      	ldrb	r3, [r1, r3]
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40023800 	.word	0x40023800
 80069d0:	08009494 	.word	0x08009494

080069d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069d8:	f7ff ffdc 	bl	8006994 <HAL_RCC_GetHCLKFreq>
 80069dc:	4602      	mov	r2, r0
 80069de:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	0b5b      	lsrs	r3, r3, #13
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	4903      	ldr	r1, [pc, #12]	; (80069f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069ea:	5ccb      	ldrb	r3, [r1, r3]
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40023800 	.word	0x40023800
 80069f8:	08009494 	.word	0x08009494

080069fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a00:	b088      	sub	sp, #32
 8006a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a18:	4bce      	ldr	r3, [pc, #824]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 030c 	and.w	r3, r3, #12
 8006a20:	2b0c      	cmp	r3, #12
 8006a22:	f200 818d 	bhi.w	8006d40 <HAL_RCC_GetSysClockFreq+0x344>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <HAL_RCC_GetSysClockFreq+0x30>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006d41 	.word	0x08006d41
 8006a34:	08006d41 	.word	0x08006d41
 8006a38:	08006d41 	.word	0x08006d41
 8006a3c:	08006a67 	.word	0x08006a67
 8006a40:	08006d41 	.word	0x08006d41
 8006a44:	08006d41 	.word	0x08006d41
 8006a48:	08006d41 	.word	0x08006d41
 8006a4c:	08006a6d 	.word	0x08006a6d
 8006a50:	08006d41 	.word	0x08006d41
 8006a54:	08006d41 	.word	0x08006d41
 8006a58:	08006d41 	.word	0x08006d41
 8006a5c:	08006be1 	.word	0x08006be1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a60:	4bbd      	ldr	r3, [pc, #756]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006a62:	61bb      	str	r3, [r7, #24]
       break;
 8006a64:	e16f      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a66:	4bbd      	ldr	r3, [pc, #756]	; (8006d5c <HAL_RCC_GetSysClockFreq+0x360>)
 8006a68:	61bb      	str	r3, [r7, #24]
      break;
 8006a6a:	e16c      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a6c:	4bb9      	ldr	r3, [pc, #740]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a74:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a76:	4bb7      	ldr	r3, [pc, #732]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d053      	beq.n	8006b2a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a82:	4bb4      	ldr	r3, [pc, #720]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a92:	f04f 0100 	mov.w	r1, #0
 8006a96:	ea02 0400 	and.w	r4, r2, r0
 8006a9a:	603c      	str	r4, [r7, #0]
 8006a9c:	400b      	ands	r3, r1
 8006a9e:	607b      	str	r3, [r7, #4]
 8006aa0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	014b      	lsls	r3, r1, #5
 8006ab2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ab6:	0142      	lsls	r2, r0, #5
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4619      	mov	r1, r3
 8006abc:	4623      	mov	r3, r4
 8006abe:	1ac0      	subs	r0, r0, r3
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	eb61 0103 	sbc.w	r1, r1, r3
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	018b      	lsls	r3, r1, #6
 8006ad0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ad4:	0182      	lsls	r2, r0, #6
 8006ad6:	1a12      	subs	r2, r2, r0
 8006ad8:	eb63 0301 	sbc.w	r3, r3, r1
 8006adc:	f04f 0000 	mov.w	r0, #0
 8006ae0:	f04f 0100 	mov.w	r1, #0
 8006ae4:	00d9      	lsls	r1, r3, #3
 8006ae6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006aea:	00d0      	lsls	r0, r2, #3
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4621      	mov	r1, r4
 8006af2:	1852      	adds	r2, r2, r1
 8006af4:	4629      	mov	r1, r5
 8006af6:	eb43 0101 	adc.w	r1, r3, r1
 8006afa:	460b      	mov	r3, r1
 8006afc:	f04f 0000 	mov.w	r0, #0
 8006b00:	f04f 0100 	mov.w	r1, #0
 8006b04:	0259      	lsls	r1, r3, #9
 8006b06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006b0a:	0250      	lsls	r0, r2, #9
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4610      	mov	r0, r2
 8006b12:	4619      	mov	r1, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	f7f9 fb72 	bl	8000204 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4613      	mov	r3, r2
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e04c      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b2a:	4b8a      	ldr	r3, [pc, #552]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	099b      	lsrs	r3, r3, #6
 8006b30:	461a      	mov	r2, r3
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b3a:	f04f 0100 	mov.w	r1, #0
 8006b3e:	ea02 0a00 	and.w	sl, r2, r0
 8006b42:	ea03 0b01 	and.w	fp, r3, r1
 8006b46:	4650      	mov	r0, sl
 8006b48:	4659      	mov	r1, fp
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	014b      	lsls	r3, r1, #5
 8006b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b58:	0142      	lsls	r2, r0, #5
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	ebb0 000a 	subs.w	r0, r0, sl
 8006b62:	eb61 010b 	sbc.w	r1, r1, fp
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	018b      	lsls	r3, r1, #6
 8006b70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b74:	0182      	lsls	r2, r0, #6
 8006b76:	1a12      	subs	r2, r2, r0
 8006b78:	eb63 0301 	sbc.w	r3, r3, r1
 8006b7c:	f04f 0000 	mov.w	r0, #0
 8006b80:	f04f 0100 	mov.w	r1, #0
 8006b84:	00d9      	lsls	r1, r3, #3
 8006b86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b8a:	00d0      	lsls	r0, r2, #3
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	eb12 020a 	adds.w	r2, r2, sl
 8006b94:	eb43 030b 	adc.w	r3, r3, fp
 8006b98:	f04f 0000 	mov.w	r0, #0
 8006b9c:	f04f 0100 	mov.w	r1, #0
 8006ba0:	0299      	lsls	r1, r3, #10
 8006ba2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ba6:	0290      	lsls	r0, r2, #10
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4610      	mov	r0, r2
 8006bae:	4619      	mov	r1, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	f7f9 fb24 	bl	8000204 <__aeabi_uldivmod>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bc4:	4b63      	ldr	r3, [pc, #396]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	0c1b      	lsrs	r3, r3, #16
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	3301      	adds	r3, #1
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	61bb      	str	r3, [r7, #24]
      break;
 8006bde:	e0b2      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006be0:	4b5c      	ldr	r3, [pc, #368]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bea:	4b5a      	ldr	r3, [pc, #360]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d04d      	beq.n	8006c92 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bf6:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	099b      	lsrs	r3, r3, #6
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c06:	f04f 0100 	mov.w	r1, #0
 8006c0a:	ea02 0800 	and.w	r8, r2, r0
 8006c0e:	ea03 0901 	and.w	r9, r3, r1
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f04f 0200 	mov.w	r2, #0
 8006c1a:	f04f 0300 	mov.w	r3, #0
 8006c1e:	014b      	lsls	r3, r1, #5
 8006c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c24:	0142      	lsls	r2, r0, #5
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	ebb0 0008 	subs.w	r0, r0, r8
 8006c2e:	eb61 0109 	sbc.w	r1, r1, r9
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	018b      	lsls	r3, r1, #6
 8006c3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c40:	0182      	lsls	r2, r0, #6
 8006c42:	1a12      	subs	r2, r2, r0
 8006c44:	eb63 0301 	sbc.w	r3, r3, r1
 8006c48:	f04f 0000 	mov.w	r0, #0
 8006c4c:	f04f 0100 	mov.w	r1, #0
 8006c50:	00d9      	lsls	r1, r3, #3
 8006c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c56:	00d0      	lsls	r0, r2, #3
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	eb12 0208 	adds.w	r2, r2, r8
 8006c60:	eb43 0309 	adc.w	r3, r3, r9
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	0259      	lsls	r1, r3, #9
 8006c6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006c72:	0250      	lsls	r0, r2, #9
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	f7f9 fabe 	bl	8000204 <__aeabi_uldivmod>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e04a      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c92:	4b30      	ldr	r3, [pc, #192]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f04f 0300 	mov.w	r3, #0
 8006c9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ca2:	f04f 0100 	mov.w	r1, #0
 8006ca6:	ea02 0400 	and.w	r4, r2, r0
 8006caa:	ea03 0501 	and.w	r5, r3, r1
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	014b      	lsls	r3, r1, #5
 8006cbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006cc0:	0142      	lsls	r2, r0, #5
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	1b00      	subs	r0, r0, r4
 8006cc8:	eb61 0105 	sbc.w	r1, r1, r5
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	018b      	lsls	r3, r1, #6
 8006cd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006cda:	0182      	lsls	r2, r0, #6
 8006cdc:	1a12      	subs	r2, r2, r0
 8006cde:	eb63 0301 	sbc.w	r3, r3, r1
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	00d9      	lsls	r1, r3, #3
 8006cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cf0:	00d0      	lsls	r0, r2, #3
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	1912      	adds	r2, r2, r4
 8006cf8:	eb45 0303 	adc.w	r3, r5, r3
 8006cfc:	f04f 0000 	mov.w	r0, #0
 8006d00:	f04f 0100 	mov.w	r1, #0
 8006d04:	0299      	lsls	r1, r3, #10
 8006d06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d0a:	0290      	lsls	r0, r2, #10
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4610      	mov	r0, r2
 8006d12:	4619      	mov	r1, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	f7f9 fa72 	bl	8000204 <__aeabi_uldivmod>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4613      	mov	r3, r2
 8006d26:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	0f1b      	lsrs	r3, r3, #28
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	61bb      	str	r3, [r7, #24]
      break;
 8006d3e:	e002      	b.n	8006d46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006d42:	61bb      	str	r3, [r7, #24]
      break;
 8006d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d46:	69bb      	ldr	r3, [r7, #24]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	40023800 	.word	0x40023800
 8006d58:	00f42400 	.word	0x00f42400
 8006d5c:	007a1200 	.word	0x007a1200

08006d60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e28d      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8083 	beq.w	8006e86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d80:	4b94      	ldr	r3, [pc, #592]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d019      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006d8c:	4b91      	ldr	r3, [pc, #580]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d106      	bne.n	8006da6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006d98:	4b8e      	ldr	r3, [pc, #568]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da4:	d00c      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006da6:	4b8b      	ldr	r3, [pc, #556]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006dae:	2b0c      	cmp	r3, #12
 8006db0:	d112      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db2:	4b88      	ldr	r3, [pc, #544]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dbe:	d10b      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc0:	4b84      	ldr	r3, [pc, #528]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d05b      	beq.n	8006e84 <HAL_RCC_OscConfig+0x124>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d157      	bne.n	8006e84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e25a      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de0:	d106      	bne.n	8006df0 <HAL_RCC_OscConfig+0x90>
 8006de2:	4b7c      	ldr	r3, [pc, #496]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a7b      	ldr	r2, [pc, #492]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	e01d      	b.n	8006e2c <HAL_RCC_OscConfig+0xcc>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006df8:	d10c      	bne.n	8006e14 <HAL_RCC_OscConfig+0xb4>
 8006dfa:	4b76      	ldr	r3, [pc, #472]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a75      	ldr	r2, [pc, #468]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4b73      	ldr	r3, [pc, #460]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a72      	ldr	r2, [pc, #456]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e00b      	b.n	8006e2c <HAL_RCC_OscConfig+0xcc>
 8006e14:	4b6f      	ldr	r3, [pc, #444]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a6e      	ldr	r2, [pc, #440]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	4b6c      	ldr	r3, [pc, #432]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6b      	ldr	r2, [pc, #428]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d013      	beq.n	8006e5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e34:	f7fe fd9e 	bl	8005974 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e3c:	f7fe fd9a 	bl	8005974 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b64      	cmp	r3, #100	; 0x64
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e21f      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4e:	4b61      	ldr	r3, [pc, #388]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0xdc>
 8006e5a:	e014      	b.n	8006e86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fe fd8a 	bl	8005974 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e64:	f7fe fd86 	bl	8005974 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b64      	cmp	r3, #100	; 0x64
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e20b      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e76:	4b57      	ldr	r3, [pc, #348]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <HAL_RCC_OscConfig+0x104>
 8006e82:	e000      	b.n	8006e86 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d06f      	beq.n	8006f72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e92:	4b50      	ldr	r3, [pc, #320]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d017      	beq.n	8006ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006e9e:	4b4d      	ldr	r3, [pc, #308]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d105      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eaa:	4b4a      	ldr	r3, [pc, #296]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00b      	beq.n	8006ece <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eb6:	4b47      	ldr	r3, [pc, #284]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	d11c      	bne.n	8006efc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ec2:	4b44      	ldr	r3, [pc, #272]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d116      	bne.n	8006efc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ece:	4b41      	ldr	r3, [pc, #260]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x186>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d001      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e1d3      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee6:	4b3b      	ldr	r3, [pc, #236]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	4937      	ldr	r1, [pc, #220]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006efa:	e03a      	b.n	8006f72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d020      	beq.n	8006f46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f04:	4b34      	ldr	r3, [pc, #208]	; (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0a:	f7fe fd33 	bl	8005974 <HAL_GetTick>
 8006f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f10:	e008      	b.n	8006f24 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f12:	f7fe fd2f 	bl	8005974 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e1b4      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f24:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0f0      	beq.n	8006f12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f30:	4b28      	ldr	r3, [pc, #160]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	4925      	ldr	r1, [pc, #148]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]
 8006f44:	e015      	b.n	8006f72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f46:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <HAL_RCC_OscConfig+0x278>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4c:	f7fe fd12 	bl	8005974 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f54:	f7fe fd0e 	bl	8005974 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e193      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f66:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d036      	beq.n	8006fec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d016      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <HAL_RCC_OscConfig+0x27c>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8c:	f7fe fcf2 	bl	8005974 <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f94:	f7fe fcee 	bl	8005974 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e173      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fa6:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_RCC_OscConfig+0x274>)
 8006fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0f0      	beq.n	8006f94 <HAL_RCC_OscConfig+0x234>
 8006fb2:	e01b      	b.n	8006fec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fb4:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <HAL_RCC_OscConfig+0x27c>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fba:	f7fe fcdb 	bl	8005974 <HAL_GetTick>
 8006fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fc0:	e00e      	b.n	8006fe0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fc2:	f7fe fcd7 	bl	8005974 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d907      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e15c      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	42470000 	.word	0x42470000
 8006fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe0:	4b8a      	ldr	r3, [pc, #552]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8006fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1ea      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 8097 	beq.w	8007128 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffe:	4b83      	ldr	r3, [pc, #524]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10f      	bne.n	800702a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	4b7f      	ldr	r3, [pc, #508]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	4a7e      	ldr	r2, [pc, #504]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007018:	6413      	str	r3, [r2, #64]	; 0x40
 800701a:	4b7c      	ldr	r3, [pc, #496]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702a:	4b79      	ldr	r3, [pc, #484]	; (8007210 <HAL_RCC_OscConfig+0x4b0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007032:	2b00      	cmp	r3, #0
 8007034:	d118      	bne.n	8007068 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007036:	4b76      	ldr	r3, [pc, #472]	; (8007210 <HAL_RCC_OscConfig+0x4b0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a75      	ldr	r2, [pc, #468]	; (8007210 <HAL_RCC_OscConfig+0x4b0>)
 800703c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007042:	f7fe fc97 	bl	8005974 <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007048:	e008      	b.n	800705c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800704a:	f7fe fc93 	bl	8005974 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e118      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800705c:	4b6c      	ldr	r3, [pc, #432]	; (8007210 <HAL_RCC_OscConfig+0x4b0>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0f0      	beq.n	800704a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d106      	bne.n	800707e <HAL_RCC_OscConfig+0x31e>
 8007070:	4b66      	ldr	r3, [pc, #408]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007074:	4a65      	ldr	r2, [pc, #404]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	6713      	str	r3, [r2, #112]	; 0x70
 800707c:	e01c      	b.n	80070b8 <HAL_RCC_OscConfig+0x358>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2b05      	cmp	r3, #5
 8007084:	d10c      	bne.n	80070a0 <HAL_RCC_OscConfig+0x340>
 8007086:	4b61      	ldr	r3, [pc, #388]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	4a60      	ldr	r2, [pc, #384]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 800708c:	f043 0304 	orr.w	r3, r3, #4
 8007090:	6713      	str	r3, [r2, #112]	; 0x70
 8007092:	4b5e      	ldr	r3, [pc, #376]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a5d      	ldr	r2, [pc, #372]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007098:	f043 0301 	orr.w	r3, r3, #1
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
 800709e:	e00b      	b.n	80070b8 <HAL_RCC_OscConfig+0x358>
 80070a0:	4b5a      	ldr	r3, [pc, #360]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80070a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a4:	4a59      	ldr	r2, [pc, #356]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	6713      	str	r3, [r2, #112]	; 0x70
 80070ac:	4b57      	ldr	r3, [pc, #348]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	4a56      	ldr	r2, [pc, #344]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80070b2:	f023 0304 	bic.w	r3, r3, #4
 80070b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d015      	beq.n	80070ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c0:	f7fe fc58 	bl	8005974 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c6:	e00a      	b.n	80070de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c8:	f7fe fc54 	bl	8005974 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e0d7      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070de:	4b4b      	ldr	r3, [pc, #300]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0ee      	beq.n	80070c8 <HAL_RCC_OscConfig+0x368>
 80070ea:	e014      	b.n	8007116 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ec:	f7fe fc42 	bl	8005974 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f2:	e00a      	b.n	800710a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070f4:	f7fe fc3e 	bl	8005974 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e0c1      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800710a:	4b40      	ldr	r3, [pc, #256]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1ee      	bne.n	80070f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d105      	bne.n	8007128 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800711c:	4b3b      	ldr	r3, [pc, #236]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	4a3a      	ldr	r2, [pc, #232]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007126:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 80ad 	beq.w	800728c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007132:	4b36      	ldr	r3, [pc, #216]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 030c 	and.w	r3, r3, #12
 800713a:	2b08      	cmp	r3, #8
 800713c:	d060      	beq.n	8007200 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d145      	bne.n	80071d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007146:	4b33      	ldr	r3, [pc, #204]	; (8007214 <HAL_RCC_OscConfig+0x4b4>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714c:	f7fe fc12 	bl	8005974 <HAL_GetTick>
 8007150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007152:	e008      	b.n	8007166 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007154:	f7fe fc0e 	bl	8005974 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	2b02      	cmp	r3, #2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e093      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f0      	bne.n	8007154 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69da      	ldr	r2, [r3, #28]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	019b      	lsls	r3, r3, #6
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	3b01      	subs	r3, #1
 800718c:	041b      	lsls	r3, r3, #16
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	061b      	lsls	r3, r3, #24
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	071b      	lsls	r3, r3, #28
 800719e:	491b      	ldr	r1, [pc, #108]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071a4:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <HAL_RCC_OscConfig+0x4b4>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071aa:	f7fe fbe3 	bl	8005974 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071b2:	f7fe fbdf 	bl	8005974 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e064      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071c4:	4b11      	ldr	r3, [pc, #68]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCC_OscConfig+0x452>
 80071d0:	e05c      	b.n	800728c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071d2:	4b10      	ldr	r3, [pc, #64]	; (8007214 <HAL_RCC_OscConfig+0x4b4>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fe fbcc 	bl	8005974 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071e0:	f7fe fbc8 	bl	8005974 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e04d      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071f2:	4b06      	ldr	r3, [pc, #24]	; (800720c <HAL_RCC_OscConfig+0x4ac>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f0      	bne.n	80071e0 <HAL_RCC_OscConfig+0x480>
 80071fe:	e045      	b.n	800728c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d107      	bne.n	8007218 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e040      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
 800720c:	40023800 	.word	0x40023800
 8007210:	40007000 	.word	0x40007000
 8007214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007218:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <HAL_RCC_OscConfig+0x538>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d030      	beq.n	8007288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007230:	429a      	cmp	r2, r3
 8007232:	d129      	bne.n	8007288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723e:	429a      	cmp	r2, r3
 8007240:	d122      	bne.n	8007288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007248:	4013      	ands	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800724e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007250:	4293      	cmp	r3, r2
 8007252:	d119      	bne.n	8007288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	3b01      	subs	r3, #1
 8007262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007264:	429a      	cmp	r2, r3
 8007266:	d10f      	bne.n	8007288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007274:	429a      	cmp	r2, r3
 8007276:	d107      	bne.n	8007288 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007284:	429a      	cmp	r2, r3
 8007286:	d001      	beq.n	800728c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	40023800 	.word	0x40023800

0800729c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e07b      	b.n	80073a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d108      	bne.n	80072c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072be:	d009      	beq.n	80072d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	61da      	str	r2, [r3, #28]
 80072c6:	e005      	b.n	80072d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fa fa98 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800730a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007358:	ea42 0103 	orr.w	r1, r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	f003 0104 	and.w	r1, r3, #4
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	f003 0210 	and.w	r2, r3, #16
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b088      	sub	sp, #32
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	603b      	str	r3, [r7, #0]
 80073ba:	4613      	mov	r3, r2
 80073bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d101      	bne.n	80073d0 <HAL_SPI_Transmit+0x22>
 80073cc:	2302      	movs	r3, #2
 80073ce:	e126      	b.n	800761e <HAL_SPI_Transmit+0x270>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073d8:	f7fe facc 	bl	8005974 <HAL_GetTick>
 80073dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d002      	beq.n	80073f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073ee:	2302      	movs	r3, #2
 80073f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073f2:	e10b      	b.n	800760c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <HAL_SPI_Transmit+0x52>
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007404:	e102      	b.n	800760c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2203      	movs	r2, #3
 800740a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	88fa      	ldrh	r2, [r7, #6]
 800741e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800744c:	d10f      	bne.n	800746e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800746c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d007      	beq.n	800748c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007494:	d14b      	bne.n	800752e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_SPI_Transmit+0xf6>
 800749e:	8afb      	ldrh	r3, [r7, #22]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d13e      	bne.n	8007522 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	881a      	ldrh	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	1c9a      	adds	r2, r3, #2
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074c8:	e02b      	b.n	8007522 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d112      	bne.n	80074fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	881a      	ldrh	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	1c9a      	adds	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80074fc:	e011      	b.n	8007522 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074fe:	f7fe fa39 	bl	8005974 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d803      	bhi.n	8007516 <HAL_SPI_Transmit+0x168>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007514:	d102      	bne.n	800751c <HAL_SPI_Transmit+0x16e>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007520:	e074      	b.n	800760c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1ce      	bne.n	80074ca <HAL_SPI_Transmit+0x11c>
 800752c:	e04c      	b.n	80075c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <HAL_SPI_Transmit+0x18e>
 8007536:	8afb      	ldrh	r3, [r7, #22]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d140      	bne.n	80075be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	330c      	adds	r3, #12
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007562:	e02c      	b.n	80075be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b02      	cmp	r3, #2
 8007570:	d113      	bne.n	800759a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	7812      	ldrb	r2, [r2, #0]
 800757e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	86da      	strh	r2, [r3, #54]	; 0x36
 8007598:	e011      	b.n	80075be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800759a:	f7fe f9eb 	bl	8005974 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d803      	bhi.n	80075b2 <HAL_SPI_Transmit+0x204>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b0:	d102      	bne.n	80075b8 <HAL_SPI_Transmit+0x20a>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075bc:	e026      	b.n	800760c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1cd      	bne.n	8007564 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fa63 	bl	8007a98 <SPI_EndRxTxTransaction>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2220      	movs	r2, #32
 80075dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075e6:	2300      	movs	r3, #0
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	77fb      	strb	r3, [r7, #31]
 8007608:	e000      	b.n	800760c <HAL_SPI_Transmit+0x25e>
  }

error:
 800760a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800761c:	7ffb      	ldrb	r3, [r7, #31]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b08c      	sub	sp, #48	; 0x30
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007634:	2301      	movs	r3, #1
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_SPI_TransmitReceive+0x26>
 8007648:	2302      	movs	r3, #2
 800764a:	e18a      	b.n	8007962 <HAL_SPI_TransmitReceive+0x33c>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007654:	f7fe f98e 	bl	8005974 <HAL_GetTick>
 8007658:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800766a:	887b      	ldrh	r3, [r7, #2]
 800766c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800766e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007672:	2b01      	cmp	r3, #1
 8007674:	d00f      	beq.n	8007696 <HAL_SPI_TransmitReceive+0x70>
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800767c:	d107      	bne.n	800768e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <HAL_SPI_TransmitReceive+0x68>
 8007686:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800768a:	2b04      	cmp	r3, #4
 800768c:	d003      	beq.n	8007696 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800768e:	2302      	movs	r3, #2
 8007690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007694:	e15b      	b.n	800794e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d005      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x82>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x82>
 80076a2:	887b      	ldrh	r3, [r7, #2]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ae:	e14e      	b.n	800794e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d003      	beq.n	80076c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2205      	movs	r2, #5
 80076c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	887a      	ldrh	r2, [r7, #2]
 80076d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	887a      	ldrh	r2, [r7, #2]
 80076da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	887a      	ldrh	r2, [r7, #2]
 80076e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	887a      	ldrh	r2, [r7, #2]
 80076ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d007      	beq.n	8007718 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007716:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007720:	d178      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x10a>
 800772a:	8b7b      	ldrh	r3, [r7, #26]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d166      	bne.n	80077fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	881a      	ldrh	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	1c9a      	adds	r2, r3, #2
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007754:	e053      	b.n	80077fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b02      	cmp	r3, #2
 8007762:	d11b      	bne.n	800779c <HAL_SPI_TransmitReceive+0x176>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d016      	beq.n	800779c <HAL_SPI_TransmitReceive+0x176>
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d113      	bne.n	800779c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	881a      	ldrh	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	1c9a      	adds	r2, r3, #2
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d119      	bne.n	80077de <HAL_SPI_TransmitReceive+0x1b8>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d014      	beq.n	80077de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	b292      	uxth	r2, r2
 80077c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	1c9a      	adds	r2, r3, #2
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077da:	2301      	movs	r3, #1
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077de:	f7fe f8c9 	bl	8005974 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d807      	bhi.n	80077fe <HAL_SPI_TransmitReceive+0x1d8>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f4:	d003      	beq.n	80077fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077fc:	e0a7      	b.n	800794e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1a6      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x130>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1a1      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x130>
 8007812:	e07c      	b.n	800790e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_SPI_TransmitReceive+0x1fc>
 800781c:	8b7b      	ldrh	r3, [r7, #26]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d16b      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	7812      	ldrb	r2, [r2, #0]
 800782e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007848:	e057      	b.n	80078fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b02      	cmp	r3, #2
 8007856:	d11c      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x26c>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d017      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x26c>
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	2b01      	cmp	r3, #1
 8007866:	d114      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b01      	cmp	r3, #1
 800789e:	d119      	bne.n	80078d4 <HAL_SPI_TransmitReceive+0x2ae>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d014      	beq.n	80078d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078d0:	2301      	movs	r3, #1
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078d4:	f7fe f84e 	bl	8005974 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d803      	bhi.n	80078ec <HAL_SPI_TransmitReceive+0x2c6>
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x2cc>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d103      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80078f8:	e029      	b.n	800794e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fe:	b29b      	uxth	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1a2      	bne.n	800784a <HAL_SPI_TransmitReceive+0x224>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d19d      	bne.n	800784a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800790e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f8c0 	bl	8007a98 <SPI_EndRxTxTransaction>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d006      	beq.n	800792c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800792a:	e010      	b.n	800794e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	e000      	b.n	800794e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800794c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800795e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007962:	4618      	mov	r0, r3
 8007964:	3730      	adds	r7, #48	; 0x30
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007978:	b2db      	uxtb	r3, r3
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007998:	f7fd ffec 	bl	8005974 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4413      	add	r3, r2
 80079a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079a8:	f7fd ffe4 	bl	8005974 <HAL_GetTick>
 80079ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079ae:	4b39      	ldr	r3, [pc, #228]	; (8007a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	015b      	lsls	r3, r3, #5
 80079b4:	0d1b      	lsrs	r3, r3, #20
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
 80079bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079be:	e054      	b.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d050      	beq.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079c8:	f7fd ffd4 	bl	8005974 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d902      	bls.n	80079de <SPI_WaitFlagStateUntilTimeout+0x56>
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d13d      	bne.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079f6:	d111      	bne.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a00:	d004      	beq.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0a:	d107      	bne.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a24:	d10f      	bne.n	8007a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e017      	b.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4013      	ands	r3, r2
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d19b      	bne.n	80079c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000004 	.word	0x20000004

08007a98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <SPI_EndRxTxTransaction+0x7c>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1b      	ldr	r2, [pc, #108]	; (8007b18 <SPI_EndRxTxTransaction+0x80>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	0d5b      	lsrs	r3, r3, #21
 8007ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ab4:	fb02 f303 	mul.w	r3, r2, r3
 8007ab8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ac2:	d112      	bne.n	8007aea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	2180      	movs	r1, #128	; 0x80
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff ff5a 	bl	8007988 <SPI_WaitFlagStateUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d016      	beq.n	8007b08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e00f      	b.n	8007b0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b00:	2b80      	cmp	r3, #128	; 0x80
 8007b02:	d0f2      	beq.n	8007aea <SPI_EndRxTxTransaction+0x52>
 8007b04:	e000      	b.n	8007b08 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b06:	bf00      	nop
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000004 	.word	0x20000004
 8007b18:	165e9f81 	.word	0x165e9f81

08007b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e041      	b.n	8007bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7f9 feb6 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f000 fb42 	bl	80081e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d001      	beq.n	8007bd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e046      	b.n	8007c62 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a23      	ldr	r2, [pc, #140]	; (8007c70 <HAL_TIM_Base_Start+0xb4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d022      	beq.n	8007c2c <HAL_TIM_Base_Start+0x70>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d01d      	beq.n	8007c2c <HAL_TIM_Base_Start+0x70>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1f      	ldr	r2, [pc, #124]	; (8007c74 <HAL_TIM_Base_Start+0xb8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d018      	beq.n	8007c2c <HAL_TIM_Base_Start+0x70>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1e      	ldr	r2, [pc, #120]	; (8007c78 <HAL_TIM_Base_Start+0xbc>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <HAL_TIM_Base_Start+0x70>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1c      	ldr	r2, [pc, #112]	; (8007c7c <HAL_TIM_Base_Start+0xc0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00e      	beq.n	8007c2c <HAL_TIM_Base_Start+0x70>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a1b      	ldr	r2, [pc, #108]	; (8007c80 <HAL_TIM_Base_Start+0xc4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d009      	beq.n	8007c2c <HAL_TIM_Base_Start+0x70>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a19      	ldr	r2, [pc, #100]	; (8007c84 <HAL_TIM_Base_Start+0xc8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIM_Base_Start+0x70>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <HAL_TIM_Base_Start+0xcc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d111      	bne.n	8007c50 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b06      	cmp	r3, #6
 8007c3c:	d010      	beq.n	8007c60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e007      	b.n	8007c60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	40010000 	.word	0x40010000
 8007c74:	40000400 	.word	0x40000400
 8007c78:	40000800 	.word	0x40000800
 8007c7c:	40000c00 	.word	0x40000c00
 8007c80:	40010400 	.word	0x40010400
 8007c84:	40014000 	.word	0x40014000
 8007c88:	40001800 	.word	0x40001800

08007c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e041      	b.n	8007d22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d106      	bne.n	8007cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f839 	bl	8007d2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	f000 fa8a 	bl	80081e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
	...

08007d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <HAL_TIM_PWM_Start+0x24>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	bf14      	ite	ne
 8007d5c:	2301      	movne	r3, #1
 8007d5e:	2300      	moveq	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	e022      	b.n	8007daa <HAL_TIM_PWM_Start+0x6a>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d109      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x3e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	bf14      	ite	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	2300      	moveq	r3, #0
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	e015      	b.n	8007daa <HAL_TIM_PWM_Start+0x6a>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d109      	bne.n	8007d98 <HAL_TIM_PWM_Start+0x58>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	bf14      	ite	ne
 8007d90:	2301      	movne	r3, #1
 8007d92:	2300      	moveq	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	e008      	b.n	8007daa <HAL_TIM_PWM_Start+0x6a>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	bf14      	ite	ne
 8007da4:	2301      	movne	r3, #1
 8007da6:	2300      	moveq	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e07c      	b.n	8007eac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_PWM_Start+0x82>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dc0:	e013      	b.n	8007dea <HAL_TIM_PWM_Start+0xaa>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d104      	bne.n	8007dd2 <HAL_TIM_PWM_Start+0x92>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dd0:	e00b      	b.n	8007dea <HAL_TIM_PWM_Start+0xaa>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d104      	bne.n	8007de2 <HAL_TIM_PWM_Start+0xa2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007de0:	e003      	b.n	8007dea <HAL_TIM_PWM_Start+0xaa>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2201      	movs	r2, #1
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fce0 	bl	80087b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <HAL_TIM_PWM_Start+0x174>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d004      	beq.n	8007e0c <HAL_TIM_PWM_Start+0xcc>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <HAL_TIM_PWM_Start+0x178>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d101      	bne.n	8007e10 <HAL_TIM_PWM_Start+0xd0>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <HAL_TIM_PWM_Start+0xd2>
 8007e10:	2300      	movs	r3, #0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d007      	beq.n	8007e26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a22      	ldr	r2, [pc, #136]	; (8007eb4 <HAL_TIM_PWM_Start+0x174>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d022      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x136>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e38:	d01d      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x136>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1f      	ldr	r2, [pc, #124]	; (8007ebc <HAL_TIM_PWM_Start+0x17c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d018      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x136>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a1d      	ldr	r2, [pc, #116]	; (8007ec0 <HAL_TIM_PWM_Start+0x180>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d013      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x136>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1c      	ldr	r2, [pc, #112]	; (8007ec4 <HAL_TIM_PWM_Start+0x184>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00e      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x136>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <HAL_TIM_PWM_Start+0x178>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d009      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x136>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a18      	ldr	r2, [pc, #96]	; (8007ec8 <HAL_TIM_PWM_Start+0x188>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d004      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x136>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a16      	ldr	r2, [pc, #88]	; (8007ecc <HAL_TIM_PWM_Start+0x18c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d111      	bne.n	8007e9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b06      	cmp	r3, #6
 8007e86:	d010      	beq.n	8007eaa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e98:	e007      	b.n	8007eaa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0201 	orr.w	r2, r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40010400 	.word	0x40010400
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40000c00 	.word	0x40000c00
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40001800 	.word	0x40001800

08007ed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e0ae      	b.n	800804c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	f200 809f 	bhi.w	800803c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	0800803d 	.word	0x0800803d
 8007f0c:	0800803d 	.word	0x0800803d
 8007f10:	0800803d 	.word	0x0800803d
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	0800803d 	.word	0x0800803d
 8007f1c:	0800803d 	.word	0x0800803d
 8007f20:	0800803d 	.word	0x0800803d
 8007f24:	08007fbb 	.word	0x08007fbb
 8007f28:	0800803d 	.word	0x0800803d
 8007f2c:	0800803d 	.word	0x0800803d
 8007f30:	0800803d 	.word	0x0800803d
 8007f34:	08007ffb 	.word	0x08007ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68b9      	ldr	r1, [r7, #8]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f9f0 	bl	8008324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0208 	orr.w	r2, r2, #8
 8007f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0204 	bic.w	r2, r2, #4
 8007f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6999      	ldr	r1, [r3, #24]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	619a      	str	r2, [r3, #24]
      break;
 8007f76:	e064      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fa40 	bl	8008404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6999      	ldr	r1, [r3, #24]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	021a      	lsls	r2, r3, #8
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	619a      	str	r2, [r3, #24]
      break;
 8007fb8:	e043      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fa95 	bl	80084f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0208 	orr.w	r2, r2, #8
 8007fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0204 	bic.w	r2, r2, #4
 8007fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69d9      	ldr	r1, [r3, #28]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	61da      	str	r2, [r3, #28]
      break;
 8007ff8:	e023      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fae9 	bl	80085d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	69da      	ldr	r2, [r3, #28]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69d9      	ldr	r1, [r3, #28]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	021a      	lsls	r2, r3, #8
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	61da      	str	r2, [r3, #28]
      break;
 800803a:	e002      	b.n	8008042 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	75fb      	strb	r3, [r7, #23]
      break;
 8008040:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_TIM_ConfigClockSource+0x1c>
 800806c:	2302      	movs	r3, #2
 800806e:	e0b4      	b.n	80081da <HAL_TIM_ConfigClockSource+0x186>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800808e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a8:	d03e      	beq.n	8008128 <HAL_TIM_ConfigClockSource+0xd4>
 80080aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ae:	f200 8087 	bhi.w	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b6:	f000 8086 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x172>
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080be:	d87f      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080c0:	2b70      	cmp	r3, #112	; 0x70
 80080c2:	d01a      	beq.n	80080fa <HAL_TIM_ConfigClockSource+0xa6>
 80080c4:	2b70      	cmp	r3, #112	; 0x70
 80080c6:	d87b      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080c8:	2b60      	cmp	r3, #96	; 0x60
 80080ca:	d050      	beq.n	800816e <HAL_TIM_ConfigClockSource+0x11a>
 80080cc:	2b60      	cmp	r3, #96	; 0x60
 80080ce:	d877      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080d0:	2b50      	cmp	r3, #80	; 0x50
 80080d2:	d03c      	beq.n	800814e <HAL_TIM_ConfigClockSource+0xfa>
 80080d4:	2b50      	cmp	r3, #80	; 0x50
 80080d6:	d873      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080d8:	2b40      	cmp	r3, #64	; 0x40
 80080da:	d058      	beq.n	800818e <HAL_TIM_ConfigClockSource+0x13a>
 80080dc:	2b40      	cmp	r3, #64	; 0x40
 80080de:	d86f      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080e0:	2b30      	cmp	r3, #48	; 0x30
 80080e2:	d064      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080e4:	2b30      	cmp	r3, #48	; 0x30
 80080e6:	d86b      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	d060      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d867      	bhi.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d05c      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080f4:	2b10      	cmp	r3, #16
 80080f6:	d05a      	beq.n	80081ae <HAL_TIM_ConfigClockSource+0x15a>
 80080f8:	e062      	b.n	80081c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6899      	ldr	r1, [r3, #8]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f000 fb35 	bl	8008778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800811c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	609a      	str	r2, [r3, #8]
      break;
 8008126:	e04f      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	6899      	ldr	r1, [r3, #8]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f000 fb1e 	bl	8008778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800814a:	609a      	str	r2, [r3, #8]
      break;
 800814c:	e03c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6859      	ldr	r1, [r3, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	461a      	mov	r2, r3
 800815c:	f000 fa92 	bl	8008684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2150      	movs	r1, #80	; 0x50
 8008166:	4618      	mov	r0, r3
 8008168:	f000 faeb 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 800816c:	e02c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6859      	ldr	r1, [r3, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	461a      	mov	r2, r3
 800817c:	f000 fab1 	bl	80086e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2160      	movs	r1, #96	; 0x60
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fadb 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 800818c:	e01c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	6859      	ldr	r1, [r3, #4]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	461a      	mov	r2, r3
 800819c:	f000 fa72 	bl	8008684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2140      	movs	r1, #64	; 0x40
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 facb 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 80081ac:	e00c      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f000 fac2 	bl	8008742 <TIM_ITRx_SetConfig>
      break;
 80081be:	e003      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
      break;
 80081c4:	e000      	b.n	80081c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a40      	ldr	r2, [pc, #256]	; (80082f8 <TIM_Base_SetConfig+0x114>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008202:	d00f      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a3d      	ldr	r2, [pc, #244]	; (80082fc <TIM_Base_SetConfig+0x118>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a3c      	ldr	r2, [pc, #240]	; (8008300 <TIM_Base_SetConfig+0x11c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d007      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a3b      	ldr	r2, [pc, #236]	; (8008304 <TIM_Base_SetConfig+0x120>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a3a      	ldr	r2, [pc, #232]	; (8008308 <TIM_Base_SetConfig+0x124>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d108      	bne.n	8008236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a2f      	ldr	r2, [pc, #188]	; (80082f8 <TIM_Base_SetConfig+0x114>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d02b      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008244:	d027      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a2c      	ldr	r2, [pc, #176]	; (80082fc <TIM_Base_SetConfig+0x118>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d023      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a2b      	ldr	r2, [pc, #172]	; (8008300 <TIM_Base_SetConfig+0x11c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01f      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a2a      	ldr	r2, [pc, #168]	; (8008304 <TIM_Base_SetConfig+0x120>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d01b      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a29      	ldr	r2, [pc, #164]	; (8008308 <TIM_Base_SetConfig+0x124>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d017      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a28      	ldr	r2, [pc, #160]	; (800830c <TIM_Base_SetConfig+0x128>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d013      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a27      	ldr	r2, [pc, #156]	; (8008310 <TIM_Base_SetConfig+0x12c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00f      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a26      	ldr	r2, [pc, #152]	; (8008314 <TIM_Base_SetConfig+0x130>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00b      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a25      	ldr	r2, [pc, #148]	; (8008318 <TIM_Base_SetConfig+0x134>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d007      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a24      	ldr	r2, [pc, #144]	; (800831c <TIM_Base_SetConfig+0x138>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a23      	ldr	r2, [pc, #140]	; (8008320 <TIM_Base_SetConfig+0x13c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d108      	bne.n	80082a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800829c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <TIM_Base_SetConfig+0x114>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d003      	beq.n	80082dc <TIM_Base_SetConfig+0xf8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a0c      	ldr	r2, [pc, #48]	; (8008308 <TIM_Base_SetConfig+0x124>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d103      	bne.n	80082e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	691a      	ldr	r2, [r3, #16]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	615a      	str	r2, [r3, #20]
}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	40010400 	.word	0x40010400
 800830c:	40014000 	.word	0x40014000
 8008310:	40014400 	.word	0x40014400
 8008314:	40014800 	.word	0x40014800
 8008318:	40001800 	.word	0x40001800
 800831c:	40001c00 	.word	0x40001c00
 8008320:	40002000 	.word	0x40002000

08008324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	f023 0201 	bic.w	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0303 	bic.w	r3, r3, #3
 800835a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f023 0302 	bic.w	r3, r3, #2
 800836c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a20      	ldr	r2, [pc, #128]	; (80083fc <TIM_OC1_SetConfig+0xd8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_OC1_SetConfig+0x64>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a1f      	ldr	r2, [pc, #124]	; (8008400 <TIM_OC1_SetConfig+0xdc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d10c      	bne.n	80083a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f023 0308 	bic.w	r3, r3, #8
 800838e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f023 0304 	bic.w	r3, r3, #4
 80083a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a15      	ldr	r2, [pc, #84]	; (80083fc <TIM_OC1_SetConfig+0xd8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d003      	beq.n	80083b2 <TIM_OC1_SetConfig+0x8e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a14      	ldr	r2, [pc, #80]	; (8008400 <TIM_OC1_SetConfig+0xdc>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d111      	bne.n	80083d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400

08008404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f023 0210 	bic.w	r2, r3, #16
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800843a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f023 0320 	bic.w	r3, r3, #32
 800844e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a22      	ldr	r2, [pc, #136]	; (80084e8 <TIM_OC2_SetConfig+0xe4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d003      	beq.n	800846c <TIM_OC2_SetConfig+0x68>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a21      	ldr	r2, [pc, #132]	; (80084ec <TIM_OC2_SetConfig+0xe8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d10d      	bne.n	8008488 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <TIM_OC2_SetConfig+0xe4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_OC2_SetConfig+0x94>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a16      	ldr	r2, [pc, #88]	; (80084ec <TIM_OC2_SetConfig+0xe8>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d113      	bne.n	80084c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800849e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40010000 	.word	0x40010000
 80084ec:	40010400 	.word	0x40010400

080084f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0303 	bic.w	r3, r3, #3
 8008526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	021b      	lsls	r3, r3, #8
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a21      	ldr	r2, [pc, #132]	; (80085d0 <TIM_OC3_SetConfig+0xe0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_OC3_SetConfig+0x66>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a20      	ldr	r2, [pc, #128]	; (80085d4 <TIM_OC3_SetConfig+0xe4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d10d      	bne.n	8008572 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800855c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a16      	ldr	r2, [pc, #88]	; (80085d0 <TIM_OC3_SetConfig+0xe0>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d003      	beq.n	8008582 <TIM_OC3_SetConfig+0x92>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <TIM_OC3_SetConfig+0xe4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d113      	bne.n	80085aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	4313      	orrs	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	621a      	str	r2, [r3, #32]
}
 80085c4:	bf00      	nop
 80085c6:	371c      	adds	r7, #28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40010400 	.word	0x40010400

080085d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800860e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	031b      	lsls	r3, r3, #12
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a12      	ldr	r2, [pc, #72]	; (800867c <TIM_OC4_SetConfig+0xa4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_OC4_SetConfig+0x68>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a11      	ldr	r2, [pc, #68]	; (8008680 <TIM_OC4_SetConfig+0xa8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d109      	bne.n	8008654 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	019b      	lsls	r3, r3, #6
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	621a      	str	r2, [r3, #32]
}
 800866e:	bf00      	nop
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40010000 	.word	0x40010000
 8008680:	40010400 	.word	0x40010400

08008684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	f023 0201 	bic.w	r2, r3, #1
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f023 030a 	bic.w	r3, r3, #10
 80086c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	621a      	str	r2, [r3, #32]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b087      	sub	sp, #28
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	f023 0210 	bic.w	r2, r3, #16
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800870c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	031b      	lsls	r3, r3, #12
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	4313      	orrs	r3, r2
 8008716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800871e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	011b      	lsls	r3, r3, #4
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	4313      	orrs	r3, r2
 8008728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	621a      	str	r2, [r3, #32]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	f043 0307 	orr.w	r3, r3, #7
 8008764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	609a      	str	r2, [r3, #8]
}
 800876c:	bf00      	nop
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	021a      	lsls	r2, r3, #8
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	431a      	orrs	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4313      	orrs	r3, r2
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	609a      	str	r2, [r3, #8]
}
 80087ac:	bf00      	nop
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f003 031f 	and.w	r3, r3, #31
 80087ca:	2201      	movs	r2, #1
 80087cc:	fa02 f303 	lsl.w	r3, r2, r3
 80087d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a1a      	ldr	r2, [r3, #32]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	43db      	mvns	r3, r3
 80087da:	401a      	ands	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a1a      	ldr	r2, [r3, #32]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 031f 	and.w	r3, r3, #31
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	fa01 f303 	lsl.w	r3, r1, r3
 80087f0:	431a      	orrs	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	621a      	str	r2, [r3, #32]
}
 80087f6:	bf00      	nop
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008814:	2b01      	cmp	r3, #1
 8008816:	d101      	bne.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008818:	2302      	movs	r3, #2
 800881a:	e05a      	b.n	80088d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d022      	beq.n	80088a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008868:	d01d      	beq.n	80088a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a1d      	ldr	r2, [pc, #116]	; (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d018      	beq.n	80088a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d013      	beq.n	80088a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a1a      	ldr	r2, [pc, #104]	; (80088ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00e      	beq.n	80088a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a18      	ldr	r2, [pc, #96]	; (80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d009      	beq.n	80088a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a17      	ldr	r2, [pc, #92]	; (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d004      	beq.n	80088a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d10c      	bne.n	80088c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	40010000 	.word	0x40010000
 80088e4:	40000400 	.word	0x40000400
 80088e8:	40000800 	.word	0x40000800
 80088ec:	40000c00 	.word	0x40000c00
 80088f0:	40010400 	.word	0x40010400
 80088f4:	40014000 	.word	0x40014000
 80088f8:	40001800 	.word	0x40001800

080088fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e03f      	b.n	800898e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d106      	bne.n	8008928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7f9 f838 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2224      	movs	r2, #36	; 0x24
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800893e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f929 	bl	8008b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	691a      	ldr	r2, [r3, #16]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68da      	ldr	r2, [r3, #12]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b08a      	sub	sp, #40	; 0x28
 800899a:	af02      	add	r7, sp, #8
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	d17c      	bne.n	8008ab0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_UART_Transmit+0x2c>
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e075      	b.n	8008ab2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_UART_Transmit+0x3e>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e06e      	b.n	8008ab2 <HAL_UART_Transmit+0x11c>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2221      	movs	r2, #33	; 0x21
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ea:	f7fc ffc3 	bl	8005974 <HAL_GetTick>
 80089ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	88fa      	ldrh	r2, [r7, #6]
 80089fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a04:	d108      	bne.n	8008a18 <HAL_UART_Transmit+0x82>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	e003      	b.n	8008a20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a28:	e02a      	b.n	8008a80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	2180      	movs	r1, #128	; 0x80
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f840 	bl	8008aba <UART_WaitOnFlagUntilTimeout>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e036      	b.n	8008ab2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	e007      	b.n	8008a72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1cf      	bne.n	8008a2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2140      	movs	r1, #64	; 0x40
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f810 	bl	8008aba <UART_WaitOnFlagUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e006      	b.n	8008ab2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	e000      	b.n	8008ab2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ab0:	2302      	movs	r3, #2
  }
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3720      	adds	r7, #32
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b090      	sub	sp, #64	; 0x40
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	603b      	str	r3, [r7, #0]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aca:	e050      	b.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad2:	d04c      	beq.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <UART_WaitOnFlagUntilTimeout+0x30>
 8008ada:	f7fc ff4b 	bl	8005974 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d241      	bcs.n	8008b6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	330c      	adds	r3, #12
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b0a:	637a      	str	r2, [r7, #52]	; 0x34
 8008b0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e5      	bne.n	8008aea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3314      	adds	r3, #20
 8008b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3314      	adds	r3, #20
 8008b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b3e:	623a      	str	r2, [r7, #32]
 8008b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	69f9      	ldr	r1, [r7, #28]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e5      	bne.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e00f      	b.n	8008b8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4013      	ands	r3, r2
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	bf0c      	ite	eq
 8008b7e:	2301      	moveq	r3, #1
 8008b80:	2300      	movne	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d09f      	beq.n	8008acc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3740      	adds	r7, #64	; 0x40
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	b09f      	sub	sp, #124	; 0x7c
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bae:	68d9      	ldr	r1, [r3, #12]
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	ea40 0301 	orr.w	r3, r0, r1
 8008bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bbc:	689a      	ldr	r2, [r3, #8]
 8008bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bdc:	f021 010c 	bic.w	r1, r1, #12
 8008be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008be6:	430b      	orrs	r3, r1
 8008be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf6:	6999      	ldr	r1, [r3, #24]
 8008bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	ea40 0301 	orr.w	r3, r0, r1
 8008c00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	4bc5      	ldr	r3, [pc, #788]	; (8008f1c <UART_SetConfig+0x384>)
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d004      	beq.n	8008c16 <UART_SetConfig+0x7e>
 8008c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4bc3      	ldr	r3, [pc, #780]	; (8008f20 <UART_SetConfig+0x388>)
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d103      	bne.n	8008c1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c16:	f7fd fedd 	bl	80069d4 <HAL_RCC_GetPCLK2Freq>
 8008c1a:	6778      	str	r0, [r7, #116]	; 0x74
 8008c1c:	e002      	b.n	8008c24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c1e:	f7fd fec5 	bl	80069ac <HAL_RCC_GetPCLK1Freq>
 8008c22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c2c:	f040 80b6 	bne.w	8008d9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c32:	461c      	mov	r4, r3
 8008c34:	f04f 0500 	mov.w	r5, #0
 8008c38:	4622      	mov	r2, r4
 8008c3a:	462b      	mov	r3, r5
 8008c3c:	1891      	adds	r1, r2, r2
 8008c3e:	6439      	str	r1, [r7, #64]	; 0x40
 8008c40:	415b      	adcs	r3, r3
 8008c42:	647b      	str	r3, [r7, #68]	; 0x44
 8008c44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c48:	1912      	adds	r2, r2, r4
 8008c4a:	eb45 0303 	adc.w	r3, r5, r3
 8008c4e:	f04f 0000 	mov.w	r0, #0
 8008c52:	f04f 0100 	mov.w	r1, #0
 8008c56:	00d9      	lsls	r1, r3, #3
 8008c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c5c:	00d0      	lsls	r0, r2, #3
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	1911      	adds	r1, r2, r4
 8008c64:	6639      	str	r1, [r7, #96]	; 0x60
 8008c66:	416b      	adcs	r3, r5
 8008c68:	667b      	str	r3, [r7, #100]	; 0x64
 8008c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f04f 0300 	mov.w	r3, #0
 8008c74:	1891      	adds	r1, r2, r2
 8008c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c78:	415b      	adcs	r3, r3
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008c84:	f7f7 fabe 	bl	8000204 <__aeabi_uldivmod>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4ba5      	ldr	r3, [pc, #660]	; (8008f24 <UART_SetConfig+0x38c>)
 8008c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	011e      	lsls	r6, r3, #4
 8008c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c98:	461c      	mov	r4, r3
 8008c9a:	f04f 0500 	mov.w	r5, #0
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	1891      	adds	r1, r2, r2
 8008ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8008ca6:	415b      	adcs	r3, r3
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8008caa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008cae:	1912      	adds	r2, r2, r4
 8008cb0:	eb45 0303 	adc.w	r3, r5, r3
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f04f 0100 	mov.w	r1, #0
 8008cbc:	00d9      	lsls	r1, r3, #3
 8008cbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cc2:	00d0      	lsls	r0, r2, #3
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	1911      	adds	r1, r2, r4
 8008cca:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ccc:	416b      	adcs	r3, r5
 8008cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f04f 0300 	mov.w	r3, #0
 8008cda:	1891      	adds	r1, r2, r2
 8008cdc:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cde:	415b      	adcs	r3, r3
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ce6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008cea:	f7f7 fa8b 	bl	8000204 <__aeabi_uldivmod>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4b8c      	ldr	r3, [pc, #560]	; (8008f24 <UART_SetConfig+0x38c>)
 8008cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8008cf8:	095b      	lsrs	r3, r3, #5
 8008cfa:	2164      	movs	r1, #100	; 0x64
 8008cfc:	fb01 f303 	mul.w	r3, r1, r3
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	3332      	adds	r3, #50	; 0x32
 8008d06:	4a87      	ldr	r2, [pc, #540]	; (8008f24 <UART_SetConfig+0x38c>)
 8008d08:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0c:	095b      	lsrs	r3, r3, #5
 8008d0e:	005b      	lsls	r3, r3, #1
 8008d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d14:	441e      	add	r6, r3
 8008d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f04f 0100 	mov.w	r1, #0
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	1894      	adds	r4, r2, r2
 8008d24:	623c      	str	r4, [r7, #32]
 8008d26:	415b      	adcs	r3, r3
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
 8008d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d2e:	1812      	adds	r2, r2, r0
 8008d30:	eb41 0303 	adc.w	r3, r1, r3
 8008d34:	f04f 0400 	mov.w	r4, #0
 8008d38:	f04f 0500 	mov.w	r5, #0
 8008d3c:	00dd      	lsls	r5, r3, #3
 8008d3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d42:	00d4      	lsls	r4, r2, #3
 8008d44:	4622      	mov	r2, r4
 8008d46:	462b      	mov	r3, r5
 8008d48:	1814      	adds	r4, r2, r0
 8008d4a:	653c      	str	r4, [r7, #80]	; 0x50
 8008d4c:	414b      	adcs	r3, r1
 8008d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	461a      	mov	r2, r3
 8008d56:	f04f 0300 	mov.w	r3, #0
 8008d5a:	1891      	adds	r1, r2, r2
 8008d5c:	61b9      	str	r1, [r7, #24]
 8008d5e:	415b      	adcs	r3, r3
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008d6a:	f7f7 fa4b 	bl	8000204 <__aeabi_uldivmod>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4b6c      	ldr	r3, [pc, #432]	; (8008f24 <UART_SetConfig+0x38c>)
 8008d74:	fba3 1302 	umull	r1, r3, r3, r2
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	2164      	movs	r1, #100	; 0x64
 8008d7c:	fb01 f303 	mul.w	r3, r1, r3
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	3332      	adds	r3, #50	; 0x32
 8008d86:	4a67      	ldr	r2, [pc, #412]	; (8008f24 <UART_SetConfig+0x38c>)
 8008d88:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8c:	095b      	lsrs	r3, r3, #5
 8008d8e:	f003 0207 	and.w	r2, r3, #7
 8008d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4432      	add	r2, r6
 8008d98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d9a:	e0b9      	b.n	8008f10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d9e:	461c      	mov	r4, r3
 8008da0:	f04f 0500 	mov.w	r5, #0
 8008da4:	4622      	mov	r2, r4
 8008da6:	462b      	mov	r3, r5
 8008da8:	1891      	adds	r1, r2, r2
 8008daa:	6139      	str	r1, [r7, #16]
 8008dac:	415b      	adcs	r3, r3
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008db4:	1912      	adds	r2, r2, r4
 8008db6:	eb45 0303 	adc.w	r3, r5, r3
 8008dba:	f04f 0000 	mov.w	r0, #0
 8008dbe:	f04f 0100 	mov.w	r1, #0
 8008dc2:	00d9      	lsls	r1, r3, #3
 8008dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008dc8:	00d0      	lsls	r0, r2, #3
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	eb12 0804 	adds.w	r8, r2, r4
 8008dd2:	eb43 0905 	adc.w	r9, r3, r5
 8008dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	008b      	lsls	r3, r1, #2
 8008dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dee:	0082      	lsls	r2, r0, #2
 8008df0:	4640      	mov	r0, r8
 8008df2:	4649      	mov	r1, r9
 8008df4:	f7f7 fa06 	bl	8000204 <__aeabi_uldivmod>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4b49      	ldr	r3, [pc, #292]	; (8008f24 <UART_SetConfig+0x38c>)
 8008dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	011e      	lsls	r6, r3, #4
 8008e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f04f 0100 	mov.w	r1, #0
 8008e0e:	4602      	mov	r2, r0
 8008e10:	460b      	mov	r3, r1
 8008e12:	1894      	adds	r4, r2, r2
 8008e14:	60bc      	str	r4, [r7, #8]
 8008e16:	415b      	adcs	r3, r3
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e1e:	1812      	adds	r2, r2, r0
 8008e20:	eb41 0303 	adc.w	r3, r1, r3
 8008e24:	f04f 0400 	mov.w	r4, #0
 8008e28:	f04f 0500 	mov.w	r5, #0
 8008e2c:	00dd      	lsls	r5, r3, #3
 8008e2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e32:	00d4      	lsls	r4, r2, #3
 8008e34:	4622      	mov	r2, r4
 8008e36:	462b      	mov	r3, r5
 8008e38:	1814      	adds	r4, r2, r0
 8008e3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008e3c:	414b      	adcs	r3, r1
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f04f 0100 	mov.w	r1, #0
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	008b      	lsls	r3, r1, #2
 8008e54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e58:	0082      	lsls	r2, r0, #2
 8008e5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008e5e:	f7f7 f9d1 	bl	8000204 <__aeabi_uldivmod>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4b2f      	ldr	r3, [pc, #188]	; (8008f24 <UART_SetConfig+0x38c>)
 8008e68:	fba3 1302 	umull	r1, r3, r3, r2
 8008e6c:	095b      	lsrs	r3, r3, #5
 8008e6e:	2164      	movs	r1, #100	; 0x64
 8008e70:	fb01 f303 	mul.w	r3, r1, r3
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	3332      	adds	r3, #50	; 0x32
 8008e7a:	4a2a      	ldr	r2, [pc, #168]	; (8008f24 <UART_SetConfig+0x38c>)
 8008e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e86:	441e      	add	r6, r3
 8008e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f04f 0100 	mov.w	r1, #0
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	1894      	adds	r4, r2, r2
 8008e96:	603c      	str	r4, [r7, #0]
 8008e98:	415b      	adcs	r3, r3
 8008e9a:	607b      	str	r3, [r7, #4]
 8008e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea0:	1812      	adds	r2, r2, r0
 8008ea2:	eb41 0303 	adc.w	r3, r1, r3
 8008ea6:	f04f 0400 	mov.w	r4, #0
 8008eaa:	f04f 0500 	mov.w	r5, #0
 8008eae:	00dd      	lsls	r5, r3, #3
 8008eb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008eb4:	00d4      	lsls	r4, r2, #3
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	462b      	mov	r3, r5
 8008eba:	eb12 0a00 	adds.w	sl, r2, r0
 8008ebe:	eb43 0b01 	adc.w	fp, r3, r1
 8008ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f04f 0100 	mov.w	r1, #0
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	008b      	lsls	r3, r1, #2
 8008ed6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008eda:	0082      	lsls	r2, r0, #2
 8008edc:	4650      	mov	r0, sl
 8008ede:	4659      	mov	r1, fp
 8008ee0:	f7f7 f990 	bl	8000204 <__aeabi_uldivmod>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <UART_SetConfig+0x38c>)
 8008eea:	fba3 1302 	umull	r1, r3, r3, r2
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	2164      	movs	r1, #100	; 0x64
 8008ef2:	fb01 f303 	mul.w	r3, r1, r3
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	3332      	adds	r3, #50	; 0x32
 8008efc:	4a09      	ldr	r2, [pc, #36]	; (8008f24 <UART_SetConfig+0x38c>)
 8008efe:	fba2 2303 	umull	r2, r3, r2, r3
 8008f02:	095b      	lsrs	r3, r3, #5
 8008f04:	f003 020f 	and.w	r2, r3, #15
 8008f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4432      	add	r2, r6
 8008f0e:	609a      	str	r2, [r3, #8]
}
 8008f10:	bf00      	nop
 8008f12:	377c      	adds	r7, #124	; 0x7c
 8008f14:	46bd      	mov	sp, r7
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40011000 	.word	0x40011000
 8008f20:	40011400 	.word	0x40011400
 8008f24:	51eb851f 	.word	0x51eb851f

08008f28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008f2c:	4904      	ldr	r1, [pc, #16]	; (8008f40 <MX_FATFS_Init+0x18>)
 8008f2e:	4805      	ldr	r0, [pc, #20]	; (8008f44 <MX_FATFS_Init+0x1c>)
 8008f30:	f000 f8ba 	bl	80090a8 <FATFS_LinkDriver>
 8008f34:	4603      	mov	r3, r0
 8008f36:	461a      	mov	r2, r3
 8008f38:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <MX_FATFS_Init+0x20>)
 8008f3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008f3c:	bf00      	nop
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	200052ec 	.word	0x200052ec
 8008f44:	20000014 	.word	0x20000014
 8008f48:	200052f0 	.word	0x200052f0

08008f4c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    return SD_disk_initialize (pdrv)	;
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7f7 fdff 	bl	8000b5c <SD_disk_initialize>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008f76:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <USER_status+0x24>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
    return SD_disk_status (pdrv);
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7f7 fed6 	bl	8000d30 <SD_disk_status>
 8008f84:	4603      	mov	r3, r0
 8008f86:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000011 	.word	0x20000011

08008f94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8008fa4:	7bf8      	ldrb	r0, [r7, #15]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	68b9      	ldr	r1, [r7, #8]
 8008fac:	f7f7 fed6 	bl	8000d5c <SD_disk_read>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8008fcc:	7bf8      	ldrb	r0, [r7, #15]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	68b9      	ldr	r1, [r7, #8]
 8008fd4:	f7f7 ff2c 	bl	8000e30 <SD_disk_write>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	603a      	str	r2, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl (pdrv, cmd, buff);
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	79b9      	ldrb	r1, [r7, #6]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f7 ff9a 	bl	8000f38 <SD_disk_ioctl>
 8009004:	4603      	mov	r3, r0
 8009006:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	4613      	mov	r3, r2
 800901c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800901e:	2301      	movs	r3, #1
 8009020:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009026:	4b1f      	ldr	r3, [pc, #124]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 8009028:	7a5b      	ldrb	r3, [r3, #9]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d131      	bne.n	8009094 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009030:	4b1c      	ldr	r3, [pc, #112]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 8009032:	7a5b      	ldrb	r3, [r3, #9]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	461a      	mov	r2, r3
 8009038:	4b1a      	ldr	r3, [pc, #104]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 800903a:	2100      	movs	r1, #0
 800903c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800903e:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 8009040:	7a5b      	ldrb	r3, [r3, #9]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	4a17      	ldr	r2, [pc, #92]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800904e:	4b15      	ldr	r3, [pc, #84]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	4b13      	ldr	r3, [pc, #76]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 8009058:	4413      	add	r3, r2
 800905a:	79fa      	ldrb	r2, [r7, #7]
 800905c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800905e:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 8009060:	7a5b      	ldrb	r3, [r3, #9]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	b2d1      	uxtb	r1, r2
 8009068:	4a0e      	ldr	r2, [pc, #56]	; (80090a4 <FATFS_LinkDriverEx+0x94>)
 800906a:	7251      	strb	r1, [r2, #9]
 800906c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800906e:	7dbb      	ldrb	r3, [r7, #22]
 8009070:	3330      	adds	r3, #48	; 0x30
 8009072:	b2da      	uxtb	r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3301      	adds	r3, #1
 800907c:	223a      	movs	r2, #58	; 0x3a
 800907e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	3302      	adds	r3, #2
 8009084:	222f      	movs	r2, #47	; 0x2f
 8009086:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	3303      	adds	r3, #3
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
}
 8009096:	4618      	mov	r0, r3
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000050 	.word	0x20000050

080090a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090b2:	2200      	movs	r2, #0
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff ffaa 	bl	8009010 <FATFS_LinkDriverEx>
 80090bc:	4603      	mov	r3, r0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <__libc_init_array>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	4d0d      	ldr	r5, [pc, #52]	; (8009100 <__libc_init_array+0x38>)
 80090cc:	4c0d      	ldr	r4, [pc, #52]	; (8009104 <__libc_init_array+0x3c>)
 80090ce:	1b64      	subs	r4, r4, r5
 80090d0:	10a4      	asrs	r4, r4, #2
 80090d2:	2600      	movs	r6, #0
 80090d4:	42a6      	cmp	r6, r4
 80090d6:	d109      	bne.n	80090ec <__libc_init_array+0x24>
 80090d8:	4d0b      	ldr	r5, [pc, #44]	; (8009108 <__libc_init_array+0x40>)
 80090da:	4c0c      	ldr	r4, [pc, #48]	; (800910c <__libc_init_array+0x44>)
 80090dc:	f000 f820 	bl	8009120 <_init>
 80090e0:	1b64      	subs	r4, r4, r5
 80090e2:	10a4      	asrs	r4, r4, #2
 80090e4:	2600      	movs	r6, #0
 80090e6:	42a6      	cmp	r6, r4
 80090e8:	d105      	bne.n	80090f6 <__libc_init_array+0x2e>
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f0:	4798      	blx	r3
 80090f2:	3601      	adds	r6, #1
 80090f4:	e7ee      	b.n	80090d4 <__libc_init_array+0xc>
 80090f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fa:	4798      	blx	r3
 80090fc:	3601      	adds	r6, #1
 80090fe:	e7f2      	b.n	80090e6 <__libc_init_array+0x1e>
 8009100:	080099a8 	.word	0x080099a8
 8009104:	080099a8 	.word	0x080099a8
 8009108:	080099a8 	.word	0x080099a8
 800910c:	080099ac 	.word	0x080099ac

08009110 <memset>:
 8009110:	4402      	add	r2, r0
 8009112:	4603      	mov	r3, r0
 8009114:	4293      	cmp	r3, r2
 8009116:	d100      	bne.n	800911a <memset+0xa>
 8009118:	4770      	bx	lr
 800911a:	f803 1b01 	strb.w	r1, [r3], #1
 800911e:	e7f9      	b.n	8009114 <memset+0x4>

08009120 <_init>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr

0800912c <_fini>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr
